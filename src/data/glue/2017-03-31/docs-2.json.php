<?php
// This file was auto-generated from sdk-root/src/data/glue/2017-03-31/docs-2.json
return [ 'version' => '2.0', 'service' => '<fullname>AWS Glue</fullname> <p>Defines the public endpoint for the AWS Glue service.</p>', 'operations' => [ 'BatchCreatePartition' => '<p>Creates one or more partitions in a batch operation.</p>', 'BatchDeleteConnection' => '<p>Deletes a list of connection definitions from the Data Catalog.</p>', 'BatchDeletePartition' => '<p>Deletes one or more partitions in a batch operation.</p>', 'BatchDeleteTable' => '<p>Deletes multiple tables at once.</p> <note> <p>After completing this operation, you will no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure immediate deletion of all related resources, before calling <code>BatchDeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>', 'BatchDeleteTableVersion' => '<p>Deletes a specified batch of versions of a table.</p>', 'BatchGetPartition' => '<p>Retrieves partitions in a batch request.</p>', 'BatchStopJobRun' => '<p>Stops one or more job runs for a specified job definition.</p>', 'CreateClassifier' => '<p>Creates a classifier in the user\'s account. This may be a <code>GrokClassifier</code>, an <code>XMLClassifier</code>, or abbrev <code>JsonClassifier</code>, depending on which field of the request is present.</p>', 'CreateConnection' => '<p>Creates a connection definition in the Data Catalog.</p>', 'CreateCrawler' => '<p>Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the <i>s3Targets</i> field, the <i>jdbcTargets</i> field, or the <i>DynamoDBTargets</i> field.</p>', 'CreateDatabase' => '<p>Creates a new database in a Data Catalog.</p>', 'CreateDevEndpoint' => '<p>Creates a new DevEndpoint.</p>', 'CreateJob' => '<p>Creates a new job definition.</p>', 'CreatePartition' => '<p>Creates a new partition.</p>', 'CreateScript' => '<p>Transforms a directed acyclic graph (DAG) into code.</p>', 'CreateSecurityConfiguration' => '<p>Creates a new security configuration.</p>', 'CreateTable' => '<p>Creates a new table definition in the Data Catalog.</p>', 'CreateTrigger' => '<p>Creates a new trigger.</p>', 'CreateUserDefinedFunction' => '<p>Creates a new function definition in the Data Catalog.</p>', 'DeleteClassifier' => '<p>Removes a classifier from the Data Catalog.</p>', 'DeleteConnection' => '<p>Deletes a connection from the Data Catalog.</p>', 'DeleteCrawler' => '<p>Removes a specified crawler from the Data Catalog, unless the crawler state is <code>RUNNING</code>.</p>', 'DeleteDatabase' => '<p>Removes a specified Database from a Data Catalog.</p> <note> <p>After completing this operation, you will no longer have access to the tables (and all table versions and partitions that might belong to the tables) and the user-defined functions in the deleted database. AWS Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure immediate deletion of all related resources, before calling <code>DeleteDatabase</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, <code>DeletePartition</code> or <code>BatchDeletePartition</code>, <code>DeleteUserDefinedFunction</code>, and <code>DeleteTable</code> or <code>BatchDeleteTable</code>, to delete any resources that belong to the database.</p> </note>', 'DeleteDevEndpoint' => '<p>Deletes a specified DevEndpoint.</p>', 'DeleteJob' => '<p>Deletes a specified job definition. If the job definition is not found, no exception is thrown.</p>', 'DeletePartition' => '<p>Deletes a specified partition.</p>', 'DeleteSecurityConfiguration' => '<p>Deletes a specified security configuration.</p>', 'DeleteTable' => '<p>Removes a table definition from the Data Catalog.</p> <note> <p>After completing this operation, you will no longer have access to the table versions and partitions that belong to the deleted table. AWS Glue deletes these "orphaned" resources asynchronously in a timely manner, at the discretion of the service.</p> <p>To ensure immediate deletion of all related resources, before calling <code>DeleteTable</code>, use <code>DeleteTableVersion</code> or <code>BatchDeleteTableVersion</code>, and <code>DeletePartition</code> or <code>BatchDeletePartition</code>, to delete any resources that belong to the table.</p> </note>', 'DeleteTableVersion' => '<p>Deletes a specified version of a table.</p>', 'DeleteTrigger' => '<p>Deletes a specified trigger. If the trigger is not found, no exception is thrown.</p>', 'DeleteUserDefinedFunction' => '<p>Deletes an existing function definition from the Data Catalog.</p>', 'GetCatalogImportStatus' => '<p>Retrieves the status of a migration operation.</p>', 'GetClassifier' => '<p>Retrieve a classifier by name.</p>', 'GetClassifiers' => '<p>Lists all classifier objects in the Data Catalog.</p>', 'GetConnection' => '<p>Retrieves a connection definition from the Data Catalog.</p>', 'GetConnections' => '<p>Retrieves a list of connection definitions from the Data Catalog.</p>', 'GetCrawler' => '<p>Retrieves metadata for a specified crawler.</p>', 'GetCrawlerMetrics' => '<p>Retrieves metrics about specified crawlers.</p>', 'GetCrawlers' => '<p>Retrieves metadata for all crawlers defined in the customer account.</p>', 'GetDatabase' => '<p>Retrieves the definition of a specified database.</p>', 'GetDatabases' => '<p>Retrieves all Databases defined in a given Data Catalog.</p>', 'GetDataflowGraph' => '<p>Transforms a Python script into a directed acyclic graph (DAG). </p>', 'GetDevEndpoint' => '<p>Retrieves information about a specified DevEndpoint.</p>', 'GetDevEndpoints' => '<p>Retrieves all the DevEndpoints in this AWS account.</p>', 'GetJob' => '<p>Retrieves an existing job definition.</p>', 'GetJobRun' => '<p>Retrieves the metadata for a given job run.</p>', 'GetJobRuns' => '<p>Retrieves metadata for all runs of a given job definition.</p>', 'GetJobs' => '<p>Retrieves all current job definitions.</p>', 'GetMapping' => '<p>Creates mappings.</p>', 'GetPartition' => '<p>Retrieves information about a specified partition.</p>', 'GetPartitions' => '<p>Retrieves information about the partitions in a table.</p>', 'GetPlan' => '<p>Gets code to perform a specified mapping.</p>', 'GetSecurityConfiguration' => '<p>Retrieves a specified security configuration.</p>', 'GetSecurityConfigurations' => '<p>Retrieves a list of all security configurations.</p>', 'GetTable' => '<p>Retrieves the <code>Table</code> definition in a Data Catalog for a specified table.</p>', 'GetTableVersion' => '<p>Retrieves a specified version of a table.</p>', 'GetTableVersions' => '<p>Retrieves a list of strings that identify available versions of a specified table.</p>', 'GetTables' => '<p>Retrieves the definitions of some or all of the tables in a given <code>Database</code>.</p>', 'GetTrigger' => '<p>Retrieves the definition of a trigger.</p>', 'GetTriggers' => '<p>Gets all the triggers associated with a job.</p>', 'GetUserDefinedFunction' => '<p>Retrieves a specified function definition from the Data Catalog.</p>', 'GetUserDefinedFunctions' => '<p>Retrieves a multiple function definitions from the Data Catalog.</p>', 'ImportCatalogToGlue' => '<p>Imports an existing Athena Data Catalog to AWS Glue</p>', 'PutDataCatalogEncryptionSettings' => '<p>Sets the security configuration for a specified catalog. Once the configuration has been set, the specified encryption is applied to every catalog write thereafter.</p>', 'ResetJobBookmark' => '<p>Resets a bookmark entry.</p>', 'StartCrawler' => '<p>Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a <a href="https://docs.aws.amazon.com/glue/latest/dg/aws-glue-api-exceptions.html#aws-glue-api-exceptions-CrawlerRunningException">CrawlerRunningException</a>.</p>', 'StartCrawlerSchedule' => '<p>Changes the schedule state of the specified crawler to <code>SCHEDULED</code>, unless the crawler is already running or the schedule state is already <code>SCHEDULED</code>.</p>', 'StartJobRun' => '<p>Starts a job run using a job definition.</p>', 'StartTrigger' => '<p>Starts an existing trigger. See <a href="http://docs.aws.amazon.com/glue/latest/dg/trigger-job.html">Triggering Jobs</a> for information about how different types of trigger are started.</p>', 'StopCrawler' => '<p>If the specified crawler is running, stops the crawl.</p>', 'StopCrawlerSchedule' => '<p>Sets the schedule state of the specified crawler to <code>NOT_SCHEDULED</code>, but does not stop the crawler if it is already running.</p>', 'StopTrigger' => '<p>Stops a specified trigger.</p>', 'UpdateClassifier' => '<p>Modifies an existing classifier (a <code>GrokClassifier</code>, <code>XMLClassifier</code>, or <code>JsonClassifier</code>, depending on which field is present).</p>', 'UpdateConnection' => '<p>Updates a connection definition in the Data Catalog.</p>', 'UpdateCrawler' => '<p>Updates a crawler. If a crawler is running, you must stop it using <code>StopCrawler</code> before updating it.</p>', 'UpdateCrawlerSchedule' => '<p>Updates the schedule of a crawler using a <code>cron</code> expression. </p>', 'UpdateDatabase' => '<p>Updates an existing database definition in a Data Catalog.</p>', 'UpdateDevEndpoint' => '<p>Updates a specified DevEndpoint.</p>', 'UpdateJob' => '<p>Updates an existing job definition.</p>', 'UpdatePartition' => '<p>Updates a partition.</p>', 'UpdateTable' => '<p>Updates a metadata table in the Data Catalog.</p>', 'UpdateTrigger' => '<p>Updates a trigger definition.</p>', 'UpdateUserDefinedFunction' => '<p>Updates an existing function definition in the Data Catalog.</p>', ], 'shapes' => [ 'AccessDeniedException' => [ 'base' => '<p>Access to a resource was denied.</p>', 'refs' => [], ], 'Action' => [ 'base' => '<p>Defines an action to be initiated by a trigger.</p>', 'refs' => [ 'ActionList$member' => NULL, ], ], 'ActionList' => [ 'base' => NULL, 'refs' => [ 'CreateTriggerRequest$Actions' => '<p>The actions initiated by this trigger when it fires.</p>', 'Trigger$Actions' => '<p>The actions initiated by this trigger.</p>', 'TriggerUpdate$Actions' => '<p>The actions initiated by this trigger.</p>', ], ], 'AlreadyExistsException' => [ 'base' => '<p>A resource to be created or added already exists.</p>', 'refs' => [], ], 'AttemptCount' => [ 'base' => NULL, 'refs' => [ 'JobRun$Attempt' => '<p>The number of the attempt to run this job.</p>', ], ], 'BatchCreatePartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchCreatePartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeleteConnectionRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeleteConnectionResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeletePartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeletePartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeletePartitionValueList' => [ 'base' => NULL, 'refs' => [ 'BatchDeletePartitionRequest$PartitionsToDelete' => '<p>A list of <code>PartitionInput</code> structures that define the partitions to be deleted.</p>', ], ], 'BatchDeleteTableNameList' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteTableRequest$TablesToDelete' => '<p>A list of the table to delete.</p>', ], ], 'BatchDeleteTableRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeleteTableResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeleteTableVersionList' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteTableVersionRequest$VersionIds' => '<p>A list of the IDs of versions to be deleted.</p>', ], ], 'BatchDeleteTableVersionRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchDeleteTableVersionResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchGetPartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchGetPartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchGetPartitionValueList' => [ 'base' => NULL, 'refs' => [ 'BatchGetPartitionRequest$PartitionsToGet' => '<p>A list of partition values identifying the partitions to retrieve.</p>', 'BatchGetPartitionResponse$UnprocessedKeys' => '<p>A list of the partition values in the request for which partions were not returned.</p>', ], ], 'BatchStopJobRunError' => [ 'base' => '<p>Records an error that occurred when attempting to stop a specified job run.</p>', 'refs' => [ 'BatchStopJobRunErrorList$member' => NULL, ], ], 'BatchStopJobRunErrorList' => [ 'base' => NULL, 'refs' => [ 'BatchStopJobRunResponse$Errors' => '<p>A list of the errors that were encountered in tryng to stop JobRuns, including the JobRunId for which each error was encountered and details about the error.</p>', ], ], 'BatchStopJobRunJobRunIdList' => [ 'base' => NULL, 'refs' => [ 'BatchStopJobRunRequest$JobRunIds' => '<p>A list of the JobRunIds that should be stopped for that job definition.</p>', ], ], 'BatchStopJobRunRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchStopJobRunResponse' => [ 'base' => NULL, 'refs' => [], ], 'BatchStopJobRunSuccessfulSubmission' => [ 'base' => '<p>Records a successful request to stop a specified JobRun.</p>', 'refs' => [ 'BatchStopJobRunSuccessfulSubmissionList$member' => NULL, ], ], 'BatchStopJobRunSuccessfulSubmissionList' => [ 'base' => NULL, 'refs' => [ 'BatchStopJobRunResponse$SuccessfulSubmissions' => '<p>A list of the JobRuns that were successfully submitted for stopping.</p>', ], ], 'Boolean' => [ 'base' => NULL, 'refs' => [ 'CatalogImportStatus$ImportCompleted' => '<p>True if the migration has completed, or False otherwise.</p>', 'CodeGenNodeArg$Param' => '<p>True if the value is used as a parameter.</p>', 'CrawlerMetrics$StillEstimating' => '<p>True if the crawler is still estimating how long it will take to complete this run.</p>', 'StorageDescriptor$Compressed' => '<p>True if the data in the table is compressed, or False if not.</p>', 'StorageDescriptor$StoredAsSubDirectories' => '<p>True if the table data is stored in subdirectories, or False if not.</p>', ], ], 'BooleanNullable' => [ 'base' => NULL, 'refs' => [ 'UpdateTableRequest$SkipArchive' => '<p>By default, <code>UpdateTable</code> always creates an archived version of the table before updating it. If <code>skipArchive</code> is set to true, however, <code>UpdateTable</code> does not create the archived version.</p>', ], ], 'BooleanValue' => [ 'base' => NULL, 'refs' => [ 'CreateTriggerRequest$StartOnCreation' => '<p>Set to true to start SCHEDULED and CONDITIONAL triggers when created. True not supported for ON_DEMAND triggers.</p>', 'GetJobRunRequest$PredecessorsIncluded' => '<p>True if a list of predecessor runs should be returned.</p>', 'UpdateDevEndpointRequest$UpdateEtlLibraries' => '<p>True if the list of custom libraries to be loaded in the development endpoint needs to be updated, or False otherwise.</p>', ], ], 'BoundedPartitionValueList' => [ 'base' => NULL, 'refs' => [ 'UpdatePartitionRequest$PartitionValueList' => '<p>A list of the values defining the partition.</p>', ], ], 'CatalogEncryptionMode' => [ 'base' => NULL, 'refs' => [ 'EncryptionAtRest$CatalogEncryptionMode' => '<p>The encryption-at-rest mode for encrypting Data Catalog data.</p>', ], ], 'CatalogEntries' => [ 'base' => NULL, 'refs' => [ 'GetMappingRequest$Sinks' => '<p>A list of target tables.</p>', 'GetPlanRequest$Sinks' => '<p>The target tables.</p>', ], ], 'CatalogEntry' => [ 'base' => '<p>Specifies a table definition in the Data Catalog.</p>', 'refs' => [ 'CatalogEntries$member' => NULL, 'GetMappingRequest$Source' => '<p>Specifies the source table.</p>', 'GetPlanRequest$Source' => '<p>The source table.</p>', ], ], 'CatalogIdString' => [ 'base' => NULL, 'refs' => [ 'BatchCreatePartitionRequest$CatalogId' => '<p>The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.</p>', 'BatchDeleteConnectionRequest$CatalogId' => '<p>The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.</p>', 'BatchDeletePartitionRequest$CatalogId' => '<p>The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.</p>', 'BatchDeleteTableRequest$CatalogId' => '<p>The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.</p>', 'BatchDeleteTableVersionRequest$CatalogId' => '<p>The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.</p>', 'BatchGetPartitionRequest$CatalogId' => '<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.</p>', 'CreateConnectionRequest$CatalogId' => '<p>The ID of the Data Catalog in which to create the connection. If none is supplied, the AWS account ID is used by default.</p>', 'CreateDatabaseRequest$CatalogId' => '<p>The ID of the Data Catalog in which to create the database. If none is supplied, the AWS account ID is used by default.</p>', 'CreatePartitionRequest$CatalogId' => '<p>The ID of the catalog in which the partion is to be created. Currently, this should be the AWS account ID.</p>', 'CreateTableRequest$CatalogId' => '<p>The ID of the Data Catalog in which to create the <code>Table</code>. If none is supplied, the AWS account ID is used by default.</p>', 'CreateUserDefinedFunctionRequest$CatalogId' => '<p>The ID of the Data Catalog in which to create the function. If none is supplied, the AWS account ID is used by default.</p>', 'DeleteConnectionRequest$CatalogId' => '<p>The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.</p>', 'DeleteDatabaseRequest$CatalogId' => '<p>The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.</p>', 'DeletePartitionRequest$CatalogId' => '<p>The ID of the Data Catalog where the partition to be deleted resides. If none is supplied, the AWS account ID is used by default.</p>', 'DeleteTableRequest$CatalogId' => '<p>The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.</p>', 'DeleteTableVersionRequest$CatalogId' => '<p>The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.</p>', 'DeleteUserDefinedFunctionRequest$CatalogId' => '<p>The ID of the Data Catalog where the function to be deleted is located. If none is supplied, the AWS account ID is used by default.</p>', 'GetCatalogImportStatusRequest$CatalogId' => '<p>The ID of the catalog to migrate. Currently, this should be the AWS account ID.</p>', 'GetConnectionRequest$CatalogId' => '<p>The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.</p>', 'GetConnectionsRequest$CatalogId' => '<p>The ID of the Data Catalog in which the connections reside. If none is supplied, the AWS account ID is used by default.</p>', 'GetDatabaseRequest$CatalogId' => '<p>The ID of the Data Catalog in which the database resides. If none is supplied, the AWS account ID is used by default.</p>', 'GetDatabasesRequest$CatalogId' => '<p>The ID of the Data Catalog from which to retrieve <code>Databases</code>. If none is supplied, the AWS account ID is used by default.</p>', 'GetPartitionRequest$CatalogId' => '<p>The ID of the Data Catalog where the partition in question resides. If none is supplied, the AWS account ID is used by default.</p>', 'GetPartitionsRequest$CatalogId' => '<p>The ID of the Data Catalog where the partitions in question reside. If none is supplied, the AWS account ID is used by default.</p>', 'GetTableRequest$CatalogId' => '<p>The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.</p>', 'GetTableVersionRequest$CatalogId' => '<p>The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.</p>', 'GetTableVersionsRequest$CatalogId' => '<p>The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.</p>', 'GetTablesRequest$CatalogId' => '<p>The ID of the Data Catalog where the tables reside. If none is supplied, the AWS account ID is used by default.</p>', 'GetUserDefinedFunctionRequest$CatalogId' => '<p>The ID of the Data Catalog where the function to be retrieved is located. If none is supplied, the AWS account ID is used by default.</p>', 'GetUserDefinedFunctionsRequest$CatalogId' => '<p>The ID of the Data Catalog where the functions to be retrieved are located. If none is supplied, the AWS account ID is used by default.</p>', 'ImportCatalogToGlueRequest$CatalogId' => '<p>The ID of the catalog to import. Currently, this should be the AWS account ID.</p>', 'PutDataCatalogEncryptionSettingsRequest$CatalogId' => '<p>The ID of the Data Catalog for which to set the security configuration. If none is supplied, the AWS account ID is used by default.</p>', 'UpdateConnectionRequest$CatalogId' => '<p>The ID of the Data Catalog in which the connection resides. If none is supplied, the AWS account ID is used by default.</p>', 'UpdateDatabaseRequest$CatalogId' => '<p>The ID of the Data Catalog in which the metadata database resides. If none is supplied, the AWS account ID is used by default.</p>', 'UpdatePartitionRequest$CatalogId' => '<p>The ID of the Data Catalog where the partition to be updated resides. If none is supplied, the AWS account ID is used by default.</p>', 'UpdateTableRequest$CatalogId' => '<p>The ID of the Data Catalog where the table resides. If none is supplied, the AWS account ID is used by default.</p>', 'UpdateUserDefinedFunctionRequest$CatalogId' => '<p>The ID of the Data Catalog where the function to be updated is located. If none is supplied, the AWS account ID is used by default.</p>', ], ], 'CatalogImportStatus' => [ 'base' => '<p>A structure containing migration status information.</p>', 'refs' => [ 'GetCatalogImportStatusResponse$ImportStatus' => '<p>The status of the specified catalog migration.</p>', ], ], 'Classification' => [ 'base' => NULL, 'refs' => [ 'CreateGrokClassifierRequest$Classification' => '<p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>', 'CreateXMLClassifierRequest$Classification' => '<p>An identifier of the data format that the classifier matches.</p>', 'GrokClassifier$Classification' => '<p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, and so on.</p>', 'UpdateGrokClassifierRequest$Classification' => '<p>An identifier of the data format that the classifier matches, such as Twitter, JSON, Omniture logs, Amazon CloudWatch Logs, and so on.</p>', 'UpdateXMLClassifierRequest$Classification' => '<p>An identifier of the data format that the classifier matches.</p>', 'XMLClassifier$Classification' => '<p>An identifier of the data format that the classifier matches.</p>', ], ], 'Classifier' => [ 'base' => '<p>Classifiers are triggered during a crawl task. A classifier checks whether a given file is in a format it can handle, and if it is, the classifier creates a schema in the form of a <code>StructType</code> object that matches that data format.</p> <p>You can use the standard classifiers that AWS Glue supplies, or you can write your own classifiers to best categorize your data sources and specify the appropriate schemas to use for them. A classifier can be a <code>grok</code> classifier, an <code>XML</code> classifier, or a <code>JSON</code> classifier, as specified in one of the fields in the <code>Classifier</code> object.</p>', 'refs' => [ 'ClassifierList$member' => NULL, 'GetClassifierResponse$Classifier' => '<p>The requested classifier.</p>', ], ], 'ClassifierList' => [ 'base' => NULL, 'refs' => [ 'GetClassifiersResponse$Classifiers' => '<p>The requested list of classifier objects.</p>', ], ], 'ClassifierNameList' => [ 'base' => NULL, 'refs' => [ 'Crawler$Classifiers' => '<p>A list of custom classifiers associated with the crawler.</p>', 'CreateCrawlerRequest$Classifiers' => '<p>A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.</p>', 'UpdateCrawlerRequest$Classifiers' => '<p>A list of custom classifiers that the user has registered. By default, all built-in classifiers are included in a crawl, but these custom classifiers always override the default classifiers for a given classification.</p>', ], ], 'CloudWatchEncryption' => [ 'base' => '<p>Specifies how CloudWatch data should be encrypted.</p>', 'refs' => [ 'EncryptionConfiguration$CloudWatchEncryption' => '<p>The encryption configuration for CloudWatch.</p>', ], ], 'CloudWatchEncryptionMode' => [ 'base' => NULL, 'refs' => [ 'CloudWatchEncryption$CloudWatchEncryptionMode' => '<p>The encryption mode to use for CloudWatch data.</p>', ], ], 'CodeGenArgName' => [ 'base' => NULL, 'refs' => [ 'CodeGenEdge$TargetParameter' => '<p>The target of the edge.</p>', 'CodeGenNodeArg$Name' => '<p>The name of the argument or property.</p>', ], ], 'CodeGenArgValue' => [ 'base' => NULL, 'refs' => [ 'CodeGenNodeArg$Value' => '<p>The value of the argument or property.</p>', ], ], 'CodeGenEdge' => [ 'base' => '<p>Represents a directional edge in a directed acyclic graph (DAG).</p>', 'refs' => [ 'DagEdges$member' => NULL, ], ], 'CodeGenIdentifier' => [ 'base' => NULL, 'refs' => [ 'CodeGenEdge$Source' => '<p>The ID of the node at which the edge starts.</p>', 'CodeGenEdge$Target' => '<p>The ID of the node at which the edge ends.</p>', 'CodeGenNode$Id' => '<p>A node identifier that is unique within the node\'s graph.</p>', ], ], 'CodeGenNode' => [ 'base' => '<p>Represents a node in a directed acyclic graph (DAG)</p>', 'refs' => [ 'DagNodes$member' => NULL, ], ], 'CodeGenNodeArg' => [ 'base' => '<p>An argument or property of a node.</p>', 'refs' => [ 'CodeGenNodeArgs$member' => NULL, ], ], 'CodeGenNodeArgs' => [ 'base' => NULL, 'refs' => [ 'CodeGenNode$Args' => '<p>Properties of the node, in the form of name-value pairs.</p>', 'Location$Jdbc' => '<p>A JDBC location.</p>', 'Location$S3' => '<p>An Amazon S3 location.</p>', 'Location$DynamoDB' => '<p>A DynamoDB Table location.</p>', ], ], 'CodeGenNodeType' => [ 'base' => NULL, 'refs' => [ 'CodeGenNode$NodeType' => '<p>The type of node this is.</p>', ], ], 'Column' => [ 'base' => '<p>A column in a <code>Table</code>.</p>', 'refs' => [ 'ColumnList$member' => NULL, ], ], 'ColumnList' => [ 'base' => NULL, 'refs' => [ 'StorageDescriptor$Columns' => '<p>A list of the <code>Columns</code> in the table.</p>', 'Table$PartitionKeys' => '<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>', 'TableInput$PartitionKeys' => '<p>A list of columns by which the table is partitioned. Only primitive types are supported as partition keys.</p>', ], ], 'ColumnTypeString' => [ 'base' => NULL, 'refs' => [ 'Column$Type' => '<p>The datatype of data in the <code>Column</code>.</p>', ], ], 'ColumnValueStringList' => [ 'base' => NULL, 'refs' => [ 'SkewedInfo$SkewedColumnValues' => '<p>A list of values that appear so frequently as to be considered skewed.</p>', ], ], 'ColumnValuesString' => [ 'base' => NULL, 'refs' => [ 'ColumnValueStringList$member' => NULL, 'LocationMap$key' => NULL, 'LocationMap$value' => NULL, ], ], 'CommentString' => [ 'base' => NULL, 'refs' => [ 'Column$Comment' => '<p>Free-form text comment.</p>', ], ], 'ConcurrentModificationException' => [ 'base' => '<p>Two processes are trying to modify a resource simultaneously.</p>', 'refs' => [], ], 'ConcurrentRunsExceededException' => [ 'base' => '<p>Too many jobs are being run concurrently.</p>', 'refs' => [], ], 'Condition' => [ 'base' => '<p>Defines a condition under which a trigger fires.</p>', 'refs' => [ 'ConditionList$member' => NULL, ], ], 'ConditionList' => [ 'base' => NULL, 'refs' => [ 'Predicate$Conditions' => '<p>A list of the conditions that determine when the trigger will fire.</p>', ], ], 'Connection' => [ 'base' => '<p>Defines a connection to a data source.</p>', 'refs' => [ 'ConnectionList$member' => NULL, 'GetConnectionResponse$Connection' => '<p>The requested connection definition.</p>', ], ], 'ConnectionInput' => [ 'base' => '<p>A structure used to specify a connection to create or update.</p>', 'refs' => [ 'CreateConnectionRequest$ConnectionInput' => '<p>A <code>ConnectionInput</code> object defining the connection to create.</p>', 'UpdateConnectionRequest$ConnectionInput' => '<p>A <code>ConnectionInput</code> object that redefines the connection in question.</p>', ], ], 'ConnectionList' => [ 'base' => NULL, 'refs' => [ 'GetConnectionsResponse$ConnectionList' => '<p>A list of requested connection definitions.</p>', ], ], 'ConnectionName' => [ 'base' => NULL, 'refs' => [ 'JdbcTarget$ConnectionName' => '<p>The name of the connection to use to connect to the JDBC target.</p>', ], ], 'ConnectionProperties' => [ 'base' => NULL, 'refs' => [ 'Connection$ConnectionProperties' => '<p>These key-value pairs define parameters for the connection:</p> <ul> <li> <p> <code>HOST</code> - The host URI: either the fully qualified domain name (FQDN) or the IPv4 address of the database host.</p> </li> <li> <p> <code>PORT</code> - The port number, between 1024 and 65535, of the port on which the database host is listening for database connections.</p> </li> <li> <p> <code>USER_NAME</code> - The name under which to log in to the database.</p> </li> <li> <p> <code>PASSWORD</code> - A password, if one is used, for the user name.</p> </li> <li> <p> <code>JDBC_DRIVER_JAR_URI</code> - The S3 path of the a jar file that contains the JDBC driver to use.</p> </li> <li> <p> <code>JDBC_DRIVER_CLASS_NAME</code> - The class name of the JDBC driver to use.</p> </li> <li> <p> <code>JDBC_ENGINE</code> - The name of the JDBC engine to use.</p> </li> <li> <p> <code>JDBC_ENGINE_VERSION</code> - The version of the JDBC engine to use.</p> </li> <li> <p> <code>CONFIG_FILES</code> - (Reserved for future use).</p> </li> <li> <p> <code>INSTANCE_ID</code> - The instance ID to use.</p> </li> <li> <p> <code>JDBC_CONNECTION_URL</code> - The URL for the JDBC connection.</p> </li> <li> <p> <code>JDBC_ENFORCE_SSL</code> - A Boolean string (true, false) specifying whether SSL with hostname matching will be enforced for the JDBC connection on the client. The default is false.</p> </li> </ul>', 'ConnectionInput$ConnectionProperties' => '<p>These key-value pairs define parameters for the connection.</p>', ], ], 'ConnectionPropertyKey' => [ 'base' => NULL, 'refs' => [ 'ConnectionProperties$key' => NULL, ], ], 'ConnectionType' => [ 'base' => NULL, 'refs' => [ 'Connection$ConnectionType' => '<p>The type of the connection. Currently, only JDBC is supported; SFTP is not supported.</p>', 'ConnectionInput$ConnectionType' => '<p>The type of the connection. Currently, only JDBC is supported; SFTP is not supported.</p>', 'GetConnectionsFilter$ConnectionType' => '<p>The type of connections to return. Currently, only JDBC is supported; SFTP is not supported.</p>', ], ], 'ConnectionsList' => [ 'base' => '<p>Specifies the connections used by a job.</p>', 'refs' => [ 'CreateJobRequest$Connections' => '<p>The connections used for this job.</p>', 'Job$Connections' => '<p>The connections used for this job.</p>', 'JobUpdate$Connections' => '<p>The connections used for this job.</p>', ], ], 'Crawler' => [ 'base' => '<p>Specifies a crawler program that examines a data source and uses classifiers to try to determine its schema. If successful, the crawler records metadata concerning the data source in the AWS Glue Data Catalog.</p>', 'refs' => [ 'CrawlerList$member' => NULL, 'GetCrawlerResponse$Crawler' => '<p>The metadata for the specified crawler.</p>', ], ], 'CrawlerConfiguration' => [ 'base' => NULL, 'refs' => [ 'Crawler$Configuration' => '<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a Crawler\'s behavior.</p> <p>You can use this field to force partitions to inherit metadata such as classification, input format, output format, serde information, and schema from their parent table, rather than detect this information separately for each partition. Use the following JSON string to specify that behavior:</p> <p>Example: <code>\'{ "Version": 1.0, "CrawlerOutput": { "Partitions": { "AddOrUpdateBehavior": "InheritFromTable" } } }\'</code> </p>', 'CreateCrawlerRequest$Configuration' => '<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a Crawler\'s behavior.</p> <p>You can use this field to force partitions to inherit metadata such as classification, input format, output format, serde information, and schema from their parent table, rather than detect this information separately for each partition. Use the following JSON string to specify that behavior:</p> <p>Example: <code>\'{ "Version": 1.0, "CrawlerOutput": { "Partitions": { "AddOrUpdateBehavior": "InheritFromTable" } } }\'</code> </p>', 'UpdateCrawlerRequest$Configuration' => '<p>Crawler configuration information. This versioned JSON string allows users to specify aspects of a Crawler\'s behavior.</p> <p>You can use this field to force partitions to inherit metadata such as classification, input format, output format, serde information, and schema from their parent table, rather than detect this information separately for each partition. Use the following JSON string to specify that behavior:</p> <p>Example: <code>\'{ "Version": 1.0, "CrawlerOutput": { "Partitions": { "AddOrUpdateBehavior": "InheritFromTable" } } }\'</code> </p>', ], ], 'CrawlerList' => [ 'base' => NULL, 'refs' => [ 'GetCrawlersResponse$Crawlers' => '<p>A list of crawler metadata.</p>', ], ], 'CrawlerMetrics' => [ 'base' => '<p>Metrics for a specified crawler.</p>', 'refs' => [ 'CrawlerMetricsList$member' => NULL, ], ], 'CrawlerMetricsList' => [ 'base' => NULL, 'refs' => [ 'GetCrawlerMetricsResponse$CrawlerMetricsList' => '<p>A list of metrics for the specified crawler.</p>', ], ], 'CrawlerNameList' => [ 'base' => NULL, 'refs' => [ 'GetCrawlerMetricsRequest$CrawlerNameList' => '<p>A list of the names of crawlers about which to retrieve metrics.</p>', ], ], 'CrawlerNotRunningException' => [ 'base' => '<p>The specified crawler is not running.</p>', 'refs' => [], ], 'CrawlerRunningException' => [ 'base' => '<p>The operation cannot be performed because the crawler is already running.</p>', 'refs' => [], ], 'CrawlerSecurityConfiguration' => [ 'base' => NULL, 'refs' => [ 'Crawler$CrawlerSecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used by this Crawler.</p>', 'CreateCrawlerRequest$CrawlerSecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used by this Crawler.</p>', 'UpdateCrawlerRequest$CrawlerSecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used by this Crawler.</p>', ], ], 'CrawlerState' => [ 'base' => NULL, 'refs' => [ 'Crawler$State' => '<p>Indicates whether the crawler is running, or whether a run is pending.</p>', ], ], 'CrawlerStoppingException' => [ 'base' => '<p>The specified crawler is stopping.</p>', 'refs' => [], ], 'CrawlerTargets' => [ 'base' => '<p>Specifies data stores to crawl.</p>', 'refs' => [ 'Crawler$Targets' => '<p>A collection of targets to crawl.</p>', 'CreateCrawlerRequest$Targets' => '<p>A list of collection of targets to crawl.</p>', 'UpdateCrawlerRequest$Targets' => '<p>A list of targets to crawl.</p>', ], ], 'CreateClassifierRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateClassifierResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateConnectionRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateConnectionResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateCrawlerRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateCrawlerResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateDatabaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateDatabaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateDevEndpointRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateDevEndpointResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateGrokClassifierRequest' => [ 'base' => '<p>Specifies a <code>grok</code> classifier for <code>CreateClassifier</code> to create.</p>', 'refs' => [ 'CreateClassifierRequest$GrokClassifier' => '<p>A <code>GrokClassifier</code> object specifying the classifier to create.</p>', ], ], 'CreateJobRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateJobResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateJsonClassifierRequest' => [ 'base' => '<p>Specifies a JSON classifier for <code>CreateClassifier</code> to create.</p>', 'refs' => [ 'CreateClassifierRequest$JsonClassifier' => '<p>A <code>JsonClassifier</code> object specifying the classifier to create.</p>', ], ], 'CreatePartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreatePartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateScriptRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateScriptResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateSecurityConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateSecurityConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateTableRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateTableResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateTriggerRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateTriggerResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateUserDefinedFunctionRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateUserDefinedFunctionResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateXMLClassifierRequest' => [ 'base' => '<p>Specifies an XML classifier for <code>CreateClassifier</code> to create.</p>', 'refs' => [ 'CreateClassifierRequest$XMLClassifier' => '<p>An <code>XMLClassifier</code> object specifying the classifier to create.</p>', ], ], 'CronExpression' => [ 'base' => NULL, 'refs' => [ 'CreateCrawlerRequest$Schedule' => '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>', 'Schedule$ScheduleExpression' => '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>', 'UpdateCrawlerRequest$Schedule' => '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>', 'UpdateCrawlerScheduleRequest$Schedule' => '<p>The updated <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>', ], ], 'CustomPatterns' => [ 'base' => NULL, 'refs' => [ 'CreateGrokClassifierRequest$CustomPatterns' => '<p>Optional custom grok patterns used by this classifier.</p>', 'GrokClassifier$CustomPatterns' => '<p>Optional custom grok patterns defined by this classifier. For more information, see custom patterns in <a href="http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html">Writing Custom Classifers</a>.</p>', 'UpdateGrokClassifierRequest$CustomPatterns' => '<p>Optional custom grok patterns used by this classifier.</p>', ], ], 'DagEdges' => [ 'base' => NULL, 'refs' => [ 'CreateScriptRequest$DagEdges' => '<p>A list of the edges in the DAG.</p>', 'GetDataflowGraphResponse$DagEdges' => '<p>A list of the edges in the resulting DAG.</p>', ], ], 'DagNodes' => [ 'base' => NULL, 'refs' => [ 'CreateScriptRequest$DagNodes' => '<p>A list of the nodes in the DAG.</p>', 'GetDataflowGraphResponse$DagNodes' => '<p>A list of the nodes in the resulting DAG.</p>', ], ], 'DataCatalogEncryptionSettings' => [ 'base' => '<p>Contains configuration information for maintaining Data Catalog security.</p>', 'refs' => [ 'PutDataCatalogEncryptionSettingsRequest$DataCatalogEncryptionSettings' => '<p>The security configuration to set.</p>', ], ], 'Database' => [ 'base' => '<p>The <code>Database</code> object represents a logical grouping of tables that may reside in a Hive metastore or an RDBMS.</p>', 'refs' => [ 'DatabaseList$member' => NULL, 'GetDatabaseResponse$Database' => '<p>The definition of the specified database in the catalog.</p>', ], ], 'DatabaseInput' => [ 'base' => '<p>The structure used to create or update a database.</p>', 'refs' => [ 'CreateDatabaseRequest$DatabaseInput' => '<p>A <code>DatabaseInput</code> object defining the metadata database to create in the catalog.</p>', 'UpdateDatabaseRequest$DatabaseInput' => '<p>A <code>DatabaseInput</code> object specifying the new definition of the metadata database in the catalog.</p>', ], ], 'DatabaseList' => [ 'base' => NULL, 'refs' => [ 'GetDatabasesResponse$DatabaseList' => '<p>A list of <code>Database</code> objects from the specified catalog.</p>', ], ], 'DatabaseName' => [ 'base' => NULL, 'refs' => [ 'Crawler$DatabaseName' => '<p>The database where metadata is written by this crawler.</p>', 'CreateCrawlerRequest$DatabaseName' => '<p>The AWS Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>', 'UpdateCrawlerRequest$DatabaseName' => '<p>The AWS Glue database where results are stored, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>', ], ], 'DeleteBehavior' => [ 'base' => NULL, 'refs' => [ 'SchemaChangePolicy$DeleteBehavior' => '<p>The deletion behavior when the crawler finds a deleted object.</p>', ], ], 'DeleteClassifierRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteClassifierResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteConnectionNameList' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteConnectionRequest$ConnectionNameList' => '<p>A list of names of the connections to delete.</p>', ], ], 'DeleteConnectionRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteConnectionResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteCrawlerRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteCrawlerResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteDatabaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteDatabaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteDevEndpointRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteDevEndpointResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteJobRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteJobResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeletePartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeletePartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteSecurityConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteSecurityConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteTableRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteTableResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteTableVersionRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteTableVersionResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteTriggerRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteTriggerResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteUserDefinedFunctionRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteUserDefinedFunctionResponse' => [ 'base' => NULL, 'refs' => [], ], 'DescriptionString' => [ 'base' => NULL, 'refs' => [ 'Connection$Description' => '<p>Description of the connection.</p>', 'ConnectionInput$Description' => '<p>Description of the connection.</p>', 'Crawler$Description' => '<p>A description of the crawler.</p>', 'CreateCrawlerRequest$Description' => '<p>A description of the new crawler.</p>', 'CreateJobRequest$Description' => '<p>Description of the job being defined.</p>', 'CreateTriggerRequest$Description' => '<p>A description of the new trigger.</p>', 'Database$Description' => '<p>Description of the database.</p>', 'DatabaseInput$Description' => '<p>Description of the database</p>', 'ErrorDetail$ErrorMessage' => '<p>A message describing the error.</p>', 'Job$Description' => '<p>Description of the job being defined.</p>', 'JobUpdate$Description' => '<p>Description of the job being defined.</p>', 'LastCrawlInfo$ErrorMessage' => '<p>If an error occurred, the error information about the last crawl.</p>', 'Table$Description' => '<p>Description of the table.</p>', 'TableInput$Description' => '<p>Description of the table.</p>', 'Trigger$Description' => '<p>A description of this trigger.</p>', 'TriggerUpdate$Description' => '<p>A description of this trigger.</p>', ], ], 'DescriptionStringRemovable' => [ 'base' => NULL, 'refs' => [ 'UpdateCrawlerRequest$Description' => '<p>A description of the new crawler.</p>', ], ], 'DevEndpoint' => [ 'base' => '<p>A development endpoint where a developer can remotely debug ETL scripts.</p>', 'refs' => [ 'DevEndpointList$member' => NULL, 'GetDevEndpointResponse$DevEndpoint' => '<p>A DevEndpoint definition.</p>', ], ], 'DevEndpointCustomLibraries' => [ 'base' => '<p>Custom libraries to be loaded into a DevEndpoint.</p>', 'refs' => [ 'UpdateDevEndpointRequest$CustomLibraries' => '<p>Custom Python or Java libraries to be loaded in the DevEndpoint.</p>', ], ], 'DevEndpointList' => [ 'base' => NULL, 'refs' => [ 'GetDevEndpointsResponse$DevEndpoints' => '<p>A list of DevEndpoint definitions.</p>', ], ], 'DynamoDBTarget' => [ 'base' => '<p>Specifies a DynamoDB table to crawl.</p>', 'refs' => [ 'DynamoDBTargetList$member' => NULL, ], ], 'DynamoDBTargetList' => [ 'base' => NULL, 'refs' => [ 'CrawlerTargets$DynamoDBTargets' => '<p>Specifies DynamoDB targets.</p>', ], ], 'EncryptionAtRest' => [ 'base' => '<p>Specifies encryption-at-rest configuration for the Data Catalog.</p>', 'refs' => [ 'DataCatalogEncryptionSettings$EncryptionAtRest' => '<p>Specifies encryption-at-rest configuration for the Data Catalog.</p>', ], ], 'EncryptionConfiguration' => [ 'base' => '<p>Specifies an encryption configuration.</p>', 'refs' => [ 'CreateSecurityConfigurationRequest$EncryptionConfiguration' => '<p>The encryption configuration for the new security configuration.</p>', 'SecurityConfiguration$EncryptionConfiguration' => '<p>The encryption configuration associated with this security configuration.</p>', ], ], 'EntityNotFoundException' => [ 'base' => '<p>A specified entity does not exist</p>', 'refs' => [], ], 'ErrorByName' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteConnectionResponse$Errors' => '<p>A map of the names of connections that were not successfully deleted to error details.</p>', ], ], 'ErrorDetail' => [ 'base' => '<p>Contains details about an error.</p>', 'refs' => [ 'BatchStopJobRunError$ErrorDetail' => '<p>Specifies details about the error that was encountered.</p>', 'ErrorByName$value' => NULL, 'PartitionError$ErrorDetail' => '<p>Details about the partition error.</p>', 'TableError$ErrorDetail' => '<p>Detail about the error.</p>', 'TableVersionError$ErrorDetail' => '<p>Detail about the error.</p>', ], ], 'ErrorString' => [ 'base' => NULL, 'refs' => [ 'JobRun$ErrorMessage' => '<p>An error message associated with this job run.</p>', ], ], 'ExecutionProperty' => [ 'base' => '<p>An execution property of a job.</p>', 'refs' => [ 'CreateJobRequest$ExecutionProperty' => '<p>An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.</p>', 'Job$ExecutionProperty' => '<p>An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.</p>', 'JobUpdate$ExecutionProperty' => '<p>An ExecutionProperty specifying the maximum number of concurrent runs allowed for this job.</p>', ], ], 'ExecutionTime' => [ 'base' => NULL, 'refs' => [ 'JobRun$ExecutionTime' => '<p>The amount of time (in seconds) that the job run consumed resources.</p>', ], ], 'FieldType' => [ 'base' => NULL, 'refs' => [ 'MappingEntry$SourceType' => '<p>The source type.</p>', 'MappingEntry$TargetType' => '<p>The target type.</p>', ], ], 'FilterString' => [ 'base' => NULL, 'refs' => [ 'GetTablesRequest$Expression' => '<p>A regular expression pattern. If present, only those tables whose names match the pattern are returned.</p>', ], ], 'FormatString' => [ 'base' => NULL, 'refs' => [ 'StorageDescriptor$InputFormat' => '<p>The input format: <code>SequenceFileInputFormat</code> (binary), or <code>TextInputFormat</code>, or a custom format.</p>', 'StorageDescriptor$OutputFormat' => '<p>The output format: <code>SequenceFileOutputFormat</code> (binary), or <code>IgnoreKeyTextOutputFormat</code>, or a custom format.</p>', ], ], 'GenericMap' => [ 'base' => NULL, 'refs' => [ 'Action$Arguments' => '<p>Arguments to be passed to the job run.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>', 'CreateJobRequest$DefaultArguments' => '<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>', 'Job$DefaultArguments' => '<p>The default arguments for this job, specified as name-value pairs.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>', 'JobRun$Arguments' => '<p>The job arguments associated with this run. These override equivalent default arguments set for the job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>', 'JobUpdate$DefaultArguments' => '<p>The default arguments for this job.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>', 'StartJobRunRequest$Arguments' => '<p>The job arguments specifically for this run. They override the equivalent default arguments set for in the job definition itself.</p> <p>You can specify arguments here that your own job-execution script consumes, as well as arguments that AWS Glue itself consumes.</p> <p>For information about how to specify and consume your own Job arguments, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-python-calling.html">Calling AWS Glue APIs in Python</a> topic in the developer guide.</p> <p>For information about the key-value pairs that AWS Glue consumes to set up your job, see the <a href="http://docs.aws.amazon.com/glue/latest/dg/aws-glue-programming-etl-glue-arguments.html">Special Parameters Used by AWS Glue</a> topic in the developer guide.</p>', ], ], 'GenericString' => [ 'base' => NULL, 'refs' => [ 'CreateDevEndpointRequest$EndpointName' => '<p>The name to be assigned to the new DevEndpoint.</p>', 'CreateDevEndpointRequest$SubnetId' => '<p>The subnet ID for the new DevEndpoint to use.</p>', 'CreateDevEndpointRequest$PublicKey' => '<p>The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility, as the recommended attribute to use is public keys.</p>', 'CreateDevEndpointRequest$ExtraPythonLibsS3Path' => '<p>Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p> <p>Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>', 'CreateDevEndpointRequest$ExtraJarsS3Path' => '<p>Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.</p>', 'CreateDevEndpointResponse$EndpointName' => '<p>The name assigned to the new DevEndpoint.</p>', 'CreateDevEndpointResponse$Status' => '<p>The current status of the new DevEndpoint.</p>', 'CreateDevEndpointResponse$SubnetId' => '<p>The subnet ID assigned to the new DevEndpoint.</p>', 'CreateDevEndpointResponse$YarnEndpointAddress' => '<p>The address of the YARN endpoint used by this DevEndpoint.</p>', 'CreateDevEndpointResponse$AvailabilityZone' => '<p>The AWS availability zone where this DevEndpoint is located.</p>', 'CreateDevEndpointResponse$VpcId' => '<p>The ID of the VPC used by this DevEndpoint.</p>', 'CreateDevEndpointResponse$ExtraPythonLibsS3Path' => '<p>Path(s) to one or more Python libraries in an S3 bucket that will be loaded in your DevEndpoint.</p>', 'CreateDevEndpointResponse$ExtraJarsS3Path' => '<p>Path to one or more Java Jars in an S3 bucket that will be loaded in your DevEndpoint.</p>', 'CreateDevEndpointResponse$FailureReason' => '<p>The reason for a current failure in this DevEndpoint.</p>', 'CreateTriggerRequest$Schedule' => '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p> <p>This field is required when the trigger type is SCHEDULED.</p>', 'DeleteDevEndpointRequest$EndpointName' => '<p>The name of the DevEndpoint.</p>', 'DevEndpoint$EndpointName' => '<p>The name of the DevEndpoint.</p>', 'DevEndpoint$SubnetId' => '<p>The subnet ID for this DevEndpoint.</p>', 'DevEndpoint$YarnEndpointAddress' => '<p>The YARN endpoint address used by this DevEndpoint.</p>', 'DevEndpoint$PrivateAddress' => '<p>A private DNS to access the DevEndpoint within a VPC, if the DevEndpoint is created within one.</p>', 'DevEndpoint$PublicAddress' => '<p>The public VPC address used by this DevEndpoint.</p>', 'DevEndpoint$Status' => '<p>The current status of this DevEndpoint.</p>', 'DevEndpoint$AvailabilityZone' => '<p>The AWS availability zone where this DevEndpoint is located.</p>', 'DevEndpoint$VpcId' => '<p>The ID of the virtual private cloud (VPC) used by this DevEndpoint.</p>', 'DevEndpoint$ExtraPythonLibsS3Path' => '<p>Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p> <p>Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>', 'DevEndpoint$ExtraJarsS3Path' => '<p>Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.</p> <p>Please note that only pure Java/Scala libraries can currently be used on a DevEndpoint.</p>', 'DevEndpoint$FailureReason' => '<p>The reason for a current failure in this DevEndpoint.</p>', 'DevEndpoint$LastUpdateStatus' => '<p>The status of the last update.</p>', 'DevEndpoint$PublicKey' => '<p>The public key to be used by this DevEndpoint for authentication. This attribute is provided for backward compatibility, as the recommended attribute to use is public keys.</p>', 'DevEndpointCustomLibraries$ExtraPythonLibsS3Path' => '<p>Path(s) to one or more Python libraries in an S3 bucket that should be loaded in your DevEndpoint. Multiple values must be complete paths separated by a comma.</p> <p>Please note that only pure Python libraries can currently be used on a DevEndpoint. Libraries that rely on C extensions, such as the <a href="http://pandas.pydata.org/">pandas</a> Python data analysis library, are not yet supported.</p>', 'DevEndpointCustomLibraries$ExtraJarsS3Path' => '<p>Path to one or more Java Jars in an S3 bucket that should be loaded in your DevEndpoint.</p> <p>Please note that only pure Java/Scala libraries can currently be used on a DevEndpoint.</p>', 'GenericMap$key' => NULL, 'GenericMap$value' => NULL, 'GetDevEndpointRequest$EndpointName' => '<p>Name of the DevEndpoint for which to retrieve information.</p>', 'GetDevEndpointsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetDevEndpointsResponse$NextToken' => '<p>A continuation token, if not all DevEndpoint definitions have yet been returned.</p>', 'GetJobRunsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetJobRunsResponse$NextToken' => '<p>A continuation token, if not all reequested job runs have been returned.</p>', 'GetJobsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetJobsResponse$NextToken' => '<p>A continuation token, if not all job definitions have yet been returned.</p>', 'GetSecurityConfigurationsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetSecurityConfigurationsResponse$NextToken' => '<p>A continuation token, if there are more security configurations to return.</p>', 'GetTriggersRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetTriggersResponse$NextToken' => '<p>A continuation token, if not all the requested triggers have yet been returned.</p>', 'JobCommand$Name' => '<p>The name of the job command: this must be <code>glueetl</code>.</p>', 'JobRun$LogGroupName' => '<p>The name of the log group for secure logging, that can be server-side encrypted in CloudWatch using KMS. This name can be <code>/aws-glue/jobs/</code>, in which case the default encryption is <code>NONE</code>. If you add a role name and SecurityConfiguration name (in other words, <code>/aws-glue/jobs-yourRoleName-yourSecurityConfigurationName/</code>), then that security configuration will be used to encrypt the log group.</p>', 'PublicKeysList$member' => NULL, 'StringList$member' => NULL, 'Trigger$Schedule' => '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>', 'TriggerUpdate$Schedule' => '<p>A <code>cron</code> expression used to specify the schedule (see <a href="http://docs.aws.amazon.com/glue/latest/dg/monitor-data-warehouse-schedule.html">Time-Based Schedules for Jobs and Crawlers</a>. For example, to run something every day at 12:15 UTC, you would specify: <code>cron(15 12 * * ? *)</code>.</p>', 'UpdateDevEndpointRequest$EndpointName' => '<p>The name of the DevEndpoint to be updated.</p>', 'UpdateDevEndpointRequest$PublicKey' => '<p>The public key for the DevEndpoint to use.</p>', ], ], 'GetCatalogImportStatusRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCatalogImportStatusResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetClassifierRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetClassifierResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetClassifiersRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetClassifiersResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetConnectionRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetConnectionResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetConnectionsFilter' => [ 'base' => '<p>Filters the connection definitions returned by the <code>GetConnections</code> API.</p>', 'refs' => [ 'GetConnectionsRequest$Filter' => '<p>A filter that controls which connections will be returned.</p>', ], ], 'GetConnectionsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetConnectionsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetCrawlerMetricsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCrawlerMetricsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetCrawlerRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCrawlerResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetCrawlersRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCrawlersResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetDatabaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetDatabaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetDatabasesRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetDatabasesResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetDataflowGraphRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetDataflowGraphResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetDevEndpointRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetDevEndpointResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetDevEndpointsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetDevEndpointsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetJobRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetJobResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetJobRunRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetJobRunResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetJobRunsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetJobRunsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetJobsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetJobsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetMappingRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetMappingResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetPartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetPartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetPartitionsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetPartitionsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetPlanRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetPlanResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetSecurityConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetSecurityConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetSecurityConfigurationsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetSecurityConfigurationsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTableRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTableResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTableVersionRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTableVersionResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTableVersionsList' => [ 'base' => NULL, 'refs' => [ 'GetTableVersionsResponse$TableVersions' => '<p>A list of strings identifying available versions of the specified table.</p>', ], ], 'GetTableVersionsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTableVersionsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTablesRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTablesResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTriggerRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTriggerResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTriggersRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTriggersResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetUserDefinedFunctionRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetUserDefinedFunctionResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetUserDefinedFunctionsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetUserDefinedFunctionsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GlueEncryptionException' => [ 'base' => '<p>An encryption operation failed.</p>', 'refs' => [], ], 'GrokClassifier' => [ 'base' => '<p>A classifier that uses <code>grok</code> patterns.</p>', 'refs' => [ 'Classifier$GrokClassifier' => '<p>A <code>GrokClassifier</code> object.</p>', ], ], 'GrokPattern' => [ 'base' => NULL, 'refs' => [ 'CreateGrokClassifierRequest$GrokPattern' => '<p>The grok pattern used by this classifier.</p>', 'GrokClassifier$GrokPattern' => '<p>The grok pattern applied to a data store by this classifier. For more information, see built-in patterns in <a href="http://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html">Writing Custom Classifers</a>.</p>', 'UpdateGrokClassifierRequest$GrokPattern' => '<p>The grok pattern used by this classifier.</p>', ], ], 'IdString' => [ 'base' => NULL, 'refs' => [ 'BatchStopJobRunError$JobRunId' => '<p>The JobRunId of the job run in question.</p>', 'BatchStopJobRunJobRunIdList$member' => NULL, 'BatchStopJobRunSuccessfulSubmission$JobRunId' => '<p>The JobRunId of the job run that was stopped.</p>', 'GetJobRunRequest$RunId' => '<p>The ID of the job run.</p>', 'JobRun$Id' => '<p>The ID of this job run.</p>', 'JobRun$PreviousRunId' => '<p>The ID of the previous run of this job. For example, the JobRunId specified in the StartJobRun action.</p>', 'Predecessor$RunId' => '<p>The job-run ID of the predecessor job run.</p>', 'StartJobRunRequest$JobRunId' => '<p>The ID of a previous JobRun to retry.</p>', 'StartJobRunResponse$JobRunId' => '<p>The ID assigned to this job run.</p>', 'Trigger$Id' => '<p>Reserved for future use.</p>', ], ], 'IdempotentParameterMismatchException' => [ 'base' => '<p>The same unique identifier was associated with two different records.</p>', 'refs' => [], ], 'ImportCatalogToGlueRequest' => [ 'base' => NULL, 'refs' => [], ], 'ImportCatalogToGlueResponse' => [ 'base' => NULL, 'refs' => [], ], 'Integer' => [ 'base' => NULL, 'refs' => [ 'CodeGenNode$LineNumber' => '<p>The line number of the node.</p>', 'StorageDescriptor$NumberOfBuckets' => '<p>Must be specified if the table contains any dimension columns.</p>', ], ], 'IntegerFlag' => [ 'base' => NULL, 'refs' => [ 'Order$SortOrder' => '<p>Indicates that the column is sorted in ascending order (<code>== 1</code>), or in descending order (<code>==0</code>).</p>', ], ], 'IntegerValue' => [ 'base' => NULL, 'refs' => [ 'CreateDevEndpointRequest$NumberOfNodes' => '<p>The number of AWS Glue Data Processing Units (DPUs) to allocate to this DevEndpoint.</p>', 'CreateDevEndpointResponse$ZeppelinRemoteSparkInterpreterPort' => '<p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>', 'CreateDevEndpointResponse$NumberOfNodes' => '<p>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>', 'CreateJobRequest$AllocatedCapacity' => '<p>The number of AWS Glue data processing units (DPUs) to allocate to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.</p>', 'DevEndpoint$ZeppelinRemoteSparkInterpreterPort' => '<p>The Apache Zeppelin port for the remote Apache Spark interpreter.</p>', 'DevEndpoint$NumberOfNodes' => '<p>The number of AWS Glue Data Processing Units (DPUs) allocated to this DevEndpoint.</p>', 'Job$AllocatedCapacity' => '<p>The number of AWS Glue data processing units (DPUs) allocated to runs of this job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.</p>', 'JobBookmarkEntry$Version' => '<p>Version of the job.</p>', 'JobBookmarkEntry$Run' => '<p>The run ID number.</p>', 'JobBookmarkEntry$Attempt' => '<p>The attempt ID number.</p>', 'JobRun$AllocatedCapacity' => '<p>The number of AWS Glue data processing units (DPUs) allocated to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.</p>', 'JobUpdate$AllocatedCapacity' => '<p>The number of AWS Glue data processing units (DPUs) to allocate to this Job. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.</p>', 'StartJobRunRequest$AllocatedCapacity' => '<p>The number of AWS Glue data processing units (DPUs) to allocate to this JobRun. From 2 to 100 DPUs can be allocated; the default is 10. A DPU is a relative measure of processing power that consists of 4 vCPUs of compute capacity and 16 GB of memory. For more information, see the <a href="https://aws.amazon.com/glue/pricing/">AWS Glue pricing page</a>.</p>', ], ], 'InternalServiceException' => [ 'base' => '<p>An internal service error occurred.</p>', 'refs' => [], ], 'InvalidInputException' => [ 'base' => '<p>The input provided was not valid.</p>', 'refs' => [], ], 'JdbcTarget' => [ 'base' => '<p>Specifies a JDBC data store to crawl.</p>', 'refs' => [ 'JdbcTargetList$member' => NULL, ], ], 'JdbcTargetList' => [ 'base' => NULL, 'refs' => [ 'CrawlerTargets$JdbcTargets' => '<p>Specifies JDBC targets.</p>', ], ], 'Job' => [ 'base' => '<p>Specifies a job definition.</p>', 'refs' => [ 'GetJobResponse$Job' => '<p>The requested job definition.</p>', 'JobList$member' => NULL, ], ], 'JobBookmarkEntry' => [ 'base' => '<p>Defines a point which a job can resume processing.</p>', 'refs' => [ 'ResetJobBookmarkResponse$JobBookmarkEntry' => '<p>The reset bookmark entry.</p>', ], ], 'JobBookmarksEncryption' => [ 'base' => '<p>Specifies how Job bookmark data should be encrypted.</p>', 'refs' => [ 'EncryptionConfiguration$JobBookmarksEncryption' => '<p>The encryption configuration for Job Bookmarks.</p>', ], ], 'JobBookmarksEncryptionMode' => [ 'base' => NULL, 'refs' => [ 'JobBookmarksEncryption$JobBookmarksEncryptionMode' => '<p>The encryption mode to use for Job bookmarks data.</p>', ], ], 'JobCommand' => [ 'base' => '<p>Specifies code executed when a job is run.</p>', 'refs' => [ 'CreateJobRequest$Command' => '<p>The JobCommand that executes this job.</p>', 'Job$Command' => '<p>The JobCommand that executes this job.</p>', 'JobUpdate$Command' => '<p>The JobCommand that executes this job (required).</p>', ], ], 'JobList' => [ 'base' => NULL, 'refs' => [ 'GetJobsResponse$Jobs' => '<p>A list of job definitions.</p>', ], ], 'JobName' => [ 'base' => NULL, 'refs' => [ 'JobBookmarkEntry$JobName' => '<p>Name of the job in question.</p>', 'ResetJobBookmarkRequest$JobName' => '<p>The name of the job in question.</p>', ], ], 'JobRun' => [ 'base' => '<p>Contains information about a job run.</p>', 'refs' => [ 'GetJobRunResponse$JobRun' => '<p>The requested job-run metadata.</p>', 'JobRunList$member' => NULL, ], ], 'JobRunList' => [ 'base' => NULL, 'refs' => [ 'GetJobRunsResponse$JobRuns' => '<p>A list of job-run metatdata objects.</p>', ], ], 'JobRunState' => [ 'base' => NULL, 'refs' => [ 'Condition$State' => '<p>The condition state. Currently, the values supported are SUCCEEDED, STOPPED, TIMEOUT and FAILED.</p>', 'JobRun$JobRunState' => '<p>The current state of the job run.</p>', ], ], 'JobUpdate' => [ 'base' => '<p>Specifies information used to update an existing job definition. Note that the previous job definition will be completely overwritten by this information.</p>', 'refs' => [ 'UpdateJobRequest$JobUpdate' => '<p>Specifies the values with which to update the job definition.</p>', ], ], 'JsonClassifier' => [ 'base' => '<p>A classifier for <code>JSON</code> content.</p>', 'refs' => [ 'Classifier$JsonClassifier' => '<p>A <code>JsonClassifier</code> object.</p>', ], ], 'JsonPath' => [ 'base' => NULL, 'refs' => [ 'CreateJsonClassifierRequest$JsonPath' => '<p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.</p>', 'JsonClassifier$JsonPath' => '<p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.</p>', 'UpdateJsonClassifierRequest$JsonPath' => '<p>A <code>JsonPath</code> string defining the JSON data for the classifier to classify. AWS Glue supports a subset of JsonPath, as described in <a href="https://docs.aws.amazon.com/glue/latest/dg/custom-classifier.html#custom-classifier-json">Writing JsonPath Custom Classifiers</a>.</p>', ], ], 'JsonValue' => [ 'base' => NULL, 'refs' => [ 'JobBookmarkEntry$JobBookmark' => '<p>The bookmark itself.</p>', ], ], 'KeyString' => [ 'base' => NULL, 'refs' => [ 'ParametersMap$key' => NULL, ], ], 'KmsKeyArn' => [ 'base' => NULL, 'refs' => [ 'CloudWatchEncryption$KmsKeyArn' => '<p>The AWS ARN of the KMS key to be used to encrypt the data.</p>', 'JobBookmarksEncryption$KmsKeyArn' => '<p>The AWS ARN of the KMS key to be used to encrypt the data.</p>', 'S3Encryption$KmsKeyArn' => '<p>The AWS ARN of the KMS key to be used to encrypt the data.</p>', ], ], 'Language' => [ 'base' => NULL, 'refs' => [ 'CreateScriptRequest$Language' => '<p>The programming language of the resulting code from the DAG.</p>', 'GetPlanRequest$Language' => '<p>The programming language of the code to perform the mapping.</p>', ], ], 'LastCrawlInfo' => [ 'base' => '<p>Status and error information about the most recent crawl.</p>', 'refs' => [ 'Crawler$LastCrawl' => '<p>The status of the last crawl, and potentially error information if an error occurred.</p>', ], ], 'LastCrawlStatus' => [ 'base' => NULL, 'refs' => [ 'LastCrawlInfo$Status' => '<p>Status of the last crawl.</p>', ], ], 'Location' => [ 'base' => '<p>The location of resources.</p>', 'refs' => [ 'GetMappingRequest$Location' => '<p>Parameters for the mapping.</p>', 'GetPlanRequest$Location' => '<p>Parameters for the mapping.</p>', ], ], 'LocationMap' => [ 'base' => NULL, 'refs' => [ 'SkewedInfo$SkewedColumnValueLocationMaps' => '<p>A mapping of skewed values to the columns that contain them.</p>', ], ], 'LocationString' => [ 'base' => NULL, 'refs' => [ 'StorageDescriptor$Location' => '<p>The physical location of the table. By default this takes the form of the warehouse location, followed by the database location in the warehouse, followed by the table name.</p>', ], ], 'LogGroup' => [ 'base' => NULL, 'refs' => [ 'LastCrawlInfo$LogGroup' => '<p>The log group for the last crawl.</p>', ], ], 'LogStream' => [ 'base' => NULL, 'refs' => [ 'LastCrawlInfo$LogStream' => '<p>The log stream for the last crawl.</p>', ], ], 'Logical' => [ 'base' => NULL, 'refs' => [ 'Predicate$Logical' => '<p>Optional field if only one condition is listed. If multiple conditions are listed, then this field is required.</p>', ], ], 'LogicalOperator' => [ 'base' => NULL, 'refs' => [ 'Condition$LogicalOperator' => '<p>A logical operator.</p>', ], ], 'MappingEntry' => [ 'base' => '<p>Defines a mapping.</p>', 'refs' => [ 'MappingList$member' => NULL, ], ], 'MappingList' => [ 'base' => NULL, 'refs' => [ 'GetMappingResponse$Mapping' => '<p>A list of mappings to the specified targets.</p>', 'GetPlanRequest$Mapping' => '<p>The list of mappings from a source table to target tables.</p>', ], ], 'MatchCriteria' => [ 'base' => NULL, 'refs' => [ 'Connection$MatchCriteria' => '<p>A list of criteria that can be used in selecting this connection.</p>', 'ConnectionInput$MatchCriteria' => '<p>A list of criteria that can be used in selecting this connection.</p>', 'GetConnectionsFilter$MatchCriteria' => '<p>A criteria string that must match the criteria recorded in the connection definition for that connection definition to be returned.</p>', ], ], 'MaxConcurrentRuns' => [ 'base' => NULL, 'refs' => [ 'ExecutionProperty$MaxConcurrentRuns' => '<p>The maximum number of concurrent runs allowed for the job. The default is 1. An error is returned when this threshold is reached. The maximum value you can specify is controlled by a service limit.</p>', ], ], 'MaxRetries' => [ 'base' => NULL, 'refs' => [ 'CreateJobRequest$MaxRetries' => '<p>The maximum number of times to retry this job if it fails.</p>', 'Job$MaxRetries' => '<p>The maximum number of times to retry this job after a JobRun fails.</p>', 'JobUpdate$MaxRetries' => '<p>The maximum number of times to retry this job if it fails.</p>', ], ], 'MessagePrefix' => [ 'base' => NULL, 'refs' => [ 'LastCrawlInfo$MessagePrefix' => '<p>The prefix for a message about this crawl.</p>', ], ], 'MessageString' => [ 'base' => NULL, 'refs' => [ 'AccessDeniedException$Message' => '<p>A message describing the problem.</p>', 'AlreadyExistsException$Message' => '<p>A message describing the problem.</p>', 'ConcurrentModificationException$Message' => '<p>A message describing the problem.</p>', 'ConcurrentRunsExceededException$Message' => '<p>A message describing the problem.</p>', 'CrawlerNotRunningException$Message' => '<p>A message describing the problem.</p>', 'CrawlerRunningException$Message' => '<p>A message describing the problem.</p>', 'CrawlerStoppingException$Message' => '<p>A message describing the problem.</p>', 'EntityNotFoundException$Message' => '<p>A message describing the problem.</p>', 'GlueEncryptionException$Message' => '<p>A message describing the problem.</p>', 'IdempotentParameterMismatchException$Message' => '<p>A message describing the problem.</p>', 'InternalServiceException$Message' => '<p>A message describing the problem.</p>', 'InvalidInputException$Message' => '<p>A message describing the problem.</p>', 'NoScheduleException$Message' => '<p>A message describing the problem.</p>', 'OperationTimeoutException$Message' => '<p>A message describing the problem.</p>', 'ResourceNumberLimitExceededException$Message' => '<p>A message describing the problem.</p>', 'SchedulerNotRunningException$Message' => '<p>A message describing the problem.</p>', 'SchedulerRunningException$Message' => '<p>A message describing the problem.</p>', 'SchedulerTransitioningException$Message' => '<p>A message describing the problem.</p>', 'ValidationException$Message' => '<p>A message describing the problem.</p>', 'VersionMismatchException$Message' => '<p>A message describing the problem.</p>', ], ], 'MillisecondsCount' => [ 'base' => NULL, 'refs' => [ 'Crawler$CrawlElapsedTime' => '<p>If the crawler is running, contains the total time elapsed since the last crawl began.</p>', ], ], 'NameString' => [ 'base' => NULL, 'refs' => [ 'Action$JobName' => '<p>The name of a job to be executed.</p>', 'Action$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this action.</p>', 'BatchCreatePartitionRequest$DatabaseName' => '<p>The name of the metadata database in which the partition is to be created.</p>', 'BatchCreatePartitionRequest$TableName' => '<p>The name of the metadata table in which the partition is to be created.</p>', 'BatchDeletePartitionRequest$DatabaseName' => '<p>The name of the catalog database in which the table in question resides.</p>', 'BatchDeletePartitionRequest$TableName' => '<p>The name of the table where the partitions to be deleted is located.</p>', 'BatchDeleteTableNameList$member' => NULL, 'BatchDeleteTableRequest$DatabaseName' => '<p>The name of the catalog database where the tables to delete reside. For Hive compatibility, this name is entirely lowercase.</p>', 'BatchDeleteTableVersionRequest$DatabaseName' => '<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'BatchDeleteTableVersionRequest$TableName' => '<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>', 'BatchGetPartitionRequest$DatabaseName' => '<p>The name of the catalog database where the partitions reside.</p>', 'BatchGetPartitionRequest$TableName' => '<p>The name of the partitions\' table.</p>', 'BatchStopJobRunError$JobName' => '<p>The name of the job definition used in the job run in question.</p>', 'BatchStopJobRunRequest$JobName' => '<p>The name of the job definition for which to stop job runs.</p>', 'BatchStopJobRunSuccessfulSubmission$JobName' => '<p>The name of the job definition used in the job run that was stopped.</p>', 'CatalogEntry$DatabaseName' => '<p>The database in which the table metadata resides.</p>', 'CatalogEntry$TableName' => '<p>The name of the table in question.</p>', 'CatalogImportStatus$ImportedBy' => '<p>The name of the person who initiated the migration.</p>', 'ClassifierNameList$member' => NULL, 'Column$Name' => '<p>The name of the <code>Column</code>.</p>', 'Condition$JobName' => '<p>The name of the Job to whose JobRuns this condition applies and on which this trigger waits.</p>', 'Connection$Name' => '<p>The name of the connection definition.</p>', 'Connection$LastUpdatedBy' => '<p>The user, group or role that last updated this connection definition.</p>', 'ConnectionInput$Name' => '<p>The name of the connection.</p>', 'Crawler$Name' => '<p>The crawler name.</p>', 'CrawlerMetrics$CrawlerName' => '<p>The name of the crawler.</p>', 'CrawlerNameList$member' => NULL, 'CreateCrawlerRequest$Name' => '<p>Name of the new crawler.</p>', 'CreateDevEndpointRequest$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this DevEndpoint.</p>', 'CreateDevEndpointResponse$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure being used with this DevEndpoint.</p>', 'CreateGrokClassifierRequest$Name' => '<p>The name of the new classifier.</p>', 'CreateJobRequest$Name' => '<p>The name you assign to this job definition. It must be unique in your account.</p>', 'CreateJobRequest$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this job.</p>', 'CreateJobResponse$Name' => '<p>The unique name that was provided for this job definition.</p>', 'CreateJsonClassifierRequest$Name' => '<p>The name of the classifier.</p>', 'CreatePartitionRequest$DatabaseName' => '<p>The name of the metadata database in which the partition is to be created.</p>', 'CreatePartitionRequest$TableName' => '<p>The name of the metadata table in which the partition is to be created.</p>', 'CreateSecurityConfigurationRequest$Name' => '<p>The name for the new security configuration.</p>', 'CreateSecurityConfigurationResponse$Name' => '<p>The name assigned to the new security configuration.</p>', 'CreateTableRequest$DatabaseName' => '<p>The catalog database in which to create the new table. For Hive compatibility, this name is entirely lowercase.</p>', 'CreateTriggerRequest$Name' => '<p>The name of the trigger.</p>', 'CreateTriggerResponse$Name' => '<p>The name of the trigger.</p>', 'CreateUserDefinedFunctionRequest$DatabaseName' => '<p>The name of the catalog database in which to create the function.</p>', 'CreateXMLClassifierRequest$Name' => '<p>The name of the classifier.</p>', 'Database$Name' => '<p>Name of the database. For Hive compatibility, this is folded to lowercase when it is stored.</p>', 'DatabaseInput$Name' => '<p>Name of the database. For Hive compatibility, this is folded to lowercase when it is stored.</p>', 'DeleteClassifierRequest$Name' => '<p>Name of the classifier to remove.</p>', 'DeleteConnectionNameList$member' => NULL, 'DeleteConnectionRequest$ConnectionName' => '<p>The name of the connection to delete.</p>', 'DeleteCrawlerRequest$Name' => '<p>Name of the crawler to remove.</p>', 'DeleteDatabaseRequest$Name' => '<p>The name of the Database to delete. For Hive compatibility, this must be all lowercase.</p>', 'DeleteJobRequest$JobName' => '<p>The name of the job definition to delete.</p>', 'DeleteJobResponse$JobName' => '<p>The name of the job definition that was deleted.</p>', 'DeletePartitionRequest$DatabaseName' => '<p>The name of the catalog database in which the table in question resides.</p>', 'DeletePartitionRequest$TableName' => '<p>The name of the table where the partition to be deleted is located.</p>', 'DeleteSecurityConfigurationRequest$Name' => '<p>The name of the security configuration to delete.</p>', 'DeleteTableRequest$DatabaseName' => '<p>The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'DeleteTableRequest$Name' => '<p>The name of the table to be deleted. For Hive compatibility, this name is entirely lowercase.</p>', 'DeleteTableVersionRequest$DatabaseName' => '<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'DeleteTableVersionRequest$TableName' => '<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>', 'DeleteTriggerRequest$Name' => '<p>The name of the trigger to delete.</p>', 'DeleteTriggerResponse$Name' => '<p>The name of the trigger that was deleted.</p>', 'DeleteUserDefinedFunctionRequest$DatabaseName' => '<p>The name of the catalog database where the function is located.</p>', 'DeleteUserDefinedFunctionRequest$FunctionName' => '<p>The name of the function definition to be deleted.</p>', 'DevEndpoint$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this DevEndpoint.</p>', 'EncryptionAtRest$SseAwsKmsKeyId' => '<p>The ID of the AWS KMS key to use for encryption at rest.</p>', 'ErrorByName$key' => NULL, 'ErrorDetail$ErrorCode' => '<p>The code associated with this error.</p>', 'GetClassifierRequest$Name' => '<p>Name of the classifier to retrieve.</p>', 'GetConnectionRequest$Name' => '<p>The name of the connection definition to retrieve.</p>', 'GetCrawlerRequest$Name' => '<p>Name of the crawler to retrieve metadata for.</p>', 'GetDatabaseRequest$Name' => '<p>The name of the database to retrieve. For Hive compatibility, this should be all lowercase.</p>', 'GetJobRequest$JobName' => '<p>The name of the job definition to retrieve.</p>', 'GetJobRunRequest$JobName' => '<p>Name of the job definition being run.</p>', 'GetJobRunsRequest$JobName' => '<p>The name of the job definition for which to retrieve all job runs.</p>', 'GetPartitionRequest$DatabaseName' => '<p>The name of the catalog database where the partition resides.</p>', 'GetPartitionRequest$TableName' => '<p>The name of the partition\'s table.</p>', 'GetPartitionsRequest$DatabaseName' => '<p>The name of the catalog database where the partitions reside.</p>', 'GetPartitionsRequest$TableName' => '<p>The name of the partitions\' table.</p>', 'GetSecurityConfigurationRequest$Name' => '<p>The name of the security configuration to retrieve.</p>', 'GetTableRequest$DatabaseName' => '<p>The name of the database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTableRequest$Name' => '<p>The name of the table for which to retrieve the definition. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTableVersionRequest$DatabaseName' => '<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTableVersionRequest$TableName' => '<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTableVersionsRequest$DatabaseName' => '<p>The database in the catalog in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTableVersionsRequest$TableName' => '<p>The name of the table. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTablesRequest$DatabaseName' => '<p>The database in the catalog whose tables to list. For Hive compatibility, this name is entirely lowercase.</p>', 'GetTriggerRequest$Name' => '<p>The name of the trigger to retrieve.</p>', 'GetTriggersRequest$DependentJobName' => '<p>The name of the job for which to retrieve triggers. The trigger that can start this job will be returned, and if there is no such trigger, all triggers will be returned.</p>', 'GetUserDefinedFunctionRequest$DatabaseName' => '<p>The name of the catalog database where the function is located.</p>', 'GetUserDefinedFunctionRequest$FunctionName' => '<p>The name of the function.</p>', 'GetUserDefinedFunctionsRequest$DatabaseName' => '<p>The name of the catalog database where the functions are located.</p>', 'GetUserDefinedFunctionsRequest$Pattern' => '<p>An optional function-name pattern string that filters the function definitions returned.</p>', 'GrokClassifier$Name' => '<p>The name of the classifier.</p>', 'Job$Name' => '<p>The name you assign to this job definition.</p>', 'Job$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this job.</p>', 'JobRun$TriggerName' => '<p>The name of the trigger that started this job run.</p>', 'JobRun$JobName' => '<p>The name of the job definition being used in this run.</p>', 'JobRun$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this job run.</p>', 'JobUpdate$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this job.</p>', 'JsonClassifier$Name' => '<p>The name of the classifier.</p>', 'MatchCriteria$member' => NULL, 'NameStringList$member' => NULL, 'Order$Column' => '<p>The name of the column.</p>', 'Partition$DatabaseName' => '<p>The name of the catalog database where the table in question is located.</p>', 'Partition$TableName' => '<p>The name of the table in question.</p>', 'PhysicalConnectionRequirements$SubnetId' => '<p>The subnet ID used by the connection.</p>', 'PhysicalConnectionRequirements$AvailabilityZone' => '<p>The connection\'s availability zone. This field is redundant, since the specified subnet implies the availability zone to be used. The field must be populated now, but will be deprecated in the future.</p>', 'Predecessor$JobName' => '<p>The name of the job definition used by the predecessor job run.</p>', 'SecurityConfiguration$Name' => '<p>The name of the security configuration.</p>', 'SecurityGroupIdList$member' => NULL, 'SerDeInfo$Name' => '<p>Name of the SerDe.</p>', 'SerDeInfo$SerializationLibrary' => '<p>Usually the class that implements the SerDe. An example is: <code>org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe</code>.</p>', 'StartCrawlerRequest$Name' => '<p>Name of the crawler to start.</p>', 'StartCrawlerScheduleRequest$CrawlerName' => '<p>Name of the crawler to schedule.</p>', 'StartJobRunRequest$JobName' => '<p>The name of the job definition to use.</p>', 'StartJobRunRequest$SecurityConfiguration' => '<p>The name of the SecurityConfiguration structure to be used with this job run.</p>', 'StartTriggerRequest$Name' => '<p>The name of the trigger to start.</p>', 'StartTriggerResponse$Name' => '<p>The name of the trigger that was started.</p>', 'StopCrawlerRequest$Name' => '<p>Name of the crawler to stop.</p>', 'StopCrawlerScheduleRequest$CrawlerName' => '<p>Name of the crawler whose schedule state to set.</p>', 'StopTriggerRequest$Name' => '<p>The name of the trigger to stop.</p>', 'StopTriggerResponse$Name' => '<p>The name of the trigger that was stopped.</p>', 'Table$Name' => '<p>Name of the table. For Hive compatibility, this must be entirely lowercase.</p>', 'Table$DatabaseName' => '<p>Name of the metadata database where the table metadata resides. For Hive compatibility, this must be all lowercase.</p>', 'Table$Owner' => '<p>Owner of the table.</p>', 'Table$CreatedBy' => '<p>Person or entity who created the table.</p>', 'TableError$TableName' => '<p>Name of the table. For Hive compatibility, this must be entirely lowercase.</p>', 'TableInput$Name' => '<p>Name of the table. For Hive compatibility, this is folded to lowercase when it is stored.</p>', 'TableInput$Owner' => '<p>Owner of the table.</p>', 'TableVersionError$TableName' => '<p>The name of the table in question.</p>', 'Trigger$Name' => '<p>Name of the trigger.</p>', 'TriggerUpdate$Name' => '<p>Reserved for future use.</p>', 'UpdateConnectionRequest$Name' => '<p>The name of the connection definition to update.</p>', 'UpdateCrawlerRequest$Name' => '<p>Name of the new crawler.</p>', 'UpdateCrawlerScheduleRequest$CrawlerName' => '<p>Name of the crawler whose schedule to update.</p>', 'UpdateDatabaseRequest$Name' => '<p>The name of the database to update in the catalog. For Hive compatibility, this is folded to lowercase.</p>', 'UpdateGrokClassifierRequest$Name' => '<p>The name of the <code>GrokClassifier</code>.</p>', 'UpdateJobRequest$JobName' => '<p>Name of the job definition to update.</p>', 'UpdateJobResponse$JobName' => '<p>Returns the name of the updated job definition.</p>', 'UpdateJsonClassifierRequest$Name' => '<p>The name of the classifier.</p>', 'UpdatePartitionRequest$DatabaseName' => '<p>The name of the catalog database in which the table in question resides.</p>', 'UpdatePartitionRequest$TableName' => '<p>The name of the table where the partition to be updated is located.</p>', 'UpdateTableRequest$DatabaseName' => '<p>The name of the catalog database in which the table resides. For Hive compatibility, this name is entirely lowercase.</p>', 'UpdateTriggerRequest$Name' => '<p>The name of the trigger to update.</p>', 'UpdateUserDefinedFunctionRequest$DatabaseName' => '<p>The name of the catalog database where the function to be updated is located.</p>', 'UpdateUserDefinedFunctionRequest$FunctionName' => '<p>The name of the function.</p>', 'UpdateXMLClassifierRequest$Name' => '<p>The name of the classifier.</p>', 'UserDefinedFunction$FunctionName' => '<p>The name of the function.</p>', 'UserDefinedFunction$ClassName' => '<p>The Java class that contains the function code.</p>', 'UserDefinedFunction$OwnerName' => '<p>The owner of the function.</p>', 'UserDefinedFunctionInput$FunctionName' => '<p>The name of the function.</p>', 'UserDefinedFunctionInput$ClassName' => '<p>The Java class that contains the function code.</p>', 'UserDefinedFunctionInput$OwnerName' => '<p>The owner of the function.</p>', 'XMLClassifier$Name' => '<p>The name of the classifier.</p>', ], ], 'NameStringList' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteConnectionResponse$Succeeded' => '<p>A list of names of the connection definitions that were successfully deleted.</p>', 'SkewedInfo$SkewedColumnNames' => '<p>A list of names of columns that contain skewed values.</p>', 'StorageDescriptor$BucketColumns' => '<p>A list of reducer grouping columns, clustering columns, and bucketing columns in the table.</p>', ], ], 'NoScheduleException' => [ 'base' => '<p>There is no applicable schedule.</p>', 'refs' => [], ], 'NonNegativeDouble' => [ 'base' => NULL, 'refs' => [ 'CrawlerMetrics$TimeLeftSeconds' => '<p>The estimated time left to complete a running crawl.</p>', 'CrawlerMetrics$LastRuntimeSeconds' => '<p>The duration of the crawler\'s most recent run, in seconds.</p>', 'CrawlerMetrics$MedianRuntimeSeconds' => '<p>The median duration of this crawler\'s runs, in seconds.</p>', ], ], 'NonNegativeInteger' => [ 'base' => NULL, 'refs' => [ 'CrawlerMetrics$TablesCreated' => '<p>The number of tables created by this crawler.</p>', 'CrawlerMetrics$TablesUpdated' => '<p>The number of tables updated by this crawler.</p>', 'CrawlerMetrics$TablesDeleted' => '<p>The number of tables deleted by this crawler.</p>', 'Segment$SegmentNumber' => '<p>The zero-based index number of the this segment. For example, if the total number of segments is 4, SegmentNumber values will range from zero through three.</p>', 'Table$Retention' => '<p>Retention time for this table.</p>', 'TableInput$Retention' => '<p>Retention time for this table.</p>', ], ], 'NotificationProperty' => [ 'base' => '<p>Specifies configuration properties of a notification.</p>', 'refs' => [ 'Action$NotificationProperty' => '<p>Specifies configuration properties of a job run notification.</p>', 'CreateJobRequest$NotificationProperty' => '<p>Specifies configuration properties of a job notification.</p>', 'Job$NotificationProperty' => '<p>Specifies configuration properties of a job notification.</p>', 'JobRun$NotificationProperty' => '<p>Specifies configuration properties of a job run notification.</p>', 'JobUpdate$NotificationProperty' => '<p>Specifies configuration properties of a job notification.</p>', 'StartJobRunRequest$NotificationProperty' => '<p>Specifies configuration properties of a job run notification.</p>', ], ], 'NotifyDelayAfter' => [ 'base' => NULL, 'refs' => [ 'NotificationProperty$NotifyDelayAfter' => '<p>After a job run starts, the number of minutes to wait before sending a job run delay notification.</p>', ], ], 'OperationTimeoutException' => [ 'base' => '<p>The operation timed out.</p>', 'refs' => [], ], 'Order' => [ 'base' => '<p>Specifies the sort order of a sorted column.</p>', 'refs' => [ 'OrderList$member' => NULL, ], ], 'OrderList' => [ 'base' => NULL, 'refs' => [ 'StorageDescriptor$SortColumns' => '<p>A list specifying the sort order of each bucket in the table.</p>', ], ], 'PageSize' => [ 'base' => NULL, 'refs' => [ 'GetClassifiersRequest$MaxResults' => '<p>Size of the list to return (optional).</p>', 'GetConnectionsRequest$MaxResults' => '<p>The maximum number of connections to return in one response.</p>', 'GetCrawlerMetricsRequest$MaxResults' => '<p>The maximum size of a list to return.</p>', 'GetCrawlersRequest$MaxResults' => '<p>The number of crawlers to return on each call.</p>', 'GetDatabasesRequest$MaxResults' => '<p>The maximum number of databases to return in one response.</p>', 'GetDevEndpointsRequest$MaxResults' => '<p>The maximum size of information to return.</p>', 'GetJobRunsRequest$MaxResults' => '<p>The maximum size of the response.</p>', 'GetJobsRequest$MaxResults' => '<p>The maximum size of the response.</p>', 'GetPartitionsRequest$MaxResults' => '<p>The maximum number of partitions to return in a single response.</p>', 'GetSecurityConfigurationsRequest$MaxResults' => '<p>The maximum number of results to return.</p>', 'GetTableVersionsRequest$MaxResults' => '<p>The maximum number of table versions to return in one response.</p>', 'GetTablesRequest$MaxResults' => '<p>The maximum number of tables to return in a single response.</p>', 'GetTriggersRequest$MaxResults' => '<p>The maximum size of the response.</p>', 'GetUserDefinedFunctionsRequest$MaxResults' => '<p>The maximum number of functions to return in one response.</p>', ], ], 'ParametersMap' => [ 'base' => NULL, 'refs' => [ 'Database$Parameters' => '<p>These key-value pairs define parameters and properties of the database.</p>', 'DatabaseInput$Parameters' => '<p>Thes key-value pairs define parameters and properties of the database.</p>', 'Partition$Parameters' => '<p>These key-value pairs define partition parameters.</p>', 'PartitionInput$Parameters' => '<p>These key-value pairs define partition parameters.</p>', 'SerDeInfo$Parameters' => '<p>These key-value pairs define initialization parameters for the SerDe.</p>', 'StorageDescriptor$Parameters' => '<p>User-supplied properties in key-value form.</p>', 'Table$Parameters' => '<p>These key-value pairs define properties associated with the table.</p>', 'TableInput$Parameters' => '<p>These key-value pairs define properties associated with the table.</p>', ], ], 'ParametersMapValue' => [ 'base' => NULL, 'refs' => [ 'ParametersMap$value' => NULL, ], ], 'Partition' => [ 'base' => '<p>Represents a slice of table data.</p>', 'refs' => [ 'GetPartitionResponse$Partition' => '<p>The requested information, in the form of a <code>Partition</code> object.</p>', 'PartitionList$member' => NULL, ], ], 'PartitionError' => [ 'base' => '<p>Contains information about a partition error.</p>', 'refs' => [ 'PartitionErrors$member' => NULL, ], ], 'PartitionErrors' => [ 'base' => NULL, 'refs' => [ 'BatchCreatePartitionResponse$Errors' => '<p>Errors encountered when trying to create the requested partitions.</p>', 'BatchDeletePartitionResponse$Errors' => '<p>Errors encountered when trying to delete the requested partitions.</p>', ], ], 'PartitionInput' => [ 'base' => '<p>The structure used to create and update a partion.</p>', 'refs' => [ 'CreatePartitionRequest$PartitionInput' => '<p>A <code>PartitionInput</code> structure defining the partition to be created.</p>', 'PartitionInputList$member' => NULL, 'UpdatePartitionRequest$PartitionInput' => '<p>The new partition object to which to update the partition.</p>', ], ], 'PartitionInputList' => [ 'base' => NULL, 'refs' => [ 'BatchCreatePartitionRequest$PartitionInputList' => '<p>A list of <code>PartitionInput</code> structures that define the partitions to be created.</p>', ], ], 'PartitionList' => [ 'base' => NULL, 'refs' => [ 'BatchGetPartitionResponse$Partitions' => '<p>A list of the requested partitions.</p>', 'GetPartitionsResponse$Partitions' => '<p>A list of requested partitions.</p>', ], ], 'PartitionValueList' => [ 'base' => '<p>Contains a list of values defining partitions.</p>', 'refs' => [ 'BatchDeletePartitionValueList$member' => NULL, 'BatchGetPartitionValueList$member' => NULL, ], ], 'Path' => [ 'base' => NULL, 'refs' => [ 'DynamoDBTarget$Path' => '<p>The name of the DynamoDB table to crawl.</p>', 'JdbcTarget$Path' => '<p>The path of the JDBC target.</p>', 'PathList$member' => NULL, 'S3Target$Path' => '<p>The path to the Amazon S3 target.</p>', ], ], 'PathList' => [ 'base' => NULL, 'refs' => [ 'JdbcTarget$Exclusions' => '<p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>', 'S3Target$Exclusions' => '<p>A list of glob patterns used to exclude from the crawl. For more information, see <a href="http://docs.aws.amazon.com/glue/latest/dg/add-crawler.html">Catalog Tables with a Crawler</a>.</p>', ], ], 'PhysicalConnectionRequirements' => [ 'base' => '<p>Specifies the physical requirements for a connection.</p>', 'refs' => [ 'Connection$PhysicalConnectionRequirements' => '<p>A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.</p>', 'ConnectionInput$PhysicalConnectionRequirements' => '<p>A map of physical connection requirements, such as VPC and SecurityGroup, needed for making this connection successfully.</p>', ], ], 'Predecessor' => [ 'base' => '<p>A job run that was used in the predicate of a conditional trigger that triggered this job run.</p>', 'refs' => [ 'PredecessorList$member' => NULL, ], ], 'PredecessorList' => [ 'base' => NULL, 'refs' => [ 'JobRun$PredecessorRuns' => '<p>A list of predecessors to this job run.</p>', ], ], 'Predicate' => [ 'base' => '<p>Defines the predicate of the trigger, which determines when it fires.</p>', 'refs' => [ 'CreateTriggerRequest$Predicate' => '<p>A predicate to specify when the new trigger should fire.</p> <p>This field is required when the trigger type is CONDITIONAL.</p>', 'Trigger$Predicate' => '<p>The predicate of this trigger, which defines when it will fire.</p>', 'TriggerUpdate$Predicate' => '<p>The predicate of this trigger, which defines when it will fire.</p>', ], ], 'PredicateString' => [ 'base' => NULL, 'refs' => [ 'GetPartitionsRequest$Expression' => '<p>An expression filtering the partitions to be returned.</p>', ], ], 'PrincipalType' => [ 'base' => NULL, 'refs' => [ 'UserDefinedFunction$OwnerType' => '<p>The owner type.</p>', 'UserDefinedFunctionInput$OwnerType' => '<p>The owner type.</p>', ], ], 'PublicKeysList' => [ 'base' => NULL, 'refs' => [ 'CreateDevEndpointRequest$PublicKeys' => '<p>A list of public keys to be used by the DevEndpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note> <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p> </note>', 'DevEndpoint$PublicKeys' => '<p>A list of public keys to be used by the DevEndpoints for authentication. The use of this attribute is preferred over a single public key because the public keys allow you to have a different private key per client.</p> <note> <p>If you previously created an endpoint with a public key, you must remove that key to be able to set a list of public keys: call the <code>UpdateDevEndpoint</code> API with the public key content in the <code>deletePublicKeys</code> attribute, and the list of new keys in the <code>addPublicKeys</code> attribute.</p> </note>', 'UpdateDevEndpointRequest$AddPublicKeys' => '<p>The list of public keys for the DevEndpoint to use.</p>', 'UpdateDevEndpointRequest$DeletePublicKeys' => '<p>The list of public keys to be deleted from the DevEndpoint.</p>', ], ], 'PutDataCatalogEncryptionSettingsRequest' => [ 'base' => NULL, 'refs' => [], ], 'PutDataCatalogEncryptionSettingsResponse' => [ 'base' => NULL, 'refs' => [], ], 'PythonScript' => [ 'base' => NULL, 'refs' => [ 'CreateScriptResponse$PythonScript' => '<p>The Python script generated from the DAG.</p>', 'GetDataflowGraphRequest$PythonScript' => '<p>The Python script to transform.</p>', 'GetPlanResponse$PythonScript' => '<p>A Python script to perform the mapping.</p>', ], ], 'ResetJobBookmarkRequest' => [ 'base' => NULL, 'refs' => [], ], 'ResetJobBookmarkResponse' => [ 'base' => NULL, 'refs' => [], ], 'ResourceNumberLimitExceededException' => [ 'base' => '<p>A resource numerical limit was exceeded.</p>', 'refs' => [], ], 'ResourceType' => [ 'base' => NULL, 'refs' => [ 'ResourceUri$ResourceType' => '<p>The type of the resource.</p>', ], ], 'ResourceUri' => [ 'base' => '<p>URIs for function resources.</p>', 'refs' => [ 'ResourceUriList$member' => NULL, ], ], 'ResourceUriList' => [ 'base' => NULL, 'refs' => [ 'UserDefinedFunction$ResourceUris' => '<p>The resource URIs for the function.</p>', 'UserDefinedFunctionInput$ResourceUris' => '<p>The resource URIs for the function.</p>', ], ], 'Role' => [ 'base' => NULL, 'refs' => [ 'Crawler$Role' => '<p>The IAM role (or ARN of an IAM role) used to access customer resources, such as data in Amazon S3.</p>', 'CreateCrawlerRequest$Role' => '<p>The IAM role (or ARN of an IAM role) used by the new crawler to access customer resources.</p>', 'UpdateCrawlerRequest$Role' => '<p>The IAM role (or ARN of an IAM role) used by the new crawler to access customer resources.</p>', ], ], 'RoleArn' => [ 'base' => NULL, 'refs' => [ 'CreateDevEndpointRequest$RoleArn' => '<p>The IAM role for the DevEndpoint.</p>', 'CreateDevEndpointResponse$RoleArn' => '<p>The AWS ARN of the role assigned to the new DevEndpoint.</p>', 'DevEndpoint$RoleArn' => '<p>The AWS ARN of the IAM role used in this DevEndpoint.</p>', ], ], 'RoleString' => [ 'base' => NULL, 'refs' => [ 'CreateJobRequest$Role' => '<p>The name or ARN of the IAM role associated with this job.</p>', 'Job$Role' => '<p>The name or ARN of the IAM role associated with this job.</p>', 'JobUpdate$Role' => '<p>The name or ARN of the IAM role associated with this job (required).</p>', ], ], 'RowTag' => [ 'base' => NULL, 'refs' => [ 'CreateXMLClassifierRequest$RowTag' => '<p>The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a="A" item_b="B" /&gt;</code> is not).</p>', 'UpdateXMLClassifierRequest$RowTag' => '<p>The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a="A" item_b="B" /&gt;</code> is not).</p>', 'XMLClassifier$RowTag' => '<p>The XML tag designating the element that contains each record in an XML document being parsed. Note that this cannot identify a self-closing element (closed by <code>/&gt;</code>). An empty row element that contains only attributes can be parsed as long as it ends with a closing tag (for example, <code>&lt;row item_a="A" item_b="B"&gt;&lt;/row&gt;</code> is okay, but <code>&lt;row item_a="A" item_b="B" /&gt;</code> is not).</p>', ], ], 'S3Encryption' => [ 'base' => '<p>Specifies how S3 data should be encrypted.</p>', 'refs' => [ 'S3EncryptionList$member' => NULL, ], ], 'S3EncryptionList' => [ 'base' => NULL, 'refs' => [ 'EncryptionConfiguration$S3Encryption' => '<p>The encryption configuration for S3 data.</p>', ], ], 'S3EncryptionMode' => [ 'base' => NULL, 'refs' => [ 'S3Encryption$S3EncryptionMode' => '<p>The encryption mode to use for S3 data.</p>', ], ], 'S3Target' => [ 'base' => '<p>Specifies a data store in Amazon S3.</p>', 'refs' => [ 'S3TargetList$member' => NULL, ], ], 'S3TargetList' => [ 'base' => NULL, 'refs' => [ 'CrawlerTargets$S3Targets' => '<p>Specifies Amazon S3 targets.</p>', ], ], 'ScalaCode' => [ 'base' => NULL, 'refs' => [ 'CreateScriptResponse$ScalaCode' => '<p>The Scala code generated from the DAG.</p>', 'GetPlanResponse$ScalaCode' => '<p>Scala code to perform the mapping.</p>', ], ], 'Schedule' => [ 'base' => '<p>A scheduling object using a <code>cron</code> statement to schedule an event.</p>', 'refs' => [ 'Crawler$Schedule' => '<p>For scheduled crawlers, the schedule when the crawler runs.</p>', ], ], 'ScheduleState' => [ 'base' => NULL, 'refs' => [ 'Schedule$State' => '<p>The state of the schedule.</p>', ], ], 'SchedulerNotRunningException' => [ 'base' => '<p>The specified scheduler is not running.</p>', 'refs' => [], ], 'SchedulerRunningException' => [ 'base' => '<p>The specified scheduler is already running.</p>', 'refs' => [], ], 'SchedulerTransitioningException' => [ 'base' => '<p>The specified scheduler is transitioning.</p>', 'refs' => [], ], 'SchemaChangePolicy' => [ 'base' => '<p>Crawler policy for update and deletion behavior.</p>', 'refs' => [ 'Crawler$SchemaChangePolicy' => '<p>Sets the behavior when the crawler finds a changed or deleted object.</p>', 'CreateCrawlerRequest$SchemaChangePolicy' => '<p>Policy for the crawler\'s update and deletion behavior.</p>', 'UpdateCrawlerRequest$SchemaChangePolicy' => '<p>Policy for the crawler\'s update and deletion behavior.</p>', ], ], 'SchemaPathString' => [ 'base' => NULL, 'refs' => [ 'MappingEntry$SourcePath' => '<p>The source path.</p>', 'MappingEntry$TargetPath' => '<p>The target path.</p>', ], ], 'ScriptLocationString' => [ 'base' => NULL, 'refs' => [ 'JobCommand$ScriptLocation' => '<p>Specifies the S3 path to a script that executes a job (required).</p>', ], ], 'SecurityConfiguration' => [ 'base' => '<p>Specifies a security configuration.</p>', 'refs' => [ 'GetSecurityConfigurationResponse$SecurityConfiguration' => '<p>The requested security configuration</p>', 'SecurityConfigurationList$member' => NULL, ], ], 'SecurityConfigurationList' => [ 'base' => NULL, 'refs' => [ 'GetSecurityConfigurationsResponse$SecurityConfigurations' => '<p>A list of security configurations.</p>', ], ], 'SecurityGroupIdList' => [ 'base' => NULL, 'refs' => [ 'PhysicalConnectionRequirements$SecurityGroupIdList' => '<p>The security group ID list used by the connection.</p>', ], ], 'Segment' => [ 'base' => '<p>Defines a non-overlapping region of a table\'s partitions, allowing multiple requests to be executed in parallel.</p>', 'refs' => [ 'GetPartitionsRequest$Segment' => '<p>The segment of the table\'s partitions to scan in this request.</p>', ], ], 'SerDeInfo' => [ 'base' => '<p>Information about a serialization/deserialization program (SerDe) which serves as an extractor and loader.</p>', 'refs' => [ 'StorageDescriptor$SerdeInfo' => '<p>Serialization/deserialization (SerDe) information.</p>', ], ], 'SkewedInfo' => [ 'base' => '<p>Specifies skewed values in a table. Skewed are ones that occur with very high frequency.</p>', 'refs' => [ 'StorageDescriptor$SkewedInfo' => '<p>Information about values that appear very frequently in a column (skewed values).</p>', ], ], 'StartCrawlerRequest' => [ 'base' => NULL, 'refs' => [], ], 'StartCrawlerResponse' => [ 'base' => NULL, 'refs' => [], ], 'StartCrawlerScheduleRequest' => [ 'base' => NULL, 'refs' => [], ], 'StartCrawlerScheduleResponse' => [ 'base' => NULL, 'refs' => [], ], 'StartJobRunRequest' => [ 'base' => NULL, 'refs' => [], ], 'StartJobRunResponse' => [ 'base' => NULL, 'refs' => [], ], 'StartTriggerRequest' => [ 'base' => NULL, 'refs' => [], ], 'StartTriggerResponse' => [ 'base' => NULL, 'refs' => [], ], 'StopCrawlerRequest' => [ 'base' => NULL, 'refs' => [], ], 'StopCrawlerResponse' => [ 'base' => NULL, 'refs' => [], ], 'StopCrawlerScheduleRequest' => [ 'base' => NULL, 'refs' => [], ], 'StopCrawlerScheduleResponse' => [ 'base' => NULL, 'refs' => [], ], 'StopTriggerRequest' => [ 'base' => NULL, 'refs' => [], ], 'StopTriggerResponse' => [ 'base' => NULL, 'refs' => [], ], 'StorageDescriptor' => [ 'base' => '<p>Describes the physical storage of table data.</p>', 'refs' => [ 'Partition$StorageDescriptor' => '<p>Provides information about the physical location where the partition is stored.</p>', 'PartitionInput$StorageDescriptor' => '<p>Provides information about the physical location where the partition is stored.</p>', 'Table$StorageDescriptor' => '<p>A storage descriptor containing information about the physical storage of this table.</p>', 'TableInput$StorageDescriptor' => '<p>A storage descriptor containing information about the physical storage of this table.</p>', ], ], 'StringList' => [ 'base' => NULL, 'refs' => [ 'ConnectionsList$Connections' => '<p>A list of connections used by the job.</p>', 'CreateDevEndpointRequest$SecurityGroupIds' => '<p>Security group IDs for the security groups to be used by the new DevEndpoint.</p>', 'CreateDevEndpointResponse$SecurityGroupIds' => '<p>The security groups assigned to the new DevEndpoint.</p>', 'DevEndpoint$SecurityGroupIds' => '<p>A list of security group identifiers used in this DevEndpoint.</p>', ], ], 'Table' => [ 'base' => '<p>Represents a collection of related data organized in columns and rows.</p>', 'refs' => [ 'GetTableResponse$Table' => '<p>The <code>Table</code> object that defines the specified table.</p>', 'TableList$member' => NULL, 'TableVersion$Table' => '<p>The table in question</p>', ], ], 'TableError' => [ 'base' => '<p>An error record for table operations.</p>', 'refs' => [ 'TableErrors$member' => NULL, ], ], 'TableErrors' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteTableResponse$Errors' => '<p>A list of errors encountered in attempting to delete the specified tables.</p>', ], ], 'TableInput' => [ 'base' => '<p>Structure used to create or update the table.</p>', 'refs' => [ 'CreateTableRequest$TableInput' => '<p>The <code>TableInput</code> object that defines the metadata table to create in the catalog.</p>', 'UpdateTableRequest$TableInput' => '<p>An updated <code>TableInput</code> object to define the metadata table in the catalog.</p>', ], ], 'TableList' => [ 'base' => NULL, 'refs' => [ 'GetTablesResponse$TableList' => '<p>A list of the requested <code>Table</code> objects.</p>', ], ], 'TableName' => [ 'base' => NULL, 'refs' => [ 'MappingEntry$SourceTable' => '<p>The name of the source table.</p>', 'MappingEntry$TargetTable' => '<p>The target table.</p>', ], ], 'TablePrefix' => [ 'base' => NULL, 'refs' => [ 'Crawler$TablePrefix' => '<p>The prefix added to the names of tables that are created.</p>', 'CreateCrawlerRequest$TablePrefix' => '<p>The table prefix used for catalog tables that are created.</p>', 'UpdateCrawlerRequest$TablePrefix' => '<p>The table prefix used for catalog tables that are created.</p>', ], ], 'TableTypeString' => [ 'base' => NULL, 'refs' => [ 'Table$TableType' => '<p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>', 'TableInput$TableType' => '<p>The type of this table (<code>EXTERNAL_TABLE</code>, <code>VIRTUAL_VIEW</code>, etc.).</p>', ], ], 'TableVersion' => [ 'base' => '<p>Specifies a version of a table.</p>', 'refs' => [ 'GetTableVersionResponse$TableVersion' => '<p>The requested table version.</p>', 'GetTableVersionsList$member' => NULL, ], ], 'TableVersionError' => [ 'base' => '<p>An error record for table-version operations.</p>', 'refs' => [ 'TableVersionErrors$member' => NULL, ], ], 'TableVersionErrors' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteTableVersionResponse$Errors' => '<p>A list of errors encountered while trying to delete the specified table versions.</p>', ], ], 'Timeout' => [ 'base' => NULL, 'refs' => [ 'Action$Timeout' => '<p>The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.</p>', 'CreateJobRequest$Timeout' => '<p>The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>', 'Job$Timeout' => '<p>The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>', 'JobRun$Timeout' => '<p>The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.</p>', 'JobUpdate$Timeout' => '<p>The job timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours).</p>', 'StartJobRunRequest$Timeout' => '<p>The JobRun timeout in minutes. This is the maximum time that a job run can consume resources before it is terminated and enters <code>TIMEOUT</code> status. The default is 2,880 minutes (48 hours). This overrides the timeout value set in the parent job.</p>', ], ], 'Timestamp' => [ 'base' => NULL, 'refs' => [ 'CatalogImportStatus$ImportTime' => '<p>The time that the migration was started.</p>', 'Connection$CreationTime' => '<p>The time this connection definition was created.</p>', 'Connection$LastUpdatedTime' => '<p>The last time this connection definition was updated.</p>', 'Crawler$CreationTime' => '<p>The time when the crawler was created.</p>', 'Crawler$LastUpdated' => '<p>The time the crawler was last updated.</p>', 'Database$CreateTime' => '<p>The time at which the metadata database was created in the catalog.</p>', 'GrokClassifier$CreationTime' => '<p>The time this classifier was registered.</p>', 'GrokClassifier$LastUpdated' => '<p>The time this classifier was last updated.</p>', 'JsonClassifier$CreationTime' => '<p>The time this classifier was registered.</p>', 'JsonClassifier$LastUpdated' => '<p>The time this classifier was last updated.</p>', 'LastCrawlInfo$StartTime' => '<p>The time at which the crawl started.</p>', 'Partition$CreationTime' => '<p>The time at which the partition was created.</p>', 'Partition$LastAccessTime' => '<p>The last time at which the partition was accessed.</p>', 'Partition$LastAnalyzedTime' => '<p>The last time at which column statistics were computed for this partition.</p>', 'PartitionInput$LastAccessTime' => '<p>The last time at which the partition was accessed.</p>', 'PartitionInput$LastAnalyzedTime' => '<p>The last time at which column statistics were computed for this partition.</p>', 'Table$CreateTime' => '<p>Time when the table definition was created in the Data Catalog.</p>', 'Table$UpdateTime' => '<p>Last time the table was updated.</p>', 'Table$LastAccessTime' => '<p>Last time the table was accessed. This is usually taken from HDFS, and may not be reliable.</p>', 'Table$LastAnalyzedTime' => '<p>Last time column statistics were computed for this table.</p>', 'TableInput$LastAccessTime' => '<p>Last time the table was accessed.</p>', 'TableInput$LastAnalyzedTime' => '<p>Last time column statistics were computed for this table.</p>', 'UserDefinedFunction$CreateTime' => '<p>The time at which the function was created.</p>', 'XMLClassifier$CreationTime' => '<p>The time this classifier was registered.</p>', 'XMLClassifier$LastUpdated' => '<p>The time this classifier was last updated.</p>', ], ], 'TimestampValue' => [ 'base' => NULL, 'refs' => [ 'CreateDevEndpointResponse$CreatedTimestamp' => '<p>The point in time at which this DevEndpoint was created.</p>', 'CreateSecurityConfigurationResponse$CreatedTimestamp' => '<p>The time at which the new security configuration was created.</p>', 'DevEndpoint$CreatedTimestamp' => '<p>The point in time at which this DevEndpoint was created.</p>', 'DevEndpoint$LastModifiedTimestamp' => '<p>The point in time at which this DevEndpoint was last modified.</p>', 'Job$CreatedOn' => '<p>The time and date that this job definition was created.</p>', 'Job$LastModifiedOn' => '<p>The last point in time when this job definition was modified.</p>', 'JobRun$StartedOn' => '<p>The date and time at which this job run was started.</p>', 'JobRun$LastModifiedOn' => '<p>The last time this job run was modified.</p>', 'JobRun$CompletedOn' => '<p>The date and time this job run completed.</p>', 'SecurityConfiguration$CreatedTimeStamp' => '<p>The time at which this security configuration was created.</p>', ], ], 'Token' => [ 'base' => NULL, 'refs' => [ 'GetClassifiersRequest$NextToken' => '<p>An optional continuation token.</p>', 'GetClassifiersResponse$NextToken' => '<p>A continuation token.</p>', 'GetConnectionsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetConnectionsResponse$NextToken' => '<p>A continuation token, if the list of connections returned does not include the last of the filtered connections.</p>', 'GetCrawlerMetricsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetCrawlerMetricsResponse$NextToken' => '<p>A continuation token, if the returned list does not contain the last metric available.</p>', 'GetCrawlersRequest$NextToken' => '<p>A continuation token, if this is a continuation request.</p>', 'GetCrawlersResponse$NextToken' => '<p>A continuation token, if the returned list has not reached the end of those defined in this customer account.</p>', 'GetDatabasesRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetDatabasesResponse$NextToken' => '<p>A continuation token for paginating the returned list of tokens, returned if the current segment of the list is not the last.</p>', 'GetPartitionsRequest$NextToken' => '<p>A continuation token, if this is not the first call to retrieve these partitions.</p>', 'GetPartitionsResponse$NextToken' => '<p>A continuation token, if the returned list of partitions does not does not include the last one.</p>', 'GetTableVersionsRequest$NextToken' => '<p>A continuation token, if this is not the first call.</p>', 'GetTableVersionsResponse$NextToken' => '<p>A continuation token, if the list of available versions does not include the last one.</p>', 'GetTablesRequest$NextToken' => '<p>A continuation token, included if this is a continuation call.</p>', 'GetTablesResponse$NextToken' => '<p>A continuation token, present if the current list segment is not the last.</p>', 'GetUserDefinedFunctionsRequest$NextToken' => '<p>A continuation token, if this is a continuation call.</p>', 'GetUserDefinedFunctionsResponse$NextToken' => '<p>A continuation token, if the list of functions returned does not include the last requested function.</p>', ], ], 'TotalSegmentsInteger' => [ 'base' => NULL, 'refs' => [ 'Segment$TotalSegments' => '<p>The total numer of segments.</p>', ], ], 'Trigger' => [ 'base' => '<p>Information about a specific trigger.</p>', 'refs' => [ 'GetTriggerResponse$Trigger' => '<p>The requested trigger definition.</p>', 'TriggerList$member' => NULL, 'UpdateTriggerResponse$Trigger' => '<p>The resulting trigger definition.</p>', ], ], 'TriggerList' => [ 'base' => NULL, 'refs' => [ 'GetTriggersResponse$Triggers' => '<p>A list of triggers for the specified job.</p>', ], ], 'TriggerState' => [ 'base' => NULL, 'refs' => [ 'Trigger$State' => '<p>The current state of the trigger.</p>', ], ], 'TriggerType' => [ 'base' => NULL, 'refs' => [ 'CreateTriggerRequest$Type' => '<p>The type of the new trigger.</p>', 'Trigger$Type' => '<p>The type of trigger that this is.</p>', ], ], 'TriggerUpdate' => [ 'base' => '<p>A structure used to provide information used to update a trigger. This object will update the the previous trigger definition by overwriting it completely.</p>', 'refs' => [ 'UpdateTriggerRequest$TriggerUpdate' => '<p>The new values with which to update the trigger.</p>', ], ], 'URI' => [ 'base' => NULL, 'refs' => [ 'Database$LocationUri' => '<p>The location of the database (for example, an HDFS path).</p>', 'DatabaseInput$LocationUri' => '<p>The location of the database (for example, an HDFS path).</p>', 'ResourceUri$Uri' => '<p>The URI for accessing the resource.</p>', ], ], 'UpdateBehavior' => [ 'base' => NULL, 'refs' => [ 'SchemaChangePolicy$UpdateBehavior' => '<p>The update behavior when the crawler finds a changed schema.</p>', ], ], 'UpdateClassifierRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateClassifierResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateConnectionRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateConnectionResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCrawlerRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCrawlerResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCrawlerScheduleRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCrawlerScheduleResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateDatabaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateDatabaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateDevEndpointRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateDevEndpointResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateGrokClassifierRequest' => [ 'base' => '<p>Specifies a grok classifier to update when passed to <code>UpdateClassifier</code>.</p>', 'refs' => [ 'UpdateClassifierRequest$GrokClassifier' => '<p>A <code>GrokClassifier</code> object with updated fields.</p>', ], ], 'UpdateJobRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateJobResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateJsonClassifierRequest' => [ 'base' => '<p>Specifies a JSON classifier to be updated.</p>', 'refs' => [ 'UpdateClassifierRequest$JsonClassifier' => '<p>A <code>JsonClassifier</code> object with updated fields.</p>', ], ], 'UpdatePartitionRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdatePartitionResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateTableRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateTableResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateTriggerRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateTriggerResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateUserDefinedFunctionRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateUserDefinedFunctionResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateXMLClassifierRequest' => [ 'base' => '<p>Specifies an XML classifier to be updated.</p>', 'refs' => [ 'UpdateClassifierRequest$XMLClassifier' => '<p>An <code>XMLClassifier</code> object with updated fields.</p>', ], ], 'UriString' => [ 'base' => NULL, 'refs' => [ 'CreateJobRequest$LogUri' => '<p>This field is reserved for future use.</p>', 'Job$LogUri' => '<p>This field is reserved for future use.</p>', 'JobUpdate$LogUri' => '<p>This field is reserved for future use.</p>', ], ], 'UserDefinedFunction' => [ 'base' => '<p>Represents the equivalent of a Hive user-defined function (<code>UDF</code>) definition.</p>', 'refs' => [ 'GetUserDefinedFunctionResponse$UserDefinedFunction' => '<p>The requested function definition.</p>', 'UserDefinedFunctionList$member' => NULL, ], ], 'UserDefinedFunctionInput' => [ 'base' => '<p>A structure used to create or updata a user-defined function.</p>', 'refs' => [ 'CreateUserDefinedFunctionRequest$FunctionInput' => '<p>A <code>FunctionInput</code> object that defines the function to create in the Data Catalog.</p>', 'UpdateUserDefinedFunctionRequest$FunctionInput' => '<p>A <code>FunctionInput</code> object that re-defines the function in the Data Catalog.</p>', ], ], 'UserDefinedFunctionList' => [ 'base' => NULL, 'refs' => [ 'GetUserDefinedFunctionsResponse$UserDefinedFunctions' => '<p>A list of requested function definitions.</p>', ], ], 'ValidationException' => [ 'base' => '<p>A value could not be validated.</p>', 'refs' => [], ], 'ValueString' => [ 'base' => NULL, 'refs' => [ 'BoundedPartitionValueList$member' => NULL, 'ConnectionProperties$value' => NULL, 'ValueStringList$member' => NULL, ], ], 'ValueStringList' => [ 'base' => NULL, 'refs' => [ 'DeletePartitionRequest$PartitionValues' => '<p>The values that define the partition.</p>', 'GetPartitionRequest$PartitionValues' => '<p>The values that define the partition.</p>', 'Partition$Values' => '<p>The values of the partition.</p>', 'PartitionError$PartitionValues' => '<p>The values that define the partition.</p>', 'PartitionInput$Values' => '<p>The values of the partition.</p>', 'PartitionValueList$Values' => '<p>The list of values.</p>', ], ], 'VersionId' => [ 'base' => NULL, 'refs' => [ 'Crawler$Version' => '<p>The version of the crawler.</p>', 'GrokClassifier$Version' => '<p>The version of this classifier.</p>', 'JsonClassifier$Version' => '<p>The version of this classifier.</p>', 'XMLClassifier$Version' => '<p>The version of this classifier.</p>', ], ], 'VersionMismatchException' => [ 'base' => '<p>There was a version conflict.</p>', 'refs' => [], ], 'VersionString' => [ 'base' => NULL, 'refs' => [ 'BatchDeleteTableVersionList$member' => NULL, 'DeleteTableVersionRequest$VersionId' => '<p>The ID of the table version to be deleted.</p>', 'GetTableVersionRequest$VersionId' => '<p>The ID value of the table version to be retrieved.</p>', 'TableVersion$VersionId' => '<p>The ID value that identifies this table version.</p>', 'TableVersionError$VersionId' => '<p>The ID value of the version in question.</p>', ], ], 'ViewTextString' => [ 'base' => NULL, 'refs' => [ 'Table$ViewOriginalText' => '<p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>', 'Table$ViewExpandedText' => '<p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>', 'TableInput$ViewOriginalText' => '<p>If the table is a view, the original text of the view; otherwise <code>null</code>.</p>', 'TableInput$ViewExpandedText' => '<p>If the table is a view, the expanded text of the view; otherwise <code>null</code>.</p>', ], ], 'XMLClassifier' => [ 'base' => '<p>A classifier for <code>XML</code> content.</p>', 'refs' => [ 'Classifier$XMLClassifier' => '<p>An <code>XMLClassifier</code> object.</p>', ], ], ],];
