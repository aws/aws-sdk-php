<?php
// This file was auto-generated from sdk-root/src/data/notifications/2018-05-10/docs-2.json
return [ 'version' => '2.0', 'service' => '<p>The <i>Amazon Web Services User Notifications API Reference</i> provides descriptions, API request parameters, and the JSON response for each of the User Notification API actions.</p> <p>User Notification control plane APIs are currently available in US East (Virginia) - <code>us-east-1</code>.</p> <p> <a href="https://docs.aws.amazon.com/notifications/latest/APIReference/API_GetNotificationEvent.html">GetNotificationEvent</a> and <a href="https://docs.aws.amazon.com/notifications/latest/APIReference/API_ListNotificationEvents.html">ListNotificationEvents</a> APIs are currently available in <a href="https://docs.aws.amazon.com/notifications/latest/userguide/supported-regions.html">commercial partition Regions</a> and only return notifications stored in the same Region in which they\'re called.</p> <p>The User Notifications console can only be used in US East (Virginia). Your data however, is stored in each Region chosen as a <a href="https://docs.aws.amazon.com/notifications/latest/userguide/notification-hubs.html">notification hub</a> in addition to US East (Virginia).</p>', 'operations' => [ 'AssociateChannel' => '<p>Associates a delivery <a href="https://docs.aws.amazon.com/notifications/latest/userguide/managing-delivery-channels.html">Channel</a> with a particular <code>NotificationConfiguration</code>. Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).</p>', 'AssociateManagedNotificationAccountContact' => '<p>Associates an Account Contact with a particular <code>ManagedNotificationConfiguration</code>.</p>', 'AssociateManagedNotificationAdditionalChannel' => '<p>Associates an additional Channel with a particular <code>ManagedNotificationConfiguration</code>.</p> <p>Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).</p>', 'CreateEventRule' => '<p>Creates an <a href="https://docs.aws.amazon.com/notifications/latest/userguide/glossary.html"> <code>EventRule</code> </a> that is associated with a specified <code>NotificationConfiguration</code>.</p>', 'CreateNotificationConfiguration' => '<p>Creates a new <code>NotificationConfiguration</code>.</p>', 'DeleteEventRule' => '<p>Deletes an <code>EventRule</code>.</p>', 'DeleteNotificationConfiguration' => '<p>Deletes a <code>NotificationConfiguration</code>.</p>', 'DeregisterNotificationHub' => '<p>Deregisters a <code>NotificationConfiguration</code> in the specified Region.</p> <note> <p>You can\'t deregister the last <code>NotificationHub</code> in the account. <code>NotificationEvents</code> stored in the deregistered <code>NotificationConfiguration</code> are no longer be visible. Recreating a new <code>NotificationConfiguration</code> in the same Region restores access to those <code>NotificationEvents</code>.</p> </note>', 'DisableNotificationsAccessForOrganization' => '<p>Disables service trust between User Notifications and Amazon Web Services Organizations.</p>', 'DisassociateChannel' => '<p>Disassociates a Channel from a specified <code>NotificationConfiguration</code>. Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).</p>', 'DisassociateManagedNotificationAccountContact' => '<p>Disassociates an Account Contact with a particular <code>ManagedNotificationConfiguration</code>.</p>', 'DisassociateManagedNotificationAdditionalChannel' => '<p>Disassociates an additional Channel from a particular <code>ManagedNotificationConfiguration</code>.</p> <p>Supported Channels include Chatbot, the Console Mobile Application, and emails (notifications-contacts).</p>', 'EnableNotificationsAccessForOrganization' => '<p>Enables service trust between User Notifications and Amazon Web Services Organizations.</p>', 'GetEventRule' => '<p>Returns a specified <code>EventRule</code>.</p>', 'GetManagedNotificationChildEvent' => '<p>Returns the child event of a specific given <code>ManagedNotificationEvent</code>.</p>', 'GetManagedNotificationConfiguration' => '<p>Returns a specified <code>ManagedNotificationConfiguration</code>.</p>', 'GetManagedNotificationEvent' => '<p>Returns a specified <code>ManagedNotificationEvent</code>.</p>', 'GetNotificationConfiguration' => '<p>Returns a specified <code>NotificationConfiguration</code>.</p>', 'GetNotificationEvent' => '<p>Returns a specified <code>NotificationEvent</code>.</p> <important> <p>User Notifications stores notifications in the individual Regions you register as notification hubs and the Region of the source event rule. <code>GetNotificationEvent</code> only returns notifications stored in the same Region in which the action is called. User Notifications doesn\'t backfill notifications to new Regions selected as notification hubs. For this reason, we recommend that you make calls in your oldest registered notification hub. For more information, see <a href="https://docs.aws.amazon.com/notifications/latest/userguide/notification-hubs.html">Notification hubs</a> in the <i>Amazon Web Services User Notifications User Guide</i>.</p> </important>', 'GetNotificationsAccessForOrganization' => '<p>Returns the AccessStatus of Service Trust Enablement for User Notifications and Amazon Web Services Organizations.</p>', 'ListChannels' => '<p>Returns a list of Channels for a <code>NotificationConfiguration</code>.</p>', 'ListEventRules' => '<p>Returns a list of <code>EventRules</code> according to specified filters, in reverse chronological order (newest first).</p>', 'ListManagedNotificationChannelAssociations' => '<p>Returns a list of Account contacts and Channels associated with a <code>ManagedNotificationConfiguration</code>, in paginated format.</p>', 'ListManagedNotificationChildEvents' => '<p>Returns a list of <code>ManagedNotificationChildEvents</code> for a specified aggregate <code>ManagedNotificationEvent</code>, ordered by creation time in reverse chronological order (newest first).</p>', 'ListManagedNotificationConfigurations' => '<p>Returns a list of Managed Notification Configurations according to specified filters, ordered by creation time in reverse chronological order (newest first).</p>', 'ListManagedNotificationEvents' => '<p>Returns a list of Managed Notification Events according to specified filters, ordered by creation time in reverse chronological order (newest first).</p>', 'ListNotificationConfigurations' => '<p>Returns a list of abbreviated <code>NotificationConfigurations</code> according to specified filters, in reverse chronological order (newest first).</p>', 'ListNotificationEvents' => '<p>Returns a list of <code>NotificationEvents</code> according to specified filters, in reverse chronological order (newest first).</p> <important> <p>User Notifications stores notifications in the individual Regions you register as notification hubs and the Region of the source event rule. ListNotificationEvents only returns notifications stored in the same Region in which the action is called. User Notifications doesn\'t backfill notifications to new Regions selected as notification hubs. For this reason, we recommend that you make calls in your oldest registered notification hub. For more information, see <a href="https://docs.aws.amazon.com/notifications/latest/userguide/notification-hubs.html">Notification hubs</a> in the <i>Amazon Web Services User Notifications User Guide</i>.</p> </important>', 'ListNotificationHubs' => '<p>Returns a list of <code>NotificationHubs</code>.</p>', 'ListTagsForResource' => '<p>Returns a list of tags for a specified Amazon Resource Name (ARN).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html">Tagging your Amazon Web Services resources</a> in the <i>Tagging Amazon Web Services Resources User Guide</i>.</p> <note> <p>This is only supported for <code>NotificationConfigurations</code>.</p> </note>', 'RegisterNotificationHub' => '<p>Registers a <code>NotificationConfiguration</code> in the specified Region.</p> <p>There is a maximum of one <code>NotificationConfiguration</code> per Region. You can have a maximum of 3 <code>NotificationHub</code> resources at a time.</p>', 'TagResource' => '<p>Tags the resource with a tag key and value.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html">Tagging your Amazon Web Services resources</a> in the <i>Tagging Amazon Web Services Resources User Guide</i>.</p> <note> <p>This is only supported for <code>NotificationConfigurations</code>.</p> </note>', 'UntagResource' => '<p>Untags a resource with a specified Amazon Resource Name (ARN).</p> <p>For more information, see <a href="https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html">Tagging your Amazon Web Services resources</a> in the <i>Tagging Amazon Web Services Resources User Guide</i>.</p>', 'UpdateEventRule' => '<p>Updates an existing <code>EventRule</code>.</p>', 'UpdateNotificationConfiguration' => '<p>Updates a <code>NotificationConfiguration</code>.</p>', ], 'shapes' => [ 'AccessDeniedException' => [ 'base' => '<p>User does not have sufficient access to perform this action.</p>', 'refs' => [], ], 'AccessStatus' => [ 'base' => NULL, 'refs' => [ 'NotificationsAccessForOrganization$accessStatus' => '<p>Access Status for the Orgs Service.</p>', ], ], 'AccountContactType' => [ 'base' => NULL, 'refs' => [ 'AssociateManagedNotificationAccountContactRequest$contactIdentifier' => '<p>A unique value of an Account Contact Type to associate with the <code>ManagedNotificationConfiguration</code>.</p>', 'DisassociateManagedNotificationAccountContactRequest$contactIdentifier' => '<p>The unique value of an Account Contact Type to associate with the <code>ManagedNotificationConfiguration</code>.</p>', ], ], 'AccountId' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChildEventsRequest$relatedAccount' => '<p>The Amazon Web Services account ID associated with the Managed Notification Child Events.</p>', 'ListManagedNotificationEventsRequest$relatedAccount' => '<p>The Amazon Web Services account ID associated with the Managed Notification Events.</p>', 'ManagedNotificationChildEventOverview$relatedAccount' => '<p>The account that related to the <code>ManagedNotificationChildEvent</code>.</p>', 'ManagedNotificationEventOverview$relatedAccount' => '<p>The account that related to the <code>ManagedNotificationEvent</code>.</p>', 'NotificationEventOverview$relatedAccount' => '<p>The account name containing the <code>NotificationHub</code>.</p>', ], ], 'AggregatedNotificationRegions' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationEventOverview$aggregatedNotificationRegions' => '<p>The list of the regions where the aggregated notifications in this <code>NotificationEvent</code> originated.</p>', ], ], 'AggregationDetail' => [ 'base' => '<p>Provides detailed information about the dimensions used for aggregation.</p>', 'refs' => [ 'ManagedNotificationChildEvent$aggregationDetail' => '<p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>', 'ManagedNotificationChildEventSummary$aggregationDetail' => '<p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>', ], ], 'AggregationDuration' => [ 'base' => NULL, 'refs' => [ 'CreateNotificationConfigurationRequest$aggregationDuration' => '<p>The aggregation preference of the <code>NotificationConfiguration</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>LONG</code> </p> <ul> <li> <p>Aggregate notifications for long periods of time (12 hours).</p> </li> </ul> </li> <li> <p> <code>SHORT</code> </p> <ul> <li> <p>Aggregate notifications for short periods of time (5 minutes).</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>Don\'t aggregate notifications.</p> </li> </ul> </li> </ul> </li> </ul>', 'GetNotificationConfigurationResponse$aggregationDuration' => '<p>The aggregation preference of the <code>NotificationConfiguration</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>LONG</code> </p> <ul> <li> <p>Aggregate notifications for long periods of time (12 hours).</p> </li> </ul> </li> <li> <p> <code>SHORT</code> </p> <ul> <li> <p>Aggregate notifications for short periods of time (5 minutes).</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>Don\'t aggregate notifications.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationConfigurationStructure$aggregationDuration' => '<p>The aggregation preference of the <code>NotificationConfiguration</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>LONG</code> </p> <ul> <li> <p>Aggregate notifications for long periods of time (12 hours).</p> </li> </ul> </li> <li> <p> <code>SHORT</code> </p> <ul> <li> <p>Aggregate notifications for short periods of time (5 minutes).</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>Don\'t aggregate notifications.</p> </li> </ul> </li> </ul> </li> </ul>', 'UpdateNotificationConfigurationRequest$aggregationDuration' => '<p>The aggregation preference of the <code>NotificationConfiguration</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>LONG</code> </p> <ul> <li> <p>Aggregate notifications for long periods of time (12 hours).</p> </li> </ul> </li> <li> <p> <code>SHORT</code> </p> <ul> <li> <p>Aggregate notifications for short periods of time (5 minutes).</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>Don\'t aggregate notifications.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'AggregationEventType' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationEvent$aggregationEventType' => '<p>The notifications aggregation type.</p>', 'ManagedNotificationEventOverview$aggregationEventType' => '<p>The notifications aggregation type.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>AGGREGATE</code> </p> <ul> <li> <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p> </li> </ul> </li> <li> <p> <code>CHILD</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>The notification isn\'t aggregated.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationEvent$aggregationEventType' => '<p>The aggregation type of the <code>NotificationConfiguration</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>AGGREGATE</code> </p> <ul> <li> <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p> </li> </ul> </li> <li> <p> <code>CHILD</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>The notification isn\'t aggregated.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationEventOverview$aggregationEventType' => '<p>The <code>NotificationConfiguration</code>\'s aggregation type.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>AGGREGATE</code> </p> <ul> <li> <p>The notification event is an aggregate notification. Aggregate notifications summarize grouped events over a specified time period.</p> </li> </ul> </li> <li> <p> <code>CHILD</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> </ul> </li> <li> <p> <code>NONE</code> </p> <ul> <li> <p>The notification isn\'t aggregated.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'AggregationKey' => [ 'base' => '<p>Key-value collection that indicate how notifications are grouped.</p>', 'refs' => [ 'AggregationKeys$member' => NULL, ], ], 'AggregationKeys' => [ 'base' => NULL, 'refs' => [ 'AggregationSummary$aggregatedBy' => '<p>Indicates the criteria or rules by which notifications have been grouped together.</p>', ], ], 'AggregationSummary' => [ 'base' => '<p>Provides additional information about the aggregation key.</p>', 'refs' => [ 'ManagedNotificationEvent$aggregationSummary' => NULL, 'ManagedNotificationEventOverview$aggregationSummary' => NULL, 'NotificationEvent$aggregationSummary' => '<p>Provides additional information about how multiple notifications are grouped.</p>', 'NotificationEventOverview$aggregationSummary' => '<p>Provides an aggregated summary data for notification events.</p>', ], ], 'Arn' => [ 'base' => NULL, 'refs' => [ 'Resource$arn' => '<p>The Amazon Resource Name (ARN) of the resource. At least one id or ARN is required.</p>', ], ], 'AssociateChannelRequest' => [ 'base' => NULL, 'refs' => [], ], 'AssociateChannelResponse' => [ 'base' => NULL, 'refs' => [], ], 'AssociateManagedNotificationAccountContactRequest' => [ 'base' => NULL, 'refs' => [], ], 'AssociateManagedNotificationAccountContactResponse' => [ 'base' => NULL, 'refs' => [], ], 'AssociateManagedNotificationAdditionalChannelRequest' => [ 'base' => NULL, 'refs' => [], ], 'AssociateManagedNotificationAdditionalChannelResponse' => [ 'base' => NULL, 'refs' => [], ], 'Boolean' => [ 'base' => NULL, 'refs' => [ 'ListNotificationEventsRequest$includeChildEvents' => '<p>Include aggregated child events in the result.</p>', ], ], 'ChannelArn' => [ 'base' => NULL, 'refs' => [ 'AssociateChannelRequest$arn' => '<p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>NotificationConfiguration</code>.</p> <p>Supported ARNs include Chatbot, the Console Mobile Application, and notifications-contacts.</p>', 'AssociateManagedNotificationAdditionalChannelRequest$channelArn' => '<p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p> <p>Supported ARNs include Chatbot, the Console Mobile Application, and email (notifications-contacts).</p>', 'Channels$member' => NULL, 'DisassociateChannelRequest$arn' => '<p>The Amazon Resource Name (ARN) of the Channel to disassociate.</p>', 'DisassociateManagedNotificationAdditionalChannelRequest$channelArn' => '<p>The Amazon Resource Name (ARN) of the Channel to associate with the <code>ManagedNotificationConfiguration</code>.</p>', 'ListNotificationConfigurationsRequest$channelArn' => '<p>The Amazon Resource Name (ARN) of the Channel to match.</p>', ], ], 'ChannelAssociationOverrideOption' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChannelAssociationSummary$overrideOption' => '<p>Controls whether users can modify channel associations for a notification configuration.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ENABLED</code> </p> <ul> <li> <p>Users can associate or disassociate channels with the notification configuration.</p> </li> </ul> </li> <li> <p> <code>DISABLED</code> </p> <ul> <li> <p>Users cannot associate or disassociate channels with the notification configuration.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'ChannelIdentifier' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationConfigurationsRequest$channelIdentifier' => '<p>The identifier or ARN of the notification channel to filter configurations by.</p>', ], ], 'ChannelType' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChannelAssociationSummary$channelType' => '<p>The type of notification channel used for message delivery.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ACCOUNT_CONTACT</code> </p> <ul> <li> <p>Delivers notifications to Account Managed contacts through the User Notification Service.</p> </li> </ul> </li> <li> <p> <code>MOBILE</code> </p> <ul> <li> <p>Delivers notifications through the Amazon Web Services Console Mobile Application to mobile devices.</p> </li> </ul> </li> <li> <p> <code>CHATBOT</code> </p> <ul> <li> <p>Delivers notifications through Chatbot to collaboration platforms (Slack, Chime).</p> </li> </ul> </li> <li> <p> <code>EMAIL</code> </p> <ul> <li> <p>Delivers notifications to email addresses.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'Channels' => [ 'base' => NULL, 'refs' => [ 'ListChannelsResponse$channels' => '<p>A list of Channels.</p>', ], ], 'ConflictException' => [ 'base' => '<p>Updating or deleting a resource can cause an inconsistent state.</p>', 'refs' => [], ], 'CreateEventRuleRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateEventRuleResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateNotificationConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateNotificationConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreationTime' => [ 'base' => NULL, 'refs' => [ 'EventRuleStructure$creationTime' => '<p>The creation time of the <code>EventRule</code>.</p>', 'GetEventRuleResponse$creationTime' => '<p>The date when the <code>EventRule</code> was created.</p>', 'GetManagedNotificationChildEventResponse$creationTime' => '<p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>', 'GetManagedNotificationEventResponse$creationTime' => '<p>The creation time of the <code>ManagedNotificationEvent</code>.</p>', 'GetNotificationConfigurationResponse$creationTime' => '<p>The creation time of the <code>NotificationConfiguration</code>.</p>', 'GetNotificationEventResponse$creationTime' => '<p>The creation time of the <code>NotificationEvent</code>.</p>', 'ManagedNotificationChildEventOverview$creationTime' => '<p>The creation time of the <code>ManagedNotificationChildEvent</code>.</p>', 'ManagedNotificationEventOverview$creationTime' => '<p>The creation time of the <code>ManagedNotificationEvent</code>.</p>', 'NotificationConfigurationStructure$creationTime' => '<p>The creation time of the <code>NotificationConfiguration</code>.</p>', 'NotificationEventOverview$creationTime' => '<p>The creation time of the <code>NotificationEvent</code>.</p>', 'NotificationHubOverview$creationTime' => '<p>The date and time the <code>NotificationHubOverview</code> was created.</p>', 'RegisterNotificationHubResponse$creationTime' => '<p>The date the resource was created.</p>', ], ], 'DeleteEventRuleRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteEventRuleResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeleteNotificationConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeleteNotificationConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'DeregisterNotificationHubRequest' => [ 'base' => NULL, 'refs' => [], ], 'DeregisterNotificationHubResponse' => [ 'base' => NULL, 'refs' => [], ], 'Dimension' => [ 'base' => '<p>The key-value pair of properties for an event.</p>', 'refs' => [ 'Dimensions$member' => NULL, ], ], 'Dimensions' => [ 'base' => NULL, 'refs' => [ 'MessageComponents$dimensions' => '<p>A list of properties in key-value pairs. Pairs are shown in order of importance from most important to least important. Channels may limit the number of dimensions shown to the notification viewer.</p> <note> <p>Included dimensions, keys, and values are subject to change.</p> </note>', ], ], 'DisableNotificationsAccessForOrganizationRequest' => [ 'base' => NULL, 'refs' => [], ], 'DisableNotificationsAccessForOrganizationResponse' => [ 'base' => NULL, 'refs' => [], ], 'DisassociateChannelRequest' => [ 'base' => NULL, 'refs' => [], ], 'DisassociateChannelResponse' => [ 'base' => NULL, 'refs' => [], ], 'DisassociateManagedNotificationAccountContactRequest' => [ 'base' => NULL, 'refs' => [], ], 'DisassociateManagedNotificationAccountContactResponse' => [ 'base' => NULL, 'refs' => [], ], 'DisassociateManagedNotificationAdditionalChannelRequest' => [ 'base' => NULL, 'refs' => [], ], 'DisassociateManagedNotificationAdditionalChannelResponse' => [ 'base' => NULL, 'refs' => [], ], 'EnableNotificationsAccessForOrganizationRequest' => [ 'base' => NULL, 'refs' => [], ], 'EnableNotificationsAccessForOrganizationResponse' => [ 'base' => NULL, 'refs' => [], ], 'ErrorMessage' => [ 'base' => NULL, 'refs' => [ 'AccessDeniedException$message' => NULL, 'ConflictException$message' => NULL, 'InternalServerException$message' => NULL, 'ResourceNotFoundException$message' => NULL, 'ServiceQuotaExceededException$message' => NULL, 'ThrottlingException$message' => NULL, 'ValidationException$message' => NULL, ], ], 'EventRuleArn' => [ 'base' => NULL, 'refs' => [ 'CreateEventRuleResponse$arn' => '<p>The ARN of the resource.</p>', 'DeleteEventRuleRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>EventRule</code> to delete.</p>', 'EventRuleStructure$arn' => '<p>The Amazon Resource Name (ARN) of the <code>EventRule</code>. CloudFormation stack generates this ARN and then uses this ARN to associate with the <code>NotificationConfiguration</code>.</p>', 'GetEventRuleRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>EventRule</code> to return.</p>', 'GetEventRuleResponse$arn' => '<p>The ARN of the resource.</p>', 'UpdateEventRuleRequest$arn' => '<p>The Amazon Resource Name (ARN) to use to update the <code>EventRule</code>.</p>', 'UpdateEventRuleResponse$arn' => '<p>The Amazon Resource Name (ARN) to use to update the <code>EventRule</code>.</p>', ], ], 'EventRuleEventPattern' => [ 'base' => NULL, 'refs' => [ 'CreateEventRuleRequest$eventPattern' => '<p>An additional event pattern used to further filter the events this <code>EventRule</code> receives.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a> in the <i>Amazon EventBridge User Guide.</i> </p>', 'EventRuleStructure$eventPattern' => '<p>An additional event pattern used to further filter the events this <code>EventRule</code> receives.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a> in the <i>Amazon EventBridge User Guide.</i> </p>', 'GetEventRuleResponse$eventPattern' => '<p>An additional event pattern used to further filter the events this <code>EventRule</code> receives.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a> in the <i>Amazon EventBridge User Guide.</i> </p>', 'UpdateEventRuleRequest$eventPattern' => '<p>An additional event pattern used to further filter the events this <code>EventRule</code> receives.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html">Amazon EventBridge event patterns</a> in the <i>Amazon EventBridge User Guide.</i> </p>', ], ], 'EventRuleStatus' => [ 'base' => NULL, 'refs' => [ 'EventRuleStatusSummary$status' => '<p>The status of the <code>EventRule</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ACTIVE</code> </p> <ul> <li> <p>The <code>EventRule</code> can process events.</p> </li> </ul> </li> <li> <p> <code>INACTIVE</code> </p> <ul> <li> <p>The <code>EventRule</code> may be unable to process events.</p> </li> </ul> </li> <li> <p> <code>CREATING</code> </p> <ul> <li> <p>The <code>EventRule</code> is being created.</p> <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p> </li> </ul> </li> <li> <p> <code>UPDATING</code> </p> <ul> <li> <p>The <code>EventRule</code> is being updated.</p> <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p> </li> </ul> </li> <li> <p> <code>DELETING</code> </p> <ul> <li> <p>The <code>EventRule</code> is being deleted.</p> <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'EventRuleStatusReason' => [ 'base' => NULL, 'refs' => [ 'EventRuleStatusSummary$reason' => '<p>A human-readable reason for <code>EventRuleStatus</code>.</p>', ], ], 'EventRuleStatusSummary' => [ 'base' => '<p>Provides additional information about the current <code>EventRule</code> status.</p>', 'refs' => [ 'StatusSummaryByRegion$value' => NULL, ], ], 'EventRuleStructure' => [ 'base' => '<p>Contains a complete list of fields related to an <code>EventRule</code>.</p>', 'refs' => [ 'EventRules$member' => NULL, ], ], 'EventRules' => [ 'base' => NULL, 'refs' => [ 'ListEventRulesResponse$eventRules' => '<p>A list of <code>EventRules</code>.</p>', ], ], 'EventStatus' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChildEvent$eventStatus' => '<p>The assesed nature of the event.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>HEALTHY</code> </p> <ul> <li> <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p> </li> </ul> </li> <li> <p> <code>UNHEALTHY</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p> </li> </ul> </li> </ul> </li> </ul>', 'ManagedNotificationChildEventSummary$eventStatus' => '<p>The perceived nature of the event.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>HEALTHY</code> </p> <ul> <li> <p>All EventRules are <code>ACTIVE</code> and any call can be run.</p> </li> </ul> </li> <li> <p> <code>UNHEALTHY</code> </p> <ul> <li> <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> </ul> </li> </ul> </li> </ul>', 'ManagedNotificationEvent$eventStatus' => '<p>The status of an event.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>HEALTHY</code> </p> <ul> <li> <p>All EventRules are <code>ACTIVE</code> and any call can be run.</p> </li> </ul> </li> <li> <p> <code>UNHEALTHY</code> </p> <ul> <li> <p>Some EventRules are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> </ul> </li> </ul> </li> </ul>', 'ManagedNotificationEventSummary$eventStatus' => '<p>The managed notification event status.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>HEALTHY</code> </p> <ul> <li> <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p> </li> </ul> </li> <li> <p> <code>UNHEALTHY</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationEvent$eventStatus' => '<p>The assessed nature of the event.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>HEALTHY</code> </p> <ul> <li> <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p> </li> </ul> </li> <li> <p> <code>UNHEALTHY</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationEventSummary$eventStatus' => '<p>Provides additional information about the current status of the <code>NotificationEvent</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>HEALTHY</code> </p> <ul> <li> <p>All <code>EventRules</code> are <code>ACTIVE</code>.</p> </li> </ul> </li> <li> <p> <code>UNHEALTHY</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'EventType' => [ 'base' => NULL, 'refs' => [ 'CreateEventRuleRequest$eventType' => '<p>The event type to match.</p> <p>Must match one of the valid Amazon EventBridge event types. For example, EC2 Instance State-change Notification and Amazon CloudWatch Alarm State Change. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'EventRuleStructure$eventType' => '<p>The event type this rule should match with the EventBridge events. It must match with atleast one of the valid EventBridge event types. For example, Amazon EC2 Instance State change Notification and Amazon CloudWatch State Change. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i> Amazon EventBridge User Guide</i>.</p>', 'GetEventRuleResponse$eventType' => '<p>The event type to match.</p> <p>Must match one of the valid Amazon EventBridge event types. For example, EC2 Instance State-change Notification and Amazon CloudWatch Alarm State Change. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', ], ], 'GetEventRuleRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetEventRuleResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetManagedNotificationChildEventRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetManagedNotificationChildEventResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetManagedNotificationConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetManagedNotificationConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetManagedNotificationEventRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetManagedNotificationEventResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetNotificationConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetNotificationConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetNotificationEventRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetNotificationEventResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetNotificationsAccessForOrganizationRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetNotificationsAccessForOrganizationResponse' => [ 'base' => NULL, 'refs' => [], ], 'Integer' => [ 'base' => NULL, 'refs' => [ 'AggregationSummary$eventCount' => '<p>Indicates the number of events associated with the aggregation key.</p>', 'SummarizationDimensionOverview$count' => '<p>Total number of occurrences for this dimension.</p>', 'ThrottlingException$retryAfterSeconds' => '<p>The number of seconds a client should wait before retrying the request.</p>', ], ], 'InternalServerException' => [ 'base' => '<p>Unexpected error during processing of request.</p>', 'refs' => [], ], 'LastActivationTime' => [ 'base' => NULL, 'refs' => [ 'NotificationHubOverview$lastActivationTime' => '<p>The most recent time this <code>NotificationHub</code> had an <code>ACTIVE</code> status.</p>', 'RegisterNotificationHubResponse$lastActivationTime' => '<p>The date the resource was last activated.</p>', ], ], 'ListChannelsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListChannelsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListChannelsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. The default value is 20.</p>', ], ], 'ListChannelsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListEventRulesRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListEventRulesRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListEventRulesRequest$maxResults' => '<p>The maximum number of results to be returned in this call. The default value is 20.</p>', ], ], 'ListEventRulesResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationChannelAssociationsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationChannelAssociationsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChannelAssociationsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. Defaults to 20.</p>', ], ], 'ListManagedNotificationChannelAssociationsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationChildEventsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationChildEventsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChildEventsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. Defaults to 20.</p>', ], ], 'ListManagedNotificationChildEventsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationConfigurationsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationConfigurationsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationConfigurationsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. Defaults to 20.</p>', ], ], 'ListManagedNotificationConfigurationsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationEventsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListManagedNotificationEventsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationEventsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. Defaults to 20.</p>', ], ], 'ListManagedNotificationEventsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListNotificationConfigurationsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListNotificationConfigurationsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListNotificationConfigurationsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. Defaults to 20.</p>', ], ], 'ListNotificationConfigurationsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListNotificationEventsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListNotificationEventsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListNotificationEventsRequest$maxResults' => '<p>The maximum number of results to be returned in this call. Defaults to 20.</p>', ], ], 'ListNotificationEventsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListNotificationHubsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListNotificationHubsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListNotificationHubsRequest$maxResults' => '<p>The maximum number of records to list in a single response.</p>', ], ], 'ListNotificationHubsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListTagsForResourceRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListTagsForResourceResponse' => [ 'base' => NULL, 'refs' => [], ], 'LocaleCode' => [ 'base' => NULL, 'refs' => [ 'GetManagedNotificationChildEventRequest$locale' => '<p>The locale code of the language used for the retrieved <code>ManagedNotificationChildEvent</code>. The default locale is English <code>en_US</code>.</p>', 'GetManagedNotificationEventRequest$locale' => '<p>The locale code of the language used for the retrieved <code>ManagedNotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>', 'GetNotificationEventRequest$locale' => '<p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>en_US</code>.</p>', 'ListManagedNotificationChildEventsRequest$locale' => '<p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English.<code>en_US</code>.</p>', 'ListManagedNotificationEventsRequest$locale' => '<p>The locale code of the language used for the retrieved NotificationEvent. The default locale is English (en_US).</p>', 'ListNotificationEventsRequest$locale' => '<p>The locale code of the language used for the retrieved <code>NotificationEvent</code>. The default locale is English <code>(en_US)</code>.</p>', 'TextByLocale$key' => NULL, ], ], 'ManagedNotificationChannelAssociationSummary' => [ 'base' => '<p>Provides a summary of channel associations for a managed notification configuration.</p>', 'refs' => [ 'ManagedNotificationChannelAssociations$member' => NULL, ], ], 'ManagedNotificationChannelAssociations' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChannelAssociationsResponse$channelAssociations' => '<p>A list that contains the following information about a channel association.</p>', ], ], 'ManagedNotificationChildEvent' => [ 'base' => '<p>A ManagedNotificationChildEvent is a notification-focused representation of an event. They contain semantic information used to create aggregated or non-aggregated end-user notifications.</p>', 'refs' => [ 'GetManagedNotificationChildEventResponse$content' => '<p>The content of the <code>ManagedNotificationChildEvent</code>.</p>', ], ], 'ManagedNotificationChildEventArn' => [ 'base' => NULL, 'refs' => [ 'GetManagedNotificationChildEventRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code> to return.</p>', 'GetManagedNotificationChildEventResponse$arn' => '<p>The ARN of the resource.</p>', ], ], 'ManagedNotificationChildEventOverview' => [ 'base' => '<p>Describes an overview and metadata for a <code>ManagedNotificationChildEvent</code>.</p>', 'refs' => [ 'ManagedNotificationChildEvents$member' => NULL, ], ], 'ManagedNotificationChildEventSummary' => [ 'base' => '<p>Describes a short summary and metadata for a <code>ManagedNotificationChildEvent</code>.</p>', 'refs' => [ 'ManagedNotificationChildEventOverview$childEvent' => '<p>The content of the <code>ManagedNotificationChildEvent</code>.</p>', ], ], 'ManagedNotificationChildEvents' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChildEventsResponse$managedNotificationChildEvents' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', ], ], 'ManagedNotificationConfigurationDescription' => [ 'base' => NULL, 'refs' => [ 'GetManagedNotificationConfigurationResponse$description' => '<p>The description of the <code>ManagedNotificationConfiguration</code>.</p>', 'ManagedNotificationConfigurationStructure$description' => '<p>The description of the <code>ManagedNotificationConfiguration</code>.</p>', ], ], 'ManagedNotificationConfigurationName' => [ 'base' => NULL, 'refs' => [ 'GetManagedNotificationConfigurationResponse$name' => '<p>The name of the <code>ManagedNotificationConfiguration</code>.</p>', 'ManagedNotificationConfigurationStructure$name' => '<p>The name of the <code>ManagedNotificationConfiguration</code>.</p>', ], ], 'ManagedNotificationConfigurationOsArn' => [ 'base' => NULL, 'refs' => [ 'AssociateManagedNotificationAccountContactRequest$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the Account Contact.</p>', 'AssociateManagedNotificationAdditionalChannelRequest$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the additional Channel.</p>', 'DisassociateManagedNotificationAccountContactRequest$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to associate with the Account Contact.</p>', 'DisassociateManagedNotificationAdditionalChannelRequest$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the Managed Notification Configuration to associate with the additional Channel.</p>', 'GetManagedNotificationChildEventResponse$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> associated with the <code>ManagedNotificationChildEvent</code>.</p>', 'GetManagedNotificationConfigurationRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to return.</p>', 'GetManagedNotificationConfigurationResponse$arn' => '<p>The ARN of the <code>ManagedNotificationConfiguration</code> resource.</p>', 'GetManagedNotificationEventResponse$managedNotificationConfigurationArn' => '<p>The ARN of the <code>ManagedNotificationConfiguration</code>.</p>', 'ListManagedNotificationChannelAssociationsRequest$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code> to match.</p>', 'ManagedNotificationChildEventOverview$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>', 'ManagedNotificationConfigurationStructure$arn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>', 'ManagedNotificationEventOverview$managedNotificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationConfiguration</code>.</p>', ], ], 'ManagedNotificationConfigurationStructure' => [ 'base' => '<p>Describes the basic structure and properties of a <code>ManagedNotificationConfiguration</code>.</p>', 'refs' => [ 'ManagedNotificationConfigurations$member' => NULL, ], ], 'ManagedNotificationConfigurations' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationConfigurationsResponse$managedNotificationConfigurations' => '<p>A list of Managed Notification Configurations matching the request criteria.</p>', ], ], 'ManagedNotificationEvent' => [ 'base' => '<p>A notification-focused representation of an event. They contain semantic information used by AccountContacts or Additional Channels to create end-user notifications.</p>', 'refs' => [ 'GetManagedNotificationEventResponse$content' => '<p>The content of the <code>ManagedNotificationEvent</code>.</p>', ], ], 'ManagedNotificationEventArn' => [ 'base' => NULL, 'refs' => [ 'GetManagedNotificationEventRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code> to return.</p>', 'GetManagedNotificationEventResponse$arn' => '<p>The ARN of the resource.</p>', 'ListManagedNotificationChildEventsRequest$aggregateManagedNotificationEventArn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationEvent</code>.</p>', 'ManagedNotificationChildEvent$aggregateManagedNotificationEventArn' => '<p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this Managed Notification Child Event.</p>', 'ManagedNotificationChildEventOverview$arn' => '<p>The Amazon Resource Name (ARN) of the <code>ManagedNotificationChildEvent</code>.</p>', 'ManagedNotificationChildEventOverview$aggregateManagedNotificationEventArn' => '<p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent that is associated with this <code>ManagedNotificationChildEvent</code>.</p>', 'ManagedNotificationEventOverview$arn' => '<p>The Amazon Resource Name (ARN) of the ManagedNotificationEvent.</p>', ], ], 'ManagedNotificationEventOverview' => [ 'base' => '<p>Describes an overview and metadata for a ManagedNotificationEvent.</p>', 'refs' => [ 'ManagedNotificationEvents$member' => NULL, ], ], 'ManagedNotificationEventSummary' => [ 'base' => '<p>A short summary of a <code>ManagedNotificationEvent</code>. This is only used when listing managed notification events.</p>', 'refs' => [ 'ManagedNotificationEventOverview$notificationEvent' => NULL, ], ], 'ManagedNotificationEvents' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationEventsResponse$managedNotificationEvents' => '<p>A list of Managed Notification Events matching the request criteria.</p>', ], ], 'ManagedRuleArn' => [ 'base' => NULL, 'refs' => [ 'ManagedRuleArns$member' => NULL, ], ], 'ManagedRuleArns' => [ 'base' => NULL, 'refs' => [ 'EventRuleStructure$managedRules' => '<p>A list of Amazon EventBridge Managed Rule ARNs associated with this <code>EventRule</code>.</p> <note> <p>These are created by User Notifications within your account so your <code>EventRules</code> can function.</p> </note>', 'GetEventRuleResponse$managedRules' => '<p>A list of managed rules from EventBridge that are associated with this <code>EventRule</code>.</p> <note> <p>These are created by User Notifications within your account so this <code>EventRule</code> functions.</p> </note>', ], ], 'ManagedSourceEventMetadataSummary' => [ 'base' => '<p>A short summary and metadata for a managed notification event.</p>', 'refs' => [ 'ManagedNotificationChildEventSummary$sourceEventMetadata' => '<p>Contains all event metadata present identically across all <code>NotificationEvents</code>. All fields are present in Source Events via Eventbridge.</p>', 'ManagedNotificationEventSummary$sourceEventMetadata' => '<p>Contains metadata about the event that caused the <code>ManagedNotificationEvent</code>.</p>', ], ], 'ManagedSourceEventMetadataSummaryEventOriginRegionString' => [ 'base' => NULL, 'refs' => [ 'ManagedSourceEventMetadataSummary$eventOriginRegion' => '<p>The Region where the notification originated.</p>', ], ], 'ManagedSourceEventMetadataSummaryEventTypeString' => [ 'base' => NULL, 'refs' => [ 'ManagedSourceEventMetadataSummary$eventType' => '<p>The event Type of the notification.</p>', ], ], 'Media' => [ 'base' => NULL, 'refs' => [ 'NotificationEvent$media' => '<p>A list of media elements.</p>', ], ], 'MediaElement' => [ 'base' => '<p>Describes a media element.</p>', 'refs' => [ 'Media$member' => NULL, ], ], 'MediaElementType' => [ 'base' => NULL, 'refs' => [ 'MediaElement$type' => '<p>The type of media.</p>', ], ], 'MediaId' => [ 'base' => NULL, 'refs' => [ 'MediaElement$mediaId' => '<p>The unique ID for the media.</p>', ], ], 'MessageComponents' => [ 'base' => '<p>Describes the components of a notification message.</p>', 'refs' => [ 'ManagedNotificationChildEvent$messageComponents' => NULL, 'ManagedNotificationEvent$messageComponents' => NULL, 'NotificationEvent$messageComponents' => NULL, ], ], 'MessageComponentsSummary' => [ 'base' => '<p>Contains the headline message component.</p>', 'refs' => [ 'ManagedNotificationChildEventSummary$messageComponents' => NULL, 'ManagedNotificationEventSummary$messageComponents' => NULL, 'NotificationEventSummary$messageComponents' => '<p>The message components of a notification event.</p>', ], ], 'MessageComponentsSummaryHeadlineString' => [ 'base' => NULL, 'refs' => [ 'MessageComponentsSummary$headline' => '<p>A sentence long summary. For example, titles or an email subject line.</p>', ], ], 'NextToken' => [ 'base' => NULL, 'refs' => [ 'ListChannelsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous ListNotificationEvents call. <code>NextToken</code> uses Base64 encoding.</p>', 'ListChannelsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListEventRulesRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>', 'ListEventRulesResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListManagedNotificationChannelAssociationsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous <code>ListManagedNotificationChannelAssociations</code> call.</p>', 'ListManagedNotificationChannelAssociationsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListManagedNotificationChildEventsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>', 'ListManagedNotificationChildEventsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListManagedNotificationConfigurationsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous ListManagedNotificationChannelAssociations call. Next token uses Base64 encoding.</p>', 'ListManagedNotificationConfigurationsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListManagedNotificationEventsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous <code>ListManagedNotificationChannelAssociations</code> call. Next token uses Base64 encoding.</p>', 'ListManagedNotificationEventsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListNotificationConfigurationsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>', 'ListNotificationConfigurationsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListNotificationEventsRequest$nextToken' => '<p>The start token for paginated calls. Retrieved from the response of a previous <code>ListEventRules</code> call. Next token uses Base64 encoding.</p>', 'ListNotificationEventsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', 'ListNotificationHubsRequest$nextToken' => '<p>A pagination token. Set to null to start listing notification hubs from the start.</p>', 'ListNotificationHubsResponse$nextToken' => '<p>A pagination token. If a non-null pagination token is returned in a result, pass its value in another request to retrieve more entries.</p>', ], ], 'NotificationConfigurationArn' => [ 'base' => NULL, 'refs' => [ 'AssociateChannelRequest$notificationConfigurationArn' => '<p>The ARN of the <code>NotificationConfiguration</code> to associate with the Channel.</p>', 'CreateEventRuleRequest$notificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code> associated with this <code>EventRule</code>.</p>', 'CreateEventRuleResponse$notificationConfigurationArn' => '<p>The ARN of a <code>NotificationConfiguration</code>.</p>', 'CreateNotificationConfigurationResponse$arn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code>.</p>', 'DeleteNotificationConfigurationRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code> to delete.</p>', 'DisassociateChannelRequest$notificationConfigurationArn' => '<p>The ARN of the <code>NotificationConfiguration</code> to disassociate.</p>', 'EventRuleStructure$notificationConfigurationArn' => '<p>The ARN for the <code>NotificationConfiguration</code> associated with this <code>EventRule</code>.</p>', 'GetEventRuleResponse$notificationConfigurationArn' => '<p>The ARN of a <code>NotificationConfiguration</code>.</p>', 'GetNotificationConfigurationRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code> to return.</p>', 'GetNotificationConfigurationResponse$arn' => '<p>The ARN of the resource.</p>', 'GetNotificationEventResponse$notificationConfigurationArn' => '<p>The ARN of the <code>NotificationConfiguration</code>.</p>', 'ListChannelsRequest$notificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code>.</p>', 'ListEventRulesRequest$notificationConfigurationArn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code>.</p>', 'ListTagsForResourceRequest$arn' => '<p>The Amazon Resource Name (ARN) to use to list tags.</p>', 'NotificationConfigurationStructure$arn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationConfiguration</code> resource.</p>', 'NotificationEventOverview$notificationConfigurationArn' => '<p>The ARN of the <code>NotificationConfiguration</code>.</p>', 'TagResourceRequest$arn' => '<p>The Amazon Resource Name (ARN) to use to tag a resource.</p>', 'UntagResourceRequest$arn' => '<p>The Amazon Resource Name (ARN) to use to untag a resource.</p>', 'UpdateEventRuleResponse$notificationConfigurationArn' => '<p>The ARN of the <code>NotificationConfiguration</code>.</p>', 'UpdateNotificationConfigurationRequest$arn' => '<p>The Amazon Resource Name (ARN) used to update the <code>NotificationConfiguration</code>.</p>', 'UpdateNotificationConfigurationResponse$arn' => '<p>The ARN used to update the <code>NotificationConfiguration</code>.</p>', ], ], 'NotificationConfigurationDescription' => [ 'base' => NULL, 'refs' => [ 'CreateNotificationConfigurationRequest$description' => '<p>The description of the <code>NotificationConfiguration</code>.</p>', 'GetNotificationConfigurationResponse$description' => '<p>The description of the <code>NotificationConfiguration</code>.</p>', 'NotificationConfigurationStructure$description' => '<p>The description of the <code>NotificationConfiguration</code>.</p>', 'UpdateNotificationConfigurationRequest$description' => '<p>The description of the <code>NotificationConfiguration</code>.</p>', ], ], 'NotificationConfigurationName' => [ 'base' => NULL, 'refs' => [ 'CreateNotificationConfigurationRequest$name' => '<p>The name of the <code>NotificationConfiguration</code>. Supports RFC 3986\'s unreserved characters.</p>', 'GetNotificationConfigurationResponse$name' => '<p>The name of the <code>NotificationConfiguration</code>.</p>', 'NotificationConfigurationStructure$name' => '<p>The name of the <code>NotificationConfiguration</code>. Supports RFC 3986\'s unreserved characters.</p>', 'UpdateNotificationConfigurationRequest$name' => '<p>The name of the <code>NotificationConfiguration</code>.</p>', ], ], 'NotificationConfigurationStatus' => [ 'base' => NULL, 'refs' => [ 'CreateNotificationConfigurationResponse$status' => '<p>The current status of this <code>NotificationConfiguration</code>.</p>', 'GetNotificationConfigurationResponse$status' => '<p>The status of this <code>NotificationConfiguration</code>.</p>', 'ListNotificationConfigurationsRequest$status' => '<p>The <code>NotificationConfiguration</code> status to match.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ACTIVE</code> </p> <ul> <li> <p>All <code>EventRules</code> are <code>ACTIVE</code> and any call can be run.</p> </li> </ul> </li> <li> <p> <code>PARTIALLY_ACTIVE</code> </p> <ul> <li> <p>Some <code>EventRules</code> are <code>ACTIVE</code> and some are <code>INACTIVE</code>. Any call can be run.</p> </li> <li> <p>Any call can be run.</p> </li> </ul> </li> <li> <p> <code>INACTIVE</code> </p> <ul> <li> <p>All <code>EventRules</code> are <code>INACTIVE</code> and any call can be run.</p> </li> </ul> </li> <li> <p> <code>DELETING</code> </p> <ul> <li> <p>This <code>NotificationConfiguration</code> is being deleted.</p> </li> <li> <p>Only <code>GET</code> and <code>LIST</code> calls can be run.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationConfigurationStructure$status' => '<p>The current status of the <code>NotificationConfiguration</code>.</p>', ], ], 'NotificationConfigurationStructure' => [ 'base' => '<p>Contains the complete list of fields for a NotificationConfiguration.</p>', 'refs' => [ 'NotificationConfigurations$member' => NULL, ], ], 'NotificationConfigurations' => [ 'base' => NULL, 'refs' => [ 'ListNotificationConfigurationsResponse$notificationConfigurations' => '<p>The <code>NotificationConfigurations</code> in the account.</p>', ], ], 'NotificationEvent' => [ 'base' => '<p>A <code>NotificationEvent</code> is a notification-focused representation of an event. They contain semantic information used by Channels to create end-user notifications.</p>', 'refs' => [ 'GetNotificationEventResponse$content' => '<p>The content of the <code>NotificationEvent</code>.</p>', ], ], 'NotificationEventArn' => [ 'base' => NULL, 'refs' => [ 'GetNotificationEventRequest$arn' => '<p>The Amazon Resource Name (ARN) of the <code>NotificationEvent</code> to return.</p>', 'GetNotificationEventResponse$arn' => '<p>The ARN of the resource.</p>', 'ListNotificationEventsRequest$aggregateNotificationEventArn' => '<p>The Amazon Resource Name (ARN) of the <code>aggregatedNotificationEventArn</code> to match.</p>', 'NotificationEvent$aggregateNotificationEventArn' => '<p>If the value of <code>aggregationEventType</code> is not <code>NONE</code>, this is the Amazon Resource Event (ARN) of the parent aggregate notification.</p> <p>This is omitted if notification isn\'t aggregated.</p>', 'NotificationEventOverview$arn' => '<p>The Amazon Resource Name (ARN) of the resource.</p>', 'NotificationEventOverview$aggregateNotificationEventArn' => '<p>The ARN of the <code>aggregatedNotificationEventArn</code> to match.</p>', ], ], 'NotificationEventId' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChildEvent$id' => '<p>The unique identifier for a Managed Notification Child Event.</p>', 'ManagedNotificationEvent$id' => '<p>Unique identifier for a <code>ManagedNotificationEvent</code>.</p>', 'NotificationEvent$id' => '<p>The unique identifier for a <code>NotificationEvent</code>.</p>', ], ], 'NotificationEventOverview' => [ 'base' => '<p>Describes a short summary of a <code>NotificationEvent</code>. This is only used when listing notification events.</p>', 'refs' => [ 'NotificationEvents$member' => NULL, ], ], 'NotificationEventSummary' => [ 'base' => '<p>Describes a short summary and metadata for a <code>NotificationEvent</code>.</p>', 'refs' => [ 'NotificationEventOverview$notificationEvent' => '<p>Refers to a <code>NotificationEventSummary</code> object.</p> <p>Similar in structure to <code>content</code> in the <code>GetNotificationEvent</code> response.</p>', ], ], 'NotificationEvents' => [ 'base' => NULL, 'refs' => [ 'ListNotificationEventsResponse$notificationEvents' => '<p>The list of notification events.</p>', ], ], 'NotificationHubOverview' => [ 'base' => '<p>Describes an overview of a <code>NotificationHub</code>.</p> <p>A <code>NotificationConfiguration</code> is an account-level setting used to select the Regions where you want to store, process and replicate your notifications.</p>', 'refs' => [ 'NotificationHubs$member' => NULL, ], ], 'NotificationHubStatus' => [ 'base' => NULL, 'refs' => [ 'NotificationHubStatusSummary$status' => '<p>Status information about the <code>NotificationHub</code>.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ACTIVE</code> </p> <ul> <li> <p>Incoming <code>NotificationEvents</code> are replicated to this <code>NotificationHub</code>.</p> </li> </ul> </li> <li> <p> <code>REGISTERING</code> </p> <ul> <li> <p>The <code>NotificationConfiguration</code> is initializing. A <code>NotificationConfiguration</code> with this status can\'t be deregistered.</p> </li> </ul> </li> <li> <p> <code>DEREGISTERING</code> </p> <ul> <li> <p>The <code>NotificationConfiguration</code> is being deleted. You can\'t register additional <code>NotificationHubs</code> in the same Region as a <code>NotificationConfiguration</code> with this status.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'NotificationHubStatusReason' => [ 'base' => NULL, 'refs' => [ 'NotificationHubStatusSummary$reason' => '<p>An explanation for the current status.</p>', ], ], 'NotificationHubStatusSummary' => [ 'base' => '<p>Provides additional information about the current <code>NotificationHub</code> status.</p>', 'refs' => [ 'DeregisterNotificationHubResponse$statusSummary' => '<p> <code>NotificationConfiguration</code> status information.</p>', 'NotificationHubOverview$statusSummary' => '<p>The status summary of the resource.</p>', 'RegisterNotificationHubResponse$statusSummary' => '<p>Provides additional information about the current <code>NotificationConfiguration</code> status information.</p>', ], ], 'NotificationHubs' => [ 'base' => NULL, 'refs' => [ 'ListNotificationHubsResponse$notificationHubs' => '<p>The <code>NotificationHubs</code> in the account.</p>', ], ], 'NotificationType' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChildEvent$notificationType' => '<p>The type of event causing the notification.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ALERT</code> </p> <ul> <li> <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p> </li> </ul> </li> <li> <p> <code>WARNING</code> </p> <ul> <li> <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p> </li> </ul> </li> <li> <p> <code>ANNOUNCEMENT</code> </p> <ul> <li> <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p> </li> </ul> </li> <li> <p> <code>INFORMATIONAL</code> </p> <ul> <li> <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p> </li> </ul> </li> </ul> </li> </ul>', 'ManagedNotificationChildEventSummary$notificationType' => '<p>The Type of the event causing this notification.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ALERT</code> </p> <ul> <li> <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p> </li> </ul> </li> <li> <p> <code>WARNING</code> </p> <ul> <li> <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p> </li> </ul> </li> <li> <p> <code>ANNOUNCEMENT</code> </p> <ul> <li> <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p> </li> </ul> </li> <li> <p> <code>INFORMATIONAL</code> </p> <ul> <li> <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p> </li> </ul> </li> </ul> </li> </ul>', 'ManagedNotificationEvent$notificationType' => '<p>The nature of the event causing this notification.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ALERT</code> </p> <ul> <li> <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p> </li> </ul> </li> <li> <p> <code>WARNING</code> </p> <ul> <li> <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p> </li> </ul> </li> <li> <p> <code>ANNOUNCEMENT</code> </p> <ul> <li> <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p> </li> </ul> </li> <li> <p> <code>INFORMATIONAL</code> </p> <ul> <li> <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p> </li> </ul> </li> </ul> </li> </ul>', 'ManagedNotificationEventSummary$notificationType' => '<p>The Type of event causing the notification.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ALERT</code> </p> <ul> <li> <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p> </li> </ul> </li> <li> <p> <code>WARNING</code> </p> <ul> <li> <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p> </li> </ul> </li> <li> <p> <code>ANNOUNCEMENT</code> </p> <ul> <li> <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p> </li> </ul> </li> <li> <p> <code>INFORMATIONAL</code> </p> <ul> <li> <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationEvent$notificationType' => '<p>The type of event causing the notification.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ALERT</code> </p> <ul> <li> <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p> </li> </ul> </li> <li> <p> <code>WARNING</code> </p> <ul> <li> <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p> </li> </ul> </li> <li> <p> <code>ANNOUNCEMENT</code> </p> <ul> <li> <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p> </li> </ul> </li> <li> <p> <code>INFORMATIONAL</code> </p> <ul> <li> <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p> </li> </ul> </li> </ul> </li> </ul>', 'NotificationEventSummary$notificationType' => '<p>The type of event causing the notification.</p> <ul> <li> <p>Values:</p> <ul> <li> <p> <code>ALERT</code> </p> <ul> <li> <p>A notification about an event where something was triggered, initiated, reopened, deployed, or a threshold was breached.</p> </li> </ul> </li> <li> <p> <code>WARNING</code> </p> <ul> <li> <p>A notification about an event where an issue is about to arise. For example, something is approaching a threshold.</p> </li> </ul> </li> <li> <p> <code>ANNOUNCEMENT</code> </p> <ul> <li> <p>A notification about an important event. For example, a step in a workflow or escalation path or that a workflow was updated.</p> </li> </ul> </li> <li> <p> <code>INFORMATIONAL</code> </p> <ul> <li> <p>A notification about informational messages. For example, recommendations, service announcements, or reminders.</p> </li> </ul> </li> </ul> </li> </ul>', ], ], 'NotificationsAccessForOrganization' => [ 'base' => '<p>Orgs Service trust for User Notifications.</p>', 'refs' => [ 'GetNotificationsAccessForOrganizationResponse$notificationsAccessForOrganization' => '<p>The <code>AccessStatus</code> of Service Trust Enablement for User Notifications to Amazon Web Services Organizations.</p>', ], ], 'OrganizationalUnitId' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChildEventsRequest$organizationalUnitId' => '<p>The identifier of the Amazon Web Services Organizations organizational unit (OU) associated with the Managed Notification Child Events.</p>', 'ListManagedNotificationEventsRequest$organizationalUnitId' => '<p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>', 'ManagedNotificationChildEvent$organizationalUnitId' => '<p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>', 'ManagedNotificationChildEventOverview$organizationalUnitId' => '<p>The Organizational Unit Id that an AWS account belongs to.</p>', 'ManagedNotificationEvent$organizationalUnitId' => '<p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>', 'ManagedNotificationEventOverview$organizationalUnitId' => '<p>The Organizational Unit Id that an Amazon Web Services account belongs to.</p>', ], ], 'QuotaCode' => [ 'base' => NULL, 'refs' => [ 'ServiceQuotaExceededException$quotaCode' => '<p>The code for the service quota in <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a>.</p>', 'ThrottlingException$quotaCode' => '<p>Identifies the quota that is being throttled.</p>', ], ], 'Region' => [ 'base' => NULL, 'refs' => [ 'AggregatedNotificationRegions$member' => NULL, 'DeregisterNotificationHubRequest$notificationHubRegion' => '<p>The <code>NotificationConfiguration</code> Region.</p>', 'DeregisterNotificationHubResponse$notificationHubRegion' => '<p>The <code>NotificationConfiguration</code> Region.</p>', 'NotificationHubOverview$notificationHubRegion' => '<p>The Region of the resource.</p>', 'Regions$member' => NULL, 'RegisterNotificationHubRequest$notificationHubRegion' => '<p>The Region of the <code>NotificationHub</code>.</p>', 'RegisterNotificationHubResponse$notificationHubRegion' => '<p>The Region of the <code>NotificationHub</code>.</p>', 'StatusSummaryByRegion$key' => NULL, ], ], 'Regions' => [ 'base' => NULL, 'refs' => [ 'CreateEventRuleRequest$regions' => '<p>A list of Amazon Web Services Regions that send events to this <code>EventRule</code>.</p>', 'EventRuleStructure$regions' => '<p>A list of Amazon Web Services Regions that send events to this <code>EventRule</code>.</p>', 'GetEventRuleResponse$regions' => '<p>A list of Amazon Web Services Regions that send events to this <code>EventRule</code>.</p>', 'UpdateEventRuleRequest$regions' => '<p>A list of Amazon Web Services Regions that sends events to this <code>EventRule</code>.</p>', ], ], 'RegisterNotificationHubRequest' => [ 'base' => NULL, 'refs' => [], ], 'RegisterNotificationHubResponse' => [ 'base' => NULL, 'refs' => [], ], 'Resource' => [ 'base' => '<p>A resource affected by or closely linked to an event.</p>', 'refs' => [ 'Resources$member' => NULL, ], ], 'ResourceId' => [ 'base' => NULL, 'refs' => [ 'ConflictException$resourceId' => '<p>The resource ID that prompted the conflict error.</p>', 'ResourceNotFoundException$resourceId' => '<p>The ID of the resource that wasn\'t found.</p>', 'ServiceQuotaExceededException$resourceId' => '<p>The ID of the resource that exceeds the service quota.</p>', ], ], 'ResourceNotFoundException' => [ 'base' => '<p>Request references a resource which does not exist. </p>', 'refs' => [], ], 'ResourceType' => [ 'base' => NULL, 'refs' => [ 'ServiceQuotaExceededException$resourceType' => '<p>The type of the resource that exceeds the service quota.</p>', ], ], 'Resources' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadata$relatedResources' => '<p>A list of resources related to this <code>NotificationEvent</code>.</p>', ], ], 'SampleAggregationDimensionValues' => [ 'base' => NULL, 'refs' => [ 'SummarizationDimensionOverview$sampleValues' => '<p>Indicates the sample values found within the dimension.</p>', ], ], 'SampleAggregationDimensionValuesMemberString' => [ 'base' => NULL, 'refs' => [ 'SampleAggregationDimensionValues$member' => NULL, ], ], 'SchemaVersion' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChildEvent$schemaVersion' => '<p>The schema version of the Managed Notification Child Event.</p>', 'ManagedNotificationChildEventSummary$schemaVersion' => '<p>The schema version of the <code>ManagedNotificationChildEvent</code>.</p>', 'ManagedNotificationEvent$schemaVersion' => '<p>Version of the <code>ManagedNotificationEvent</code> schema.</p>', 'ManagedNotificationEventSummary$schemaVersion' => '<p>The schema version of the <code>ManagedNotificationEvent</code>.</p>', 'NotificationEvent$schemaVersion' => '<p>The schema version of the Notification Event.</p>', 'NotificationEventSummary$schemaVersion' => '<p>The schema version of the Notification Event.</p>', ], ], 'ServiceCode' => [ 'base' => NULL, 'refs' => [ 'ServiceQuotaExceededException$serviceCode' => '<p>The code for the service quota exceeded in <a href="https://docs.aws.amazon.com/servicequotas/latest/userguide/intro.html">Service Quotas</a>.</p>', 'ThrottlingException$serviceCode' => '<p>Identifies the service being throttled.</p>', ], ], 'ServiceQuotaExceededException' => [ 'base' => '<p>Request would cause a service quota to be exceeded.</p>', 'refs' => [], ], 'Source' => [ 'base' => NULL, 'refs' => [ 'CreateEventRuleRequest$source' => '<p>The matched event source.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'EventRuleStructure$source' => '<p>The event source this rule should match with the EventBridge event sources. It must match with atleast one of the valid EventBridge event sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i> Amazon EventBridge User Guide</i>.</p>', 'GetEventRuleResponse$source' => '<p>The matched event source.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'ListManagedNotificationEventsRequest$source' => '<p>The Amazon Web Services service the event originates from. For example aws.cloudwatch.</p>', 'ListNotificationConfigurationsRequest$eventRuleSource' => '<p>The matched event source.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'ListNotificationEventsRequest$source' => '<p>The matched event source.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'ManagedSourceEventMetadataSummary$source' => '<p>The source service of the notification.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'SourceEventMetadata$source' => '<p>The Amazon Web Services service the event originates from. For example <code>aws.cloudwatch</code>.</p>', ], ], 'SourceEventMetadata' => [ 'base' => '<p>Describes the metadata for a source event.</p> <p>For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-events-structure.html">Event structure reference</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'refs' => [ 'NotificationEvent$sourceEventMetadata' => '<p>The source event metadata.</p>', ], ], 'SourceEventMetadataEventOriginRegionString' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadata$eventOriginRegion' => '<p>The Region the event originated from.</p>', ], ], 'SourceEventMetadataEventTypeString' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadata$eventType' => '<p>The type of event. For example, an Amazon CloudWatch state change.</p>', ], ], 'SourceEventMetadataEventTypeVersionString' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadata$eventTypeVersion' => '<p>The version of the type of event.</p>', ], ], 'SourceEventMetadataRelatedAccountString' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadata$relatedAccount' => '<p>The primary Amazon Web Services account of <code>SourceEvent</code>.</p>', ], ], 'SourceEventMetadataSummary' => [ 'base' => '<p>Contains metadata about the event that caused the <code>NotificationEvent</code>. For other specific values, see <code>sourceEventMetadata</code>.</p>', 'refs' => [ 'NotificationEventSummary$sourceEventMetadata' => '<p>The source event metadata.</p>', ], ], 'SourceEventMetadataSummaryEventOriginRegionString' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadataSummary$eventOriginRegion' => '<p>The Region where the notification originated.</p> <p>Unavailable for aggregated notifications.</p>', ], ], 'SourceEventMetadataSummaryEventTypeString' => [ 'base' => NULL, 'refs' => [ 'SourceEventMetadataSummary$eventType' => '<p>The event type to match.</p> <p>Must match one of the valid Amazon EventBridge event types. For example, EC2 Instance State-change Notification and Amazon CloudWatch Alarm State Change. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', ], ], 'StatusSummaryByRegion' => [ 'base' => NULL, 'refs' => [ 'CreateEventRuleResponse$statusSummaryByRegion' => '<p>A list of an <code>EventRule</code>\'s status by Region. Regions are mapped to <code>EventRuleStatusSummary</code>.</p>', 'EventRuleStructure$statusSummaryByRegion' => '<p>A list of an <code>EventRule</code>\'s status by Region. Regions are mapped to <code>EventRuleStatusSummary</code>.</p>', 'GetEventRuleResponse$statusSummaryByRegion' => '<p>A list of an <code>EventRule</code>\'s status by Region. Regions are mapped to <code>EventRuleStatusSummary</code>.</p>', 'UpdateEventRuleResponse$statusSummaryByRegion' => '<p>The status of the action by Region.</p>', ], ], 'String' => [ 'base' => NULL, 'refs' => [ 'AggregationKey$name' => '<p>Indicates the type of aggregation key.</p>', 'AggregationKey$value' => '<p>Indicates the value associated with the aggregation key name.</p>', 'GetManagedNotificationConfigurationResponse$category' => '<p>The category of the <code>ManagedNotificationConfiguration</code>.</p>', 'GetManagedNotificationConfigurationResponse$subCategory' => '<p>The subCategory of the <code>ManagedNotificationConfiguration</code>.</p>', 'ManagedNotificationChannelAssociationSummary$channelIdentifier' => '<p>The unique identifier for the notification channel.</p>', 'ManagedNotificationChildEvent$sourceEventDetailUrlDisplayText' => '<p>The detailed URL for the source event.</p>', 'ManagedNotificationEvent$sourceEventDetailUrlDisplayText' => '<p>Text that needs to be hyperlinked with the sourceEventDetailUrl. For example, the description of the sourceEventDetailUrl.</p>', 'NotificationEvent$sourceEventDetailUrlDisplayText' => '<p>The detailed URL for the source event.</p>', 'Resource$id' => '<p>The unique identifier for the resource.</p> <p>At least one id or ARN is required.</p>', 'SourceEventMetadata$sourceEventId' => '<p>The source event id.</p>', 'SourceEventMetadataSummary$source' => '<p>The matched event source.</p> <p>Must match one of the valid EventBridge sources. Only Amazon Web Services service sourced events are supported. For example, <code>aws.ec2</code> and <code>aws.cloudwatch</code>. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-service-event.html#eb-service-event-delivery-level">Event delivery from Amazon Web Services services</a> in the <i>Amazon EventBridge User Guide</i>.</p>', 'SummarizationDimensionDetail$name' => '<p>The name of the SummarizationDimensionDetail.</p>', 'SummarizationDimensionDetail$value' => '<p>Value of the property used to summarize aggregated events.</p>', 'SummarizationDimensionOverview$name' => '<p>Name of the summarization dimension.</p>', 'TextByLocale$value' => NULL, 'ValidationExceptionField$name' => '<p>The field name where the invalid entry was detected.</p>', 'ValidationExceptionField$message' => '<p>A message with the reason for the validation exception error.</p>', ], ], 'SummarizationDimensionDetail' => [ 'base' => '<p>Provides detailed information about the dimensions used for event summarization and aggregation.</p>', 'refs' => [ 'SummarizationDimensionDetails$member' => NULL, ], ], 'SummarizationDimensionDetails' => [ 'base' => NULL, 'refs' => [ 'AggregationDetail$summarizationDimensions' => '<p>Properties used to summarize aggregated events.</p>', ], ], 'SummarizationDimensionOverview' => [ 'base' => '<p>Provides an overview of how data is summarized across different dimensions.</p>', 'refs' => [ 'AggregationSummary$aggregatedAccounts' => '<p>Indicates the Amazon Web Services accounts in the aggregation key.</p>', 'AggregationSummary$aggregatedRegions' => '<p>Indicates the Amazon Web Services Regions in the aggregation key.</p>', 'AggregationSummary$aggregatedOrganizationalUnits' => '<p>Indicates the collection of organizational units that are involved in the aggregation key.</p>', 'SummarizationDimensionOverviews$member' => NULL, ], ], 'SummarizationDimensionOverviews' => [ 'base' => NULL, 'refs' => [ 'AggregationSummary$additionalSummarizationDimensions' => '<p>List of additional dimensions used to group and summarize data.</p>', ], ], 'SyntheticTimestamp_date_time' => [ 'base' => NULL, 'refs' => [ 'ListManagedNotificationChildEventsRequest$startTime' => '<p>The earliest time of events to return from this call.</p>', 'ListManagedNotificationChildEventsRequest$endTime' => '<p>Latest time of events to return from this call.</p>', 'ListManagedNotificationEventsRequest$startTime' => '<p>The earliest time of events to return from this call.</p>', 'ListManagedNotificationEventsRequest$endTime' => '<p>Latest time of events to return from this call.</p>', 'ListNotificationEventsRequest$startTime' => '<p>The earliest time of events to return from this call.</p>', 'ListNotificationEventsRequest$endTime' => '<p>Latest time of events to return from this call.</p>', 'ManagedNotificationChildEvent$startTime' => '<p>The notification event start time.</p>', 'ManagedNotificationChildEvent$endTime' => '<p>The end time of the event.</p>', 'ManagedNotificationEvent$startTime' => '<p>The earliest time of events to return from this call.</p>', 'ManagedNotificationEvent$endTime' => '<p>The end time of the notification event.</p>', 'NotificationEvent$startTime' => '<p>The notification event start time.</p>', 'NotificationEvent$endTime' => '<p>The end time of the event.</p>', 'SourceEventMetadata$eventOccurrenceTime' => '<p>The date and time the source event occurred. This is based on the Source Event.</p>', ], ], 'TagKey' => [ 'base' => NULL, 'refs' => [ 'TagKeys$member' => NULL, 'TagMap$key' => NULL, ], ], 'TagKeys' => [ 'base' => NULL, 'refs' => [ 'UntagResourceRequest$tagKeys' => '<p>The tag keys to use to untag a resource.</p>', ], ], 'TagMap' => [ 'base' => NULL, 'refs' => [ 'CreateNotificationConfigurationRequest$tags' => '<p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>', 'ListTagsForResourceResponse$tags' => '<p>A list of tags for the specified ARN.</p>', 'TagResourceRequest$tags' => '<p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>', ], ], 'TagResourceRequest' => [ 'base' => NULL, 'refs' => [], ], 'TagResourceResponse' => [ 'base' => NULL, 'refs' => [], ], 'TagValue' => [ 'base' => NULL, 'refs' => [ 'TagMap$value' => NULL, ], ], 'Tags' => [ 'base' => NULL, 'refs' => [ 'Resource$tags' => '<p>A map of tags assigned to a resource. A tag is a string-to-string map of key-value pairs.</p>', ], ], 'TagsMemberString' => [ 'base' => NULL, 'refs' => [ 'Tags$member' => NULL, ], ], 'TextByLocale' => [ 'base' => NULL, 'refs' => [ 'TextPartValue$textByLocale' => '<p>A map of locales to the text in that locale.</p>', ], ], 'TextPartId' => [ 'base' => NULL, 'refs' => [ 'TextParts$key' => NULL, ], ], 'TextPartReference' => [ 'base' => NULL, 'refs' => [ 'Dimension$name' => '<p>The name of the dimension</p>', 'Dimension$value' => '<p>The value of the dimension.</p>', 'MediaElement$caption' => '<p>The caption of the media.</p>', 'MessageComponents$headline' => '<p>A sentence long summary. For example, titles or an email subject line.</p>', 'MessageComponents$paragraphSummary' => '<p>A paragraph long or multiple sentence summary. For example, Chatbot notifications.</p>', 'MessageComponents$completeDescription' => '<p>A complete summary with all possible relevant information.</p>', ], ], 'TextPartType' => [ 'base' => NULL, 'refs' => [ 'TextPartValue$type' => '<p>The type of text part. Determines the usage of all other fields and whether or not they\'re required.</p>', ], ], 'TextPartValue' => [ 'base' => '<p>Describes text information objects containing fields that determine how text part objects are composed.</p>', 'refs' => [ 'TextParts$value' => NULL, ], ], 'TextPartValueDisplayTextString' => [ 'base' => NULL, 'refs' => [ 'TextPartValue$displayText' => '<p>A short single line description of the link. Must be hyper-linked with the URL itself. </p> <p>Used for text parts with the type <code>URL</code>.</p>', ], ], 'TextParts' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChildEvent$textParts' => '<p>A list of text values.</p>', 'ManagedNotificationEvent$textParts' => '<p>A list of text values.</p>', 'NotificationEvent$textParts' => '<p>A list of text values.</p>', ], ], 'ThrottlingException' => [ 'base' => '<p>Request was denied due to request throttling. </p>', 'refs' => [], ], 'UntagResourceRequest' => [ 'base' => NULL, 'refs' => [], ], 'UntagResourceResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateEventRuleRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateEventRuleResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateNotificationConfigurationRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateNotificationConfigurationResponse' => [ 'base' => NULL, 'refs' => [], ], 'Url' => [ 'base' => NULL, 'refs' => [ 'ManagedNotificationChildEvent$sourceEventDetailUrl' => '<p>The source event URL.</p>', 'ManagedNotificationEvent$sourceEventDetailUrl' => '<p>URL defined by Source Service to be used by notification consumers to get additional information about event.</p>', 'MediaElement$url' => '<p>The URL of the media.</p>', 'NotificationEvent$sourceEventDetailUrl' => '<p>The source event URL.</p>', 'Resource$detailUrl' => '<p>The URL to the resource\'s detail page. If a detail page URL is unavailable, it is the URL to an informational page that describes the resource\'s type.</p>', 'TextPartValue$url' => '<p>The URL itself.</p>', ], ], 'ValidationException' => [ 'base' => '<p>This exception is thrown when the notification event fails validation.</p>', 'refs' => [], ], 'ValidationExceptionField' => [ 'base' => '<p>Stores information about a field passed inside a request that resulted in an exception.</p>', 'refs' => [ 'ValidationExceptionFieldList$member' => NULL, ], ], 'ValidationExceptionFieldList' => [ 'base' => NULL, 'refs' => [ 'ValidationException$fieldList' => '<p>The list of input fields that are invalid.</p>', ], ], 'ValidationExceptionReason' => [ 'base' => NULL, 'refs' => [ 'ValidationException$reason' => '<p>The reason why your input is considered invalid.</p>', ], ], ],];
