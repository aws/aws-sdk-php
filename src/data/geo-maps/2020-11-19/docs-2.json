{
  "version": "2.0",
  "service": "<p> Integrate high-quality base map data into your applications using <a href=\"https://maplibre.org\">MapLibre</a>. Capabilities include: </p> <ul> <li> <p>Access to comprehensive base map data, allowing you to tailor the map display to your specific needs.</p> </li> <li> <p>Multiple pre-designed map styles suited for various application types, such as navigation, logistics, or data visualization.</p> </li> <li> <p>Generation of static map images for scenarios where interactive maps aren't suitable, such as:</p> <ul> <li> <p>Embedding in emails or documents</p> </li> <li> <p>Displaying in low-bandwidth environments</p> </li> <li> <p>Creating printable maps</p> </li> <li> <p>Enhancing application performance by reducing client-side rendering</p> </li> </ul> </li> </ul>",
  "operations": {
    "GetGlyphs": "<p> <code>GetGlyphs</code> returns the map's glyphs.</p>",
    "GetSprites": "<p> <code>GetSprites</code> returns the map's sprites.</p>",
    "GetStaticMap": "<p> <code>GetStaticMap</code> provides high-quality static map images with customizable options. You can modify the map's appearance and overlay additional information. It's an ideal solution for applications requiring tailored static map snapshots.</p>",
    "GetStyleDescriptor": "<p> <code>GetStyleDescriptor</code> returns information about the style.</p>",
    "GetTile": "<p> <code>GetTile</code> returns a tile. Map tiles are used by clients to render a map. they're addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level.</p>"
  },
  "shapes": {
    "AccessDeniedException": {
      "base": "<p>The request was denied because of insufficient access or permissions. Check with an administrator to verify your permissions.</p>",
      "refs": {}
    },
    "ApiKey": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Key": "<p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request. </p>",
        "GetStyleDescriptorRequest$Key": "<p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request. </p>",
        "GetTileRequest$Key": "<p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request. </p>"
      }
    },
    "Blob": {
      "base": null,
      "refs": {
        "GetGlyphsResponse$Blob": "<p>The Glyph, as a binary blob.</p>",
        "GetSpritesResponse$Blob": "<p>The body of the sprite sheet or JSON offset file (image/png or application/json, depending on input).</p>",
        "GetStaticMapResponse$Blob": "<p>The blob represents a map image as a <code>jpeg</code> for the <code>GetStaticMap</code> API.</p>",
        "GetStyleDescriptorResponse$Blob": "<p>This Blob contains the body of the style descriptor which is in application/json format.</p>",
        "GetTileResponse$Blob": "<p>The blob represents a vector tile in <code>mvt</code> or a raster tile in an image format.</p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$CropLabels": "<p>It is a flag that takes in true or false. It prevents the labels that are on the edge of the image from being cut or obscured.</p>"
      }
    },
    "ColorScheme": {
      "base": null,
      "refs": {
        "GetSpritesRequest$ColorScheme": "<p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p> <p>Example: <code>Light</code> </p> <p>Default value: <code>Light</code> </p> <note> <p>Valid values for ColorScheme are case sensitive.</p> </note>",
        "GetStaticMapRequest$ColorScheme": "<p>Sets color tone for map, such as dark and light for specific map styles. It only applies to vector map styles, such as Standard.</p> <p>Example: <code>Light</code> </p> <p>Default value: <code>Light</code> </p> <note> <p>Valid values for <code>ColorScheme</code> are case sensitive.</p> </note>",
        "GetStyleDescriptorRequest$ColorScheme": "<p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p> <p>Example: <code>Light</code> </p> <p>Default value: <code>Light</code> </p> <note> <p>Valid values for ColorScheme are case sensitive.</p> </note>"
      }
    },
    "CompactOverlay": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$CompactOverlay": "<p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>[Lon, Lat]</code> </p> <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code> </p> <note> <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p> </note>"
      }
    },
    "CountryCode": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$PoliticalView": "<p>Specifies the political view, using ISO 3166-2 or ISO 3166-3 country code format.</p> <p>The following political views are currently supported:</p> <ul> <li> <p> <code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p> </li> <li> <p> <code>EGY</code>: Egypt's view on Bir Tawil</p> </li> <li> <p> <code>IND</code>: India's view on Gilgit-Baltistan</p> </li> <li> <p> <code>KEN</code>: Kenya's view on the Ilemi Triangle</p> </li> <li> <p> <code>MAR</code>: Morocco's view on Western Sahara</p> </li> <li> <p> <code>RUS</code>: Russia's view on Crimea</p> </li> <li> <p> <code>SDN</code>: Sudan's view on the Halaib Triangle</p> </li> <li> <p> <code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p> </li> <li> <p> <code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p> </li> <li> <p> <code>SYR</code>: Syria's view on the Golan Heights</p> </li> <li> <p> <code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p> </li> <li> <p> <code>TZA</code>: Tanzania's view on Lake Malawi</p> </li> <li> <p> <code>URY</code>: Uruguay's view on Rincon de Artigas</p> </li> <li> <p> <code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p> </li> </ul>",
        "GetStyleDescriptorRequest$PoliticalView": "<p>Specifies the political view using ISO 3166-2 or ISO 3166-3 country code format.</p> <p>The following political views are currently supported:</p> <ul> <li> <p> <code>ARG</code>: Argentina's view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p> </li> <li> <p> <code>EGY</code>: Egypt's view on Bir Tawil</p> </li> <li> <p> <code>IND</code>: India's view on Gilgit-Baltistan</p> </li> <li> <p> <code>KEN</code>: Kenya's view on the Ilemi Triangle</p> </li> <li> <p> <code>MAR</code>: Morocco's view on Western Sahara</p> </li> <li> <p> <code>RUS</code>: Russia's view on Crimea</p> </li> <li> <p> <code>SDN</code>: Sudan's view on the Halaib Triangle</p> </li> <li> <p> <code>SRB</code>: Serbia's view on Kosovo, Vukovar, and Sarengrad Islands</p> </li> <li> <p> <code>SUR</code>: Suriname's view on the Courantyne Headwaters and Lawa Headwaters</p> </li> <li> <p> <code>SYR</code>: Syria's view on the Golan Heights</p> </li> <li> <p> <code>TUR</code>: Turkey's view on Cyprus and Northern Cyprus</p> </li> <li> <p> <code>TZA</code>: Tanzania's view on Lake Malawi</p> </li> <li> <p> <code>URY</code>: Uruguay's view on Rincon de Artigas</p> </li> <li> <p> <code>VNM</code>: Vietnam's view on the Paracel Islands and Spratly Islands</p> </li> </ul>"
      }
    },
    "DistanceMeters": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Radius": "<p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>. </p> <p>Example: <code>1500</code> </p> <note> <p>Cannot be used with <code>Zoom</code>.</p> </note> <p> <b>Unit</b>: <code>Meters</code> </p> <p/>"
      }
    },
    "GeoJsonOverlay": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$GeoJsonOverlay": "<p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object. </p> <p>Example: <code>{\"type\":\"FeatureCollection\",\"features\": [{\"type\":\"Feature\",\"geometry\":{\"type\":\"MultiPoint\",\"coordinates\": [[-90.076345,51.504107],[-0.074451,51.506892]]},\"properties\": {\"color\":\"#00DD00\"}}]}</code> </p>"
      }
    },
    "GetGlyphsRequest": {
      "base": null,
      "refs": {}
    },
    "GetGlyphsRequestFontStackString": {
      "base": null,
      "refs": {
        "GetGlyphsRequest$FontStack": "<p>Name of the <code>FontStack</code> to retrieve. </p> <p>Example: <code>Amazon Ember Bold,Noto Sans Bold</code>.</p> <p>The supported font stacks are as follows:</p> <ul> <li> <p>Amazon Ember Bold</p> </li> <li> <p>Amazon Ember Bold Italic</p> </li> <li> <p>Amazon Ember Bold,Noto Sans Bold</p> </li> <li> <p>Amazon Ember Bold,Noto Sans Bold,Noto Sans Arabic Bold</p> </li> <li> <p>Amazon Ember Condensed RC BdItalic</p> </li> <li> <p>Amazon Ember Condensed RC Bold</p> </li> <li> <p>Amazon Ember Condensed RC Bold Italic</p> </li> <li> <p>Amazon Ember Condensed RC Bold,Noto Sans Bold</p> </li> <li> <p>Amazon Ember Condensed RC Bold,Noto Sans Bold,Noto Sans Arabic Condensed Bold</p> </li> <li> <p>Amazon Ember Condensed RC Light</p> </li> <li> <p>Amazon Ember Condensed RC Light Italic</p> </li> <li> <p>Amazon Ember Condensed RC LtItalic</p> </li> <li> <p>Amazon Ember Condensed RC Regular</p> </li> <li> <p>Amazon Ember Condensed RC Regular Italic</p> </li> <li> <p>Amazon Ember Condensed RC Regular,Noto Sans Regular</p> </li> <li> <p>Amazon Ember Condensed RC Regular,Noto Sans Regular,Noto Sans Arabic Condensed Regular</p> </li> <li> <p>Amazon Ember Condensed RC RgItalic</p> </li> <li> <p>Amazon Ember Condensed RC ThItalic</p> </li> <li> <p>Amazon Ember Condensed RC Thin</p> </li> <li> <p>Amazon Ember Condensed RC Thin Italic</p> </li> <li> <p>Amazon Ember Heavy</p> </li> <li> <p>Amazon Ember Heavy Italic</p> </li> <li> <p>Amazon Ember Light</p> </li> <li> <p>Amazon Ember Light Italic</p> </li> <li> <p>Amazon Ember Medium</p> </li> <li> <p>Amazon Ember Medium Italic</p> </li> <li> <p>Amazon Ember Medium,Noto Sans Medium</p> </li> <li> <p>Amazon Ember Medium,Noto Sans Medium,Noto Sans Arabic Medium</p> </li> <li> <p>Amazon Ember Regular</p> </li> <li> <p>Amazon Ember Regular Italic</p> </li> <li> <p>Amazon Ember Regular Italic,Noto Sans Italic</p> </li> <li> <p>Amazon Ember Regular Italic,Noto Sans Italic,Noto Sans Arabic Regular</p> </li> <li> <p>Amazon Ember Regular,Noto Sans Regular</p> </li> <li> <p>Amazon Ember Regular,Noto Sans Regular,Noto Sans Arabic Regular</p> </li> <li> <p>Amazon Ember Thin</p> </li> <li> <p>Amazon Ember Thin Italic</p> </li> <li> <p>AmazonEmberCdRC_Bd</p> </li> <li> <p>AmazonEmberCdRC_BdIt</p> </li> <li> <p>AmazonEmberCdRC_Lt</p> </li> <li> <p>AmazonEmberCdRC_LtIt</p> </li> <li> <p>AmazonEmberCdRC_Rg</p> </li> <li> <p>AmazonEmberCdRC_RgIt</p> </li> <li> <p>AmazonEmberCdRC_Th</p> </li> <li> <p>AmazonEmberCdRC_ThIt</p> </li> <li> <p>AmazonEmber_Bd</p> </li> <li> <p>AmazonEmber_BdIt</p> </li> <li> <p>AmazonEmber_He</p> </li> <li> <p>AmazonEmber_HeIt</p> </li> <li> <p>AmazonEmber_Lt</p> </li> <li> <p>AmazonEmber_LtIt</p> </li> <li> <p>AmazonEmber_Md</p> </li> <li> <p>AmazonEmber_MdIt</p> </li> <li> <p>AmazonEmber_Rg</p> </li> <li> <p>AmazonEmber_RgIt</p> </li> <li> <p>AmazonEmber_Th</p> </li> <li> <p>AmazonEmber_ThIt</p> </li> <li> <p>Noto Sans Black</p> </li> <li> <p>Noto Sans Black Italic</p> </li> <li> <p>Noto Sans Bold</p> </li> <li> <p>Noto Sans Bold Italic</p> </li> <li> <p>Noto Sans Extra Bold</p> </li> <li> <p>Noto Sans Extra Bold Italic</p> </li> <li> <p>Noto Sans Extra Light</p> </li> <li> <p>Noto Sans Extra Light Italic</p> </li> <li> <p>Noto Sans Italic</p> </li> <li> <p>Noto Sans Light</p> </li> <li> <p>Noto Sans Light Italic</p> </li> <li> <p>Noto Sans Medium</p> </li> <li> <p>Noto Sans Medium Italic</p> </li> <li> <p>Noto Sans Regular</p> </li> <li> <p>Noto Sans Semi Bold</p> </li> <li> <p>Noto Sans Semi Bold Italic</p> </li> <li> <p>Noto Sans Thin</p> </li> <li> <p>Noto Sans Thin Italic</p> </li> <li> <p>NotoSans-Bold</p> </li> <li> <p>NotoSans-Italic</p> </li> <li> <p>NotoSans-Medium</p> </li> <li> <p>NotoSans-Regular</p> </li> <li> <p>Open Sans Regular,Arial Unicode MS Regular</p> </li> </ul>"
      }
    },
    "GetGlyphsRequestFontUnicodeRangeString": {
      "base": null,
      "refs": {
        "GetGlyphsRequest$FontUnicodeRange": "<p>A Unicode range of characters to download glyphs for. This must be aligned to multiples of 256. </p> <p>Example: <code>0-255.pdf</code> </p>"
      }
    },
    "GetGlyphsResponse": {
      "base": null,
      "refs": {}
    },
    "GetSpritesRequest": {
      "base": null,
      "refs": {}
    },
    "GetSpritesRequestFileNameString": {
      "base": null,
      "refs": {
        "GetSpritesRequest$FileName": "<p> <code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\\.(png|json)</code>.</p> <p>Example: <code>sprites.png</code> </p>"
      }
    },
    "GetSpritesResponse": {
      "base": null,
      "refs": {}
    },
    "GetStaticMapRequest": {
      "base": null,
      "refs": {}
    },
    "GetStaticMapRequestFileNameString": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$FileName": "<p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p> <p>Example: <code>map, map@2x</code> </p>"
      }
    },
    "GetStaticMapRequestHeightInteger": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Height": "<p>Specifies the height of the map image.</p>"
      }
    },
    "GetStaticMapRequestWidthInteger": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Width": "<p>Specifies the width of the map image.</p>"
      }
    },
    "GetStaticMapRequestZoomFloat": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Zoom": "<p>Specifies the zoom level of the map image.</p> <note> <p>Cannot be used with <code>Radius</code>.</p> </note>"
      }
    },
    "GetStaticMapResponse": {
      "base": null,
      "refs": {}
    },
    "GetStyleDescriptorRequest": {
      "base": null,
      "refs": {}
    },
    "GetStyleDescriptorResponse": {
      "base": null,
      "refs": {}
    },
    "GetTileRequest": {
      "base": null,
      "refs": {}
    },
    "GetTileRequestXString": {
      "base": null,
      "refs": {
        "GetTileRequest$X": "<p>The X axis value for the map tile. Must be between 0 and 19.</p>"
      }
    },
    "GetTileRequestYString": {
      "base": null,
      "refs": {
        "GetTileRequest$Y": "<p>The Y axis value for the map tile.</p>"
      }
    },
    "GetTileRequestZString": {
      "base": null,
      "refs": {
        "GetTileRequest$Z": "<p>The zoom value for the map tile.</p>"
      }
    },
    "GetTileResponse": {
      "base": null,
      "refs": {}
    },
    "InternalServerException": {
      "base": "<p>The request processing has failed because of an unknown error, exception or failure.</p>",
      "refs": {}
    },
    "LabelSize": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$LabelSize": "<p>Overrides the label size auto-calculated by <code>FileName</code>. Takes in one of the values - <code>Small</code> or <code>Large</code>.</p>"
      }
    },
    "LanguageTag": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Language": "<p>Specifies the language on the map labels using the BCP 47 language tag, limited to ISO 639-1 two-letter language codes. If the specified language data isn't available for the map image, the labels will default to the regional primary language.</p> <p>Supported codes:</p> <ul> <li> <p> <code>ar</code> </p> </li> <li> <p> <code>as</code> </p> </li> <li> <p> <code>az</code> </p> </li> <li> <p> <code>be</code> </p> </li> <li> <p> <code>bg</code> </p> </li> <li> <p> <code>bn</code> </p> </li> <li> <p> <code>bs</code> </p> </li> <li> <p> <code>ca</code> </p> </li> <li> <p> <code>cs</code> </p> </li> <li> <p> <code>cy</code> </p> </li> <li> <p> <code>da</code> </p> </li> <li> <p> <code>de</code> </p> </li> <li> <p> <code>el</code> </p> </li> <li> <p> <code>en</code> </p> </li> <li> <p> <code>es</code> </p> </li> <li> <p> <code>et</code> </p> </li> <li> <p> <code>eu</code> </p> </li> <li> <p> <code>fi</code> </p> </li> <li> <p> <code>fo</code> </p> </li> <li> <p> <code>fr</code> </p> </li> <li> <p> <code>ga</code> </p> </li> <li> <p> <code>gl</code> </p> </li> <li> <p> <code>gn</code> </p> </li> <li> <p> <code>gu</code> </p> </li> <li> <p> <code>he</code> </p> </li> <li> <p> <code>hi</code> </p> </li> <li> <p> <code>hr</code> </p> </li> <li> <p> <code>hu</code> </p> </li> <li> <p> <code>hy</code> </p> </li> <li> <p> <code>id</code> </p> </li> <li> <p> <code>is</code> </p> </li> <li> <p> <code>it</code> </p> </li> <li> <p> <code>ja</code> </p> </li> <li> <p> <code>ka</code> </p> </li> <li> <p> <code>kk</code> </p> </li> <li> <p> <code>km</code> </p> </li> <li> <p> <code>kn</code> </p> </li> <li> <p> <code>ko</code> </p> </li> <li> <p> <code>ky</code> </p> </li> <li> <p> <code>lt</code> </p> </li> <li> <p> <code>lv</code> </p> </li> <li> <p> <code>mk</code> </p> </li> <li> <p> <code>ml</code> </p> </li> <li> <p> <code>mr</code> </p> </li> <li> <p> <code>ms</code> </p> </li> <li> <p> <code>mt</code> </p> </li> <li> <p> <code>my</code> </p> </li> <li> <p> <code>nl</code> </p> </li> <li> <p> <code>no</code> </p> </li> <li> <p> <code>or</code> </p> </li> <li> <p> <code>pa</code> </p> </li> <li> <p> <code>pl</code> </p> </li> <li> <p> <code>pt</code> </p> </li> <li> <p> <code>ro</code> </p> </li> <li> <p> <code>ru</code> </p> </li> <li> <p> <code>sk</code> </p> </li> <li> <p> <code>sl</code> </p> </li> <li> <p> <code>sq</code> </p> </li> <li> <p> <code>sr</code> </p> </li> <li> <p> <code>sv</code> </p> </li> <li> <p> <code>ta</code> </p> </li> <li> <p> <code>te</code> </p> </li> <li> <p> <code>th</code> </p> </li> <li> <p> <code>tr</code> </p> </li> <li> <p> <code>uk</code> </p> </li> <li> <p> <code>uz</code> </p> </li> <li> <p> <code>vi</code> </p> </li> <li> <p> <code>zh</code> </p> </li> </ul>"
      }
    },
    "MapFeatureMode": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$PointsOfInterests": "<p>Determines if the result image will display icons representing points of interest on the map.</p>"
      }
    },
    "MapStyle": {
      "base": null,
      "refs": {
        "GetSpritesRequest$Style": "<p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>",
        "GetStyleDescriptorRequest$Style": "<p>Style specifies the desired map style.</p>"
      }
    },
    "PositionListString": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$BoundingBox": "<p>Takes in two pairs of coordinates, [Lon, Lat], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image. </p> <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>",
        "GetStaticMapRequest$BoundedPositions": "<p>Takes in two or more pair of coordinates, [Lon, Lat], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates. </p> <note> <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code> </p> </note> <p>Example: 97.170451,78.039098,99.045536,27.176178</p>"
      }
    },
    "PositionString": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Center": "<p>Takes in a pair of coordinates, [Lon, Lat], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p> <note> <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code> </p> </note> <p>Example: 49.295,-123.108</p>"
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>Exception thrown when the associated resource could not be found.</p>",
      "refs": {}
    },
    "ScaleBarUnit": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$ScaleBarUnit": "<p>Displays a scale on the bottom right of the map image with the unit specified in the input. </p> <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code> </p>"
      }
    },
    "SensitiveInteger": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Padding": "<p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p> <note> <p>Value for max and min is determined by:</p> <p>Min: <code>1</code> </p> <p>Max: <code>min(height, width)/4</code> </p> </note> <p>Example: <code>100</code> </p>"
      }
    },
    "StaticMapStyle": {
      "base": null,
      "refs": {
        "GetStaticMapRequest$Style": "<p> <code>Style</code> specifies the desired map style.</p>"
      }
    },
    "String": {
      "base": null,
      "refs": {
        "AccessDeniedException$Message": null,
        "GetGlyphsResponse$ContentType": "<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>",
        "GetGlyphsResponse$CacheControl": "<p>Header that instructs caching configuration for the client.</p>",
        "GetGlyphsResponse$ETag": "<p>The glyph's Etag.</p>",
        "GetSpritesResponse$ContentType": "<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>",
        "GetSpritesResponse$CacheControl": "<p>Header that instructs caching configuration for the client.</p>",
        "GetSpritesResponse$ETag": "<p>The sprite's Etag.</p>",
        "GetStaticMapResponse$ContentType": "<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>",
        "GetStaticMapResponse$CacheControl": "<p>Header that instructs caching configuration for the client.</p>",
        "GetStaticMapResponse$ETag": "<p>The static map's Etag.</p>",
        "GetStaticMapResponse$PricingBucket": "<p>The pricing bucket for which the request is charged at.</p>",
        "GetStyleDescriptorResponse$ContentType": "<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>",
        "GetStyleDescriptorResponse$CacheControl": "<p>Header that instructs caching configuration for the client.</p>",
        "GetStyleDescriptorResponse$ETag": "<p>The style descriptor's Etag.</p>",
        "GetTileResponse$ContentType": "<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>",
        "GetTileResponse$CacheControl": "<p>Header that instructs caching configuration for the client.</p>",
        "GetTileResponse$ETag": "<p>The pricing bucket for which the request is charged at.</p>",
        "GetTileResponse$PricingBucket": "<p>The pricing bucket for which the request is charged at.</p>",
        "InternalServerException$Message": null,
        "ResourceNotFoundException$Message": null,
        "ThrottlingException$Message": null,
        "ValidationException$Message": null,
        "ValidationExceptionField$Name": "<p>The name of the resource.</p>",
        "ValidationExceptionField$Message": "<p>The error message.</p>"
      }
    },
    "ThrottlingException": {
      "base": "<p>The request was denied due to request throttling.</p>",
      "refs": {}
    },
    "Tileset": {
      "base": null,
      "refs": {
        "GetTileRequest$Tileset": "<p>Specifies the desired tile set.</p> <p>Valid Values: <code>raster.satellite | vector.basemap</code> </p>"
      }
    },
    "ValidationException": {
      "base": "<p>The input fails to satisfy the constraints specified by an AWS service.</p>",
      "refs": {}
    },
    "ValidationExceptionField": {
      "base": "<p>The input fails to satisfy the constraints specified by the Amazon Location service.</p>",
      "refs": {
        "ValidationExceptionFieldList$member": null
      }
    },
    "ValidationExceptionFieldList": {
      "base": null,
      "refs": {
        "ValidationException$FieldList": "<p>A message with the reason for the validation exception error.</p>"
      }
    },
    "ValidationExceptionReason": {
      "base": null,
      "refs": {
        "ValidationException$Reason": "<p>The field where the invalid entry was detected.</p>"
      }
    },
    "Variant": {
      "base": null,
      "refs": {
        "GetSpritesRequest$Variant": "<p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p> <p>Example: <code>Default</code> </p> <note> <p>Valid values for Variant are case sensitive.</p> </note>"
      }
    }
  }
}
