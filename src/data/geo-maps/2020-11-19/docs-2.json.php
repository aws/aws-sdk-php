<?php
// This file was auto-generated from sdk-root/src/data/geo-maps/2020-11-19/docs-2.json
return [ 'version' => '2.0', 'service' => '<p> Integrate high-quality base map data into your applications using <a href="https://maplibre.org">MapLibre</a>. Capabilities include: </p> <ul> <li> <p>Access to comprehensive base map data, allowing you to tailor the map display to your specific needs.</p> </li> <li> <p>Multiple pre-designed map styles suited for various application types, such as navigation, logistics, or data visualization.</p> </li> <li> <p>Generation of static map images for scenarios where interactive maps aren\'t suitable, such as:</p> <ul> <li> <p>Embedding in emails or documents</p> </li> <li> <p>Displaying in low-bandwidth environments</p> </li> <li> <p>Creating printable maps</p> </li> <li> <p>Enhancing application performance by reducing client-side rendering</p> </li> </ul> </li> </ul>', 'operations' => [ 'GetGlyphs' => '<p>Returns the map\'s glyphs.</p>', 'GetSprites' => '<p>Returns the map\'s sprites.</p>', 'GetStaticMap' => '<p>Provides high-quality static map images with customizable options. You can modify the map\'s appearance and overlay additional information. It\'s an ideal solution for applications requiring tailored static map snapshots.</p>', 'GetStyleDescriptor' => '<p>Returns information about the style.</p>', 'GetTile' => '<p>Returns a tile. Map tiles are used by clients to render a map. they\'re addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level.</p>', ], 'shapes' => [ 'AccessDeniedException' => [ 'base' => '<p>The request was denied because of insufficient access or permissions. Check with an administrator to verify your permissions.</p>', 'refs' => [], ], 'ApiKey' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Key' => '<p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request. </p>', 'GetStyleDescriptorRequest$Key' => '<p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request. </p>', 'GetTileRequest$Key' => '<p>Optional: The API key to be used for authorization. Either an API key or valid SigV4 signature must be provided when making a request. </p>', ], ], 'Blob' => [ 'base' => NULL, 'refs' => [ 'GetGlyphsResponse$Blob' => '<p>The Glyph, as a binary blob.</p>', 'GetSpritesResponse$Blob' => '<p>The body of the sprite sheet or JSON offset file (image/png or application/json, depending on input).</p>', 'GetStaticMapResponse$Blob' => '<p>The blob represents a map image as a <code>jpeg</code> for the <code>GetStaticMap</code> API.</p>', 'GetStyleDescriptorResponse$Blob' => '<p>This Blob contains the body of the style descriptor which is in application/json format.</p>', 'GetTileResponse$Blob' => '<p>The blob represents a vector tile in <code>mvt</code> format for the <code>GetTile</code> API.</p>', ], ], 'ColorScheme' => [ 'base' => NULL, 'refs' => [ 'GetSpritesRequest$ColorScheme' => '<p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p> <p>Example: <code>Light</code> </p> <p>Default value: <code>Light</code> </p> <note> <p>Valid values for ColorScheme are case sensitive.</p> </note>', 'GetStyleDescriptorRequest$ColorScheme' => '<p>Sets color tone for map such as dark and light for specific map styles. It applies to only vector map styles such as Standard and Monochrome.</p> <p>Example: <code>Light</code> </p> <p>Default value: <code>Light</code> </p> <note> <p>Valid values for ColorScheme are case sensitive.</p> </note>', ], ], 'CompactOverlay' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$CompactOverlay' => '<p>Takes in a string to draw geometries on the image. The input is a comma separated format as follows format: <code>[Lon, Lat]</code> </p> <p>Example: <code>line:-122.407653,37.798557,-122.413291,37.802443;color=%23DD0000;width=7;outline-color=#00DD00;outline-width=5yd|point:-122.40572,37.80004;label=Fog Hill Market;size=large;text-color=%23DD0000;color=#EE4B2B</code> </p> <note> <p>Currently it supports the following geometry types: point, line and polygon. It does not support multiPoint , multiLine and multiPolgyon.</p> </note>', ], ], 'CountryCode' => [ 'base' => NULL, 'refs' => [ 'GetStyleDescriptorRequest$PoliticalView' => '<p>Specifies the political view using ISO 3166-2 or ISO 3166-3 country code format.</p> <p>The following political views are currently supported:</p> <ul> <li> <p> <code>ARG</code>: Argentina\'s view on the Southern Patagonian Ice Field and Tierra Del Fuego, including the Falkland Islands, South Georgia, and South Sandwich Islands</p> </li> <li> <p> <code>EGY</code>: Egypt\'s view on Bir Tawil</p> </li> <li> <p> <code>IND</code>: India\'s view on Gilgit-Baltistan</p> </li> <li> <p> <code>KEN</code>: Kenya\'s view on the Ilemi Triangle</p> </li> <li> <p> <code>MAR</code>: Morocco\'s view on Western Sahara</p> </li> <li> <p> <code>PAK</code>: Pakistan\'s view on Jammu and Kashmir and the Junagadh Area</p> </li> <li> <p> <code>RUS</code>: Russia\'s view on Crimea</p> </li> <li> <p> <code>SDN</code>: Sudan\'s view on the Halaib Triangle</p> </li> <li> <p> <code>SRB</code>: Serbia\'s view on Kosovo, Vukovar, and Sarengrad Islands</p> </li> <li> <p> <code>SUR</code>: Suriname\'s view on the Courantyne Headwaters and Lawa Headwaters</p> </li> <li> <p> <code>SYR</code>: Syria\'s view on the Golan Heights</p> </li> <li> <p> <code>TUR</code>: Turkey\'s view on Cyprus and Northern Cyprus</p> </li> <li> <p> <code>TZA</code>: Tanzania\'s view on Lake Malawi</p> </li> <li> <p> <code>URY</code>: Uruguay\'s view on Rincon de Artigas</p> </li> <li> <p> <code>VNM</code>: Vietnam\'s view on the Paracel Islands and Spratly Islands</p> </li> </ul>', ], ], 'DistanceMeters' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Radius' => '<p>Used with center parameter, it specifies the zoom of the image where you can control it on a granular level. Takes in any value <code>&gt;= 1</code>. </p> <p>Example: <code>1500</code> </p> <note> <p>Cannot be used with <code>Zoom</code>.</p> </note> <p> <b>Unit</b>: <code>Meters</code> </p> <p/>', ], ], 'GeoJsonOverlay' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$GeoJsonOverlay' => '<p>Takes in a string to draw geometries on the image. The input is a valid GeoJSON collection object. </p> <p>Example: <code>{"type":"FeatureCollection","features": [{"type":"Feature","geometry":{"type":"MultiPoint","coordinates": [[-90.076345,51.504107],[-0.074451,51.506892]]},"properties": {"color":"#00DD00"}}]}</code> </p>', ], ], 'GetGlyphsRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetGlyphsRequestFontStackString' => [ 'base' => NULL, 'refs' => [ 'GetGlyphsRequest$FontStack' => '<p>Name of the <code>FontStack</code> to retrieve. </p> <p>Example: <code>Amazon Ember Bold,Noto Sans Bold</code>.</p> <p>The supported font stacks are as follows:</p> <ul> <li> <p>Amazon Ember Bold</p> </li> <li> <p>Amazon Ember Bold Italic</p> </li> <li> <p>Amazon Ember Bold,Noto Sans Bold</p> </li> <li> <p>Amazon Ember Bold,Noto Sans Bold,Noto Sans Arabic Bold</p> </li> <li> <p>Amazon Ember Condensed RC BdItalic</p> </li> <li> <p>Amazon Ember Condensed RC Bold</p> </li> <li> <p>Amazon Ember Condensed RC Bold Italic</p> </li> <li> <p>Amazon Ember Condensed RC Bold,Noto Sans Bold</p> </li> <li> <p>Amazon Ember Condensed RC Bold,Noto Sans Bold,Noto Sans Arabic Condensed Bold</p> </li> <li> <p>Amazon Ember Condensed RC Light</p> </li> <li> <p>Amazon Ember Condensed RC Light Italic</p> </li> <li> <p>Amazon Ember Condensed RC LtItalic</p> </li> <li> <p>Amazon Ember Condensed RC Regular</p> </li> <li> <p>Amazon Ember Condensed RC Regular Italic</p> </li> <li> <p>Amazon Ember Condensed RC Regular,Noto Sans Regular</p> </li> <li> <p>Amazon Ember Condensed RC Regular,Noto Sans Regular,Noto Sans Arabic Condensed Regular</p> </li> <li> <p>Amazon Ember Condensed RC RgItalic</p> </li> <li> <p>Amazon Ember Condensed RC ThItalic</p> </li> <li> <p>Amazon Ember Condensed RC Thin</p> </li> <li> <p>Amazon Ember Condensed RC Thin Italic</p> </li> <li> <p>Amazon Ember Heavy</p> </li> <li> <p>Amazon Ember Heavy Italic</p> </li> <li> <p>Amazon Ember Light</p> </li> <li> <p>Amazon Ember Light Italic</p> </li> <li> <p>Amazon Ember Medium</p> </li> <li> <p>Amazon Ember Medium Italic</p> </li> <li> <p>Amazon Ember Medium,Noto Sans Medium</p> </li> <li> <p>Amazon Ember Medium,Noto Sans Medium,Noto Sans Arabic Medium</p> </li> <li> <p>Amazon Ember Regular</p> </li> <li> <p>Amazon Ember Regular Italic</p> </li> <li> <p>Amazon Ember Regular Italic,Noto Sans Italic</p> </li> <li> <p>Amazon Ember Regular Italic,Noto Sans Italic,Noto Sans Arabic Regular</p> </li> <li> <p>Amazon Ember Regular,Noto Sans Regular</p> </li> <li> <p>Amazon Ember Regular,Noto Sans Regular,Noto Sans Arabic Regular</p> </li> <li> <p>Amazon Ember Thin</p> </li> <li> <p>Amazon Ember Thin Italic</p> </li> <li> <p>AmazonEmberCdRC_Bd</p> </li> <li> <p>AmazonEmberCdRC_BdIt</p> </li> <li> <p>AmazonEmberCdRC_Lt</p> </li> <li> <p>AmazonEmberCdRC_LtIt</p> </li> <li> <p>AmazonEmberCdRC_Rg</p> </li> <li> <p>AmazonEmberCdRC_RgIt</p> </li> <li> <p>AmazonEmberCdRC_Th</p> </li> <li> <p>AmazonEmberCdRC_ThIt</p> </li> <li> <p>AmazonEmber_Bd</p> </li> <li> <p>AmazonEmber_BdIt</p> </li> <li> <p>AmazonEmber_He</p> </li> <li> <p>AmazonEmber_HeIt</p> </li> <li> <p>AmazonEmber_Lt</p> </li> <li> <p>AmazonEmber_LtIt</p> </li> <li> <p>AmazonEmber_Md</p> </li> <li> <p>AmazonEmber_MdIt</p> </li> <li> <p>AmazonEmber_Rg</p> </li> <li> <p>AmazonEmber_RgIt</p> </li> <li> <p>AmazonEmber_Th</p> </li> <li> <p>AmazonEmber_ThIt</p> </li> <li> <p>Noto Sans Black</p> </li> <li> <p>Noto Sans Black Italic</p> </li> <li> <p>Noto Sans Bold</p> </li> <li> <p>Noto Sans Bold Italic</p> </li> <li> <p>Noto Sans Extra Bold</p> </li> <li> <p>Noto Sans Extra Bold Italic</p> </li> <li> <p>Noto Sans Extra Light</p> </li> <li> <p>Noto Sans Extra Light Italic</p> </li> <li> <p>Noto Sans Italic</p> </li> <li> <p>Noto Sans Light</p> </li> <li> <p>Noto Sans Light Italic</p> </li> <li> <p>Noto Sans Medium</p> </li> <li> <p>Noto Sans Medium Italic</p> </li> <li> <p>Noto Sans Regular</p> </li> <li> <p>Noto Sans Semi Bold</p> </li> <li> <p>Noto Sans Semi Bold Italic</p> </li> <li> <p>Noto Sans Thin</p> </li> <li> <p>Noto Sans Thin Italic</p> </li> <li> <p>NotoSans-Bold</p> </li> <li> <p>NotoSans-Italic</p> </li> <li> <p>NotoSans-Medium</p> </li> <li> <p>NotoSans-Regular</p> </li> <li> <p>Open Sans Regular,Arial Unicode MS Regular</p> </li> </ul>', ], ], 'GetGlyphsRequestFontUnicodeRangeString' => [ 'base' => NULL, 'refs' => [ 'GetGlyphsRequest$FontUnicodeRange' => '<p>A Unicode range of characters to download glyphs for. This must be aligned to multiples of 256. </p> <p>Example: <code>0-255.pdf</code> </p>', ], ], 'GetGlyphsResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetSpritesRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetSpritesRequestFileNameString' => [ 'base' => NULL, 'refs' => [ 'GetSpritesRequest$FileName' => '<p> <code>Sprites</code> API: The name of the sprite ﬁle to retrieve, following pattern <code>sprites(@2x)?\\.(png|json)</code>.</p> <p>Example: <code>sprites.png</code> </p>', ], ], 'GetSpritesResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetStaticMapRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetStaticMapRequestFileNameString' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$FileName' => '<p>The map scaling parameter to size the image, icons, and labels. It follows the pattern of <code>^map(@2x)?$</code>.</p> <p>Example: <code>map, map@2x</code> </p>', ], ], 'GetStaticMapRequestHeightInteger' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Height' => '<p>Specifies the height of the map image.</p>', ], ], 'GetStaticMapRequestWidthInteger' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Width' => '<p>Specifies the width of the map image.</p>', ], ], 'GetStaticMapRequestZoomFloat' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Zoom' => '<p>Specifies the zoom level of the map image.</p> <note> <p>Cannot be used with <code>Radius</code>.</p> </note>', ], ], 'GetStaticMapResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetStyleDescriptorRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetStyleDescriptorResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetTileRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetTileRequestXString' => [ 'base' => NULL, 'refs' => [ 'GetTileRequest$X' => '<p>The X axis value for the map tile. Must be between 0 and 19.</p>', ], ], 'GetTileRequestYString' => [ 'base' => NULL, 'refs' => [ 'GetTileRequest$Y' => '<p>The Y axis value for the map tile.</p>', ], ], 'GetTileRequestZString' => [ 'base' => NULL, 'refs' => [ 'GetTileRequest$Z' => '<p>The zoom value for the map tile.</p>', ], ], 'GetTileResponse' => [ 'base' => NULL, 'refs' => [], ], 'Integer' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Padding' => '<p>Applies additional space (in pixels) around overlay feature to prevent them from being cut or obscured.</p> <note> <p>Value for max and min is determined by:</p> <p>Min: <code>1</code> </p> <p>Max: <code>min(height, width)/4</code> </p> </note> <p>Example: <code>100</code> </p>', ], ], 'InternalServerException' => [ 'base' => '<p>The request processing has failed because of an unknown error, exception or failure.</p>', 'refs' => [], ], 'MapStyle' => [ 'base' => NULL, 'refs' => [ 'GetSpritesRequest$Style' => '<p>Style specifies the desired map style for the <code>Sprites</code> APIs.</p>', 'GetStyleDescriptorRequest$Style' => '<p>Style specifies the desired map style.</p>', ], ], 'PositionListString' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$BoundingBox' => '<p>Takes in two pairs of coordinates, [Lon, Lat], denoting south-westerly and north-easterly edges of the image. The underlying area becomes the view of the image. </p> <p>Example: -123.17075,49.26959,-123.08125,49.31429</p>', 'GetStaticMapRequest$BoundedPositions' => '<p>Takes in two or more pair of coordinates, [Lon, Lat], with each coordinate separated by a comma. The API will generate an image to encompass all of the provided coordinates. </p> <note> <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code> </p> </note> <p>Example: 97.170451,78.039098,99.045536,27.176178</p>', ], ], 'PositionString' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Center' => '<p>Takes in a pair of coordinates, [Lon, Lat], which becomes the center point of the image. This parameter requires that either zoom or radius is set.</p> <note> <p>Cannot be used with <code>Zoom</code> and or <code>Radius</code> </p> </note> <p>Example: 49.295,-123.108</p>', ], ], 'ScaleBarUnit' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$ScaleBarUnit' => '<p>Displays a scale on the bottom right of the map image with the unit specified in the input. </p> <p>Example: <code>KilometersMiles, Miles, Kilometers, MilesKilometers</code> </p>', ], ], 'StaticMapStyle' => [ 'base' => NULL, 'refs' => [ 'GetStaticMapRequest$Style' => '<p>Style specifies the desired map style for the <code>Style</code> APIs.</p>', ], ], 'String' => [ 'base' => NULL, 'refs' => [ 'AccessDeniedException$Message' => NULL, 'GetGlyphsResponse$ContentType' => '<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>', 'GetGlyphsResponse$CacheControl' => '<p>Header that instructs caching configuration for the client.</p>', 'GetGlyphsResponse$ETag' => '<p>The glyph\'s Etag.</p>', 'GetSpritesResponse$ContentType' => '<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>', 'GetSpritesResponse$CacheControl' => '<p>Header that instructs caching configuration for the client.</p>', 'GetSpritesResponse$ETag' => '<p>The sprite\'s Etag.</p>', 'GetStaticMapResponse$ContentType' => '<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>', 'GetStaticMapResponse$CacheControl' => '<p>Header that instructs caching configuration for the client.</p>', 'GetStaticMapResponse$ETag' => '<p>The static map\'s Etag.</p>', 'GetStaticMapResponse$PricingBucket' => '<p>The pricing bucket for which the request is charged at.</p>', 'GetStyleDescriptorResponse$ContentType' => '<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>', 'GetStyleDescriptorResponse$CacheControl' => '<p>Header that instructs caching configuration for the client.</p>', 'GetStyleDescriptorResponse$ETag' => '<p>The style descriptor\'s Etag.</p>', 'GetTileResponse$ContentType' => '<p>Header that represents the format of the response. The response returns the following as the HTTP body.</p>', 'GetTileResponse$CacheControl' => '<p>Header that instructs caching configuration for the client.</p>', 'GetTileResponse$ETag' => '<p>The pricing bucket for which the request is charged at.</p>', 'GetTileResponse$PricingBucket' => '<p>The pricing bucket for which the request is charged at.</p>', 'InternalServerException$Message' => NULL, 'ThrottlingException$Message' => NULL, 'ValidationException$Message' => NULL, 'ValidationExceptionField$Name' => '<p>The name of the resource.</p>', 'ValidationExceptionField$Message' => '<p>The error message.</p>', ], ], 'ThrottlingException' => [ 'base' => '<p>The request was denied due to request throttling.</p>', 'refs' => [], ], 'Tileset' => [ 'base' => NULL, 'refs' => [ 'GetTileRequest$Tileset' => '<p>Specifies the desired tile set.</p> <p>Valid Values: <code>raster.satellite | vector.basemap</code> </p>', ], ], 'ValidationException' => [ 'base' => '<p>The input fails to satisfy the constraints specified by an AWS service.</p>', 'refs' => [], ], 'ValidationExceptionField' => [ 'base' => '<p>The input fails to satisfy the constraints specified by the Amazon Location service.</p>', 'refs' => [ 'ValidationExceptionFieldList$member' => NULL, ], ], 'ValidationExceptionFieldList' => [ 'base' => NULL, 'refs' => [ 'ValidationException$FieldList' => '<p>A message with the reason for the validation exception error.</p>', ], ], 'ValidationExceptionReason' => [ 'base' => NULL, 'refs' => [ 'ValidationException$Reason' => '<p>The field where thebb invalid entry was detected.</p>', ], ], 'Variant' => [ 'base' => NULL, 'refs' => [ 'GetSpritesRequest$Variant' => '<p>Optimizes map styles for specific use case or industry. You can choose allowed variant only with Standard map style.</p> <p>Example: <code>Default</code> </p> <note> <p>Valid values for Variant are case sensitive.</p> </note>', ], ], ],];
