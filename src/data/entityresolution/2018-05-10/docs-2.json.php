<?php
// This file was auto-generated from sdk-root/src/data/entityresolution/2018-05-10/docs-2.json
return [ 'version' => '2.0', 'service' => '<p>Welcome to the <i>AWS Entity Resolution API Reference</i>.</p> <p>AWS Entity Resolution is an AWS service that provides pre-configured entity resolution capabilities that enable developers and analysts at advertising and marketing companies to build an accurate and complete view of their consumers.</p> <p> With AWS Entity Resolution, you have the ability to match source records containing consumer identifiers, such as name, email address, and phone number. This holds true even when these records have incomplete or conflicting identifiers. For example, AWS Entity Resolution can effectively match a source record from a customer relationship management (CRM) system, which includes account information like first name, last name, postal address, phone number, and email address, with a source record from a marketing system containing campaign information, such as username and email address.</p> <p>To learn more about AWS Entity Resolution concepts, procedures, and best practices, see the <a href="https://docs.aws.amazon.com/entityresolution/latest/userguide/what-is-service.html">AWS Entity Resolution User Guide</a>.</p>', 'operations' => [ 'CreateMatchingWorkflow' => '<p>Creates a <code>MatchingWorkflow</code> object which stores the configuration of the data processing job to be run. It is important to note that there should not be a pre-existing <code>MatchingWorkflow</code> with the same name. To modify an existing workflow, utilize the <code>UpdateMatchingWorkflow</code> API.</p>', 'CreateSchemaMapping' => '<p>Creates a schema mapping, which defines the schema of the input customer records table. The <code>SchemaMapping</code> also provides Entity Resolution with some metadata about the table, such as the attribute types of the columns and which columns to match on.</p>', 'DeleteMatchingWorkflow' => '<p>Deletes the <code>MatchingWorkflow</code> with a given name. This operation will succeed even if a workflow with the given name does not exist.</p>', 'DeleteSchemaMapping' => '<p>Deletes the <code>SchemaMapping</code> with a given name. This operation will succeed even if a schema with the given name does not exist. This operation will fail if there is a <code>DataIntegrationWorkflow</code> object that references the <code>SchemaMapping</code> in the workflow\'s <code>InputSourceConfig</code>.</p>', 'GetMatchId' => '<p>Returns the corresponding Match ID of a customer record if the record has been processed.</p>', 'GetMatchingJob' => '<p>Gets the status, metrics, and errors (if there are any) that are associated with a job.</p>', 'GetMatchingWorkflow' => '<p>Returns the <code>MatchingWorkflow</code> with a given name, if it exists.</p>', 'GetSchemaMapping' => '<p>Returns the SchemaMapping of a given name.</p>', 'ListMatchingJobs' => '<p>Lists all jobs for a given workflow.</p>', 'ListMatchingWorkflows' => '<p>Returns a list of all the <code>MatchingWorkflows</code> that have been created for an AWS account.</p>', 'ListSchemaMappings' => '<p>Returns a list of all the <code>SchemaMappings</code> that have been created for an AWS account.</p>', 'ListTagsForResource' => '<p>Displays the tags associated with an AWS Entity Resolution resource. In Entity Resolution, <code>SchemaMapping</code>, and <code>MatchingWorkflow</code> can be tagged.</p>', 'StartMatchingJob' => '<p>Starts the <code>MatchingJob</code> of a workflow. The workflow must have previously been created using the <code>CreateMatchingWorkflow</code> endpoint.</p>', 'TagResource' => '<p>Assigns one or more tags (key-value pairs) to the specified AWS Entity Resolution resource. Tags can help you organize and categorize your resources. You can also use them to scope user permissions by granting a user permission to access or change only resources with certain tag values. In Entity Resolution, <code>SchemaMapping</code>, and <code>MatchingWorkflow</code> can be tagged. Tags don\'t have any semantic meaning to AWS and are interpreted strictly as strings of characters. You can use the <code>TagResource</code> action with a resource that already has tags. If you specify a new tag key, this tag is appended to the list of tags associated with the resource. If you specify a tag key that is already associated with the resource, the new tag value that you specify replaces the previous value for that tag.</p>', 'UntagResource' => '<p>Removes one or more tags from the specified AWS Entity Resolution resource. In Entity Resolution, <code>SchemaMapping</code>, and <code>MatchingWorkflow</code> can be tagged.</p>', 'UpdateMatchingWorkflow' => '<p>Updates an existing <code>MatchingWorkflow</code>. This method is identical to <code>CreateMatchingWorkflow</code>, except it uses an HTTP <code>PUT</code> request instead of a <code>POST</code> request, and the <code>MatchingWorkflow</code> must already exist for the method to succeed.</p>', ], 'shapes' => [ 'AccessDeniedException' => [ 'base' => '<p>You do not have sufficient access to perform this action. <code>HTTP Status Code: 403</code> </p>', 'refs' => [], ], 'AttributeMatchingModel' => [ 'base' => NULL, 'refs' => [ 'RuleBasedProperties$attributeMatchingModel' => '<p>You can either choose <code>ONE_TO_ONE</code> or <code>MANY_TO_MANY</code> as the AttributeMatchingModel. When choosing <code>MANY_TO_MANY</code>, the system can match attribute across the sub-types of an attribute type. For example, if the value of the Email field of Profile A and the value of BusinessEmail field of Profile B matches, the two profiles are matched on the Email type. When choosing <code>ONE_TO_ONE</code> the system can only match if the sub-types are exact matches. For example, only when the value of the Email field of Profile A and the value of the Email field of Profile B matches, the two profiles are matched on the Email type.</p>', ], ], 'AttributeName' => [ 'base' => NULL, 'refs' => [ 'OutputAttribute$name' => '<p>A name of a column to be written to the output. This must be an <code>InputField</code> name in the schema mapping.</p>', 'RuleMatchingKeysList$member' => NULL, 'SchemaInputAttribute$fieldName' => '<p>A string containing the field name.</p>', 'SchemaInputAttribute$groupName' => '<p>Instruct Entity Resolution to combine several columns into a unified column with the identical attribute type. For example, when working with columns such as first_name, middle_name, and last_name, assigning them a common <code>GroupName</code> will prompt Entity Resolution to concatenate them into a single value.</p>', 'SchemaInputAttribute$matchKey' => '<p>A key that allows grouping of multiple input attributes into a unified matching group. For example, let\'s consider a scenario where the source table contains various addresses, such as business_address and shipping_address. By assigning the <code>MatchKey</code> <i>Address</i>\' to both attributes, Entity Resolution will match records across these fields to create a consolidated matching group. If no <code>MatchKey</code> is specified for a column, it won\'t be utilized for matching purposes but will still be included in the output table.</p>', ], ], 'Boolean' => [ 'base' => NULL, 'refs' => [ 'InputSource$applyNormalization' => '<p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>', 'OutputAttribute$hashed' => '<p>Enables the ability to hash the column values in the output.</p>', 'OutputSource$applyNormalization' => '<p>Normalizes the attributes defined in the schema in the input data. For example, if an attribute has an <code>AttributeType</code> of <code>PHONE_NUMBER</code>, and the data in the input table is in a format of 1234567890, Entity Resolution will normalize this field in the output to (123)-456-7890.</p>', ], ], 'ConflictException' => [ 'base' => '<p>The request could not be processed because of conflict in the current state of the resource. Example: Workflow already exists, Schema already exists, Workflow is currently running, etc. <code>HTTP Status Code: 400</code> </p>', 'refs' => [], ], 'CreateMatchingWorkflowInput' => [ 'base' => NULL, 'refs' => [], ], 'CreateMatchingWorkflowOutput' => [ 'base' => NULL, 'refs' => [], ], 'CreateSchemaMappingInput' => [ 'base' => NULL, 'refs' => [], ], 'CreateSchemaMappingOutput' => [ 'base' => NULL, 'refs' => [], ], 'DeleteMatchingWorkflowInput' => [ 'base' => NULL, 'refs' => [], ], 'DeleteMatchingWorkflowOutput' => [ 'base' => NULL, 'refs' => [], ], 'DeleteSchemaMappingInput' => [ 'base' => NULL, 'refs' => [], ], 'DeleteSchemaMappingOutput' => [ 'base' => NULL, 'refs' => [], ], 'Description' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowInput$description' => '<p>A description of the workflow.</p>', 'CreateMatchingWorkflowOutput$description' => '<p>A description of the workflow.</p>', 'CreateSchemaMappingInput$description' => '<p>A description of the schema.</p>', 'CreateSchemaMappingOutput$description' => '<p>A description of the schema.</p>', 'GetMatchingWorkflowOutput$description' => '<p>A description of the workflow.</p>', 'GetSchemaMappingOutput$description' => '<p>A description of the schema.</p>', 'UpdateMatchingWorkflowInput$description' => '<p>A description of the workflow.</p>', 'UpdateMatchingWorkflowOutput$description' => '<p>A description of the workflow.</p>', ], ], 'EntityName' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowInput$workflowName' => '<p>The name of the workflow. There cannot be multiple <code>DataIntegrationWorkflows</code> with the same name.</p>', 'CreateMatchingWorkflowOutput$workflowName' => '<p>The name of the workflow.</p>', 'CreateSchemaMappingInput$schemaName' => '<p>The name of the schema. There cannot be multiple <code>SchemaMappings</code> with the same name.</p>', 'CreateSchemaMappingOutput$schemaName' => '<p>The name of the schema.</p>', 'DeleteMatchingWorkflowInput$workflowName' => '<p>The name of the workflow to be retrieved.</p>', 'DeleteSchemaMappingInput$schemaName' => '<p>The name of the schema to delete.</p>', 'GetMatchIdInput$workflowName' => '<p>The name of the workflow.</p>', 'GetMatchingJobInput$workflowName' => '<p>The name of the workflow.</p>', 'GetMatchingWorkflowInput$workflowName' => '<p>The name of the workflow.</p>', 'GetMatchingWorkflowOutput$workflowName' => '<p>The name of the workflow.</p>', 'GetSchemaMappingInput$schemaName' => '<p>The name of the schema to be retrieved.</p>', 'GetSchemaMappingOutput$schemaName' => '<p>The name of the schema.</p>', 'InputSource$schemaName' => '<p>The name of the schema to be retrieved.</p>', 'ListMatchingJobsInput$workflowName' => '<p>The name of the workflow to be retrieved.</p>', 'MatchingWorkflowSummary$workflowName' => '<p>The name of the workflow.</p>', 'SchemaMappingSummary$schemaName' => '<p>The name of the schema.</p>', 'StartMatchingJobInput$workflowName' => '<p>The name of the matching job to be retrieved.</p>', 'UpdateMatchingWorkflowInput$workflowName' => '<p>The name of the workflow to be retrieved.</p>', 'UpdateMatchingWorkflowOutput$workflowName' => '<p>The name of the workflow.</p>', ], ], 'ErrorDetails' => [ 'base' => '<p>An object containing an error message, if there was an error.</p>', 'refs' => [ 'GetMatchingJobOutput$errorDetails' => '<p>An object containing an error message, if there was an error.</p>', ], ], 'ErrorMessage' => [ 'base' => NULL, 'refs' => [ 'AccessDeniedException$message' => NULL, 'ConflictException$message' => NULL, 'ErrorDetails$errorMessage' => '<p>The error message from the job, if there is one.</p>', 'ExceedsLimitException$message' => NULL, 'InternalServerException$message' => NULL, 'ResourceNotFoundException$message' => NULL, 'ThrottlingException$message' => NULL, 'ValidationException$message' => NULL, ], ], 'ExceedsLimitException' => [ 'base' => '<p>The request was rejected because it attempted to create resources beyond the current AWS Entity Resolution account limits. The error message describes the limit exceeded. <code>HTTP Status Code: 402</code> </p>', 'refs' => [], ], 'GetMatchIdInput' => [ 'base' => NULL, 'refs' => [], ], 'GetMatchIdOutput' => [ 'base' => NULL, 'refs' => [], ], 'GetMatchingJobInput' => [ 'base' => NULL, 'refs' => [], ], 'GetMatchingJobOutput' => [ 'base' => NULL, 'refs' => [], ], 'GetMatchingWorkflowInput' => [ 'base' => NULL, 'refs' => [], ], 'GetMatchingWorkflowOutput' => [ 'base' => NULL, 'refs' => [], ], 'GetSchemaMappingInput' => [ 'base' => NULL, 'refs' => [], ], 'GetSchemaMappingOutput' => [ 'base' => NULL, 'refs' => [], ], 'IncrementalRunConfig' => [ 'base' => '<p>An object which defines an incremental run type and has only <code>incrementalRunType</code> as a field.</p>', 'refs' => [ 'CreateMatchingWorkflowInput$incrementalRunConfig' => '<p>An object which defines an incremental run type and has only <code>incrementalRunType</code> as a field.</p>', 'CreateMatchingWorkflowOutput$incrementalRunConfig' => '<p>An object which defines an incremental run type and has only <code>incrementalRunType</code> as a field.</p>', 'GetMatchingWorkflowOutput$incrementalRunConfig' => '<p>An object which defines an incremental run type and has only <code>incrementalRunType</code> as a field.</p>', 'UpdateMatchingWorkflowInput$incrementalRunConfig' => '<p>An object which defines an incremental run type and has only <code>incrementalRunType</code> as a field.</p>', 'UpdateMatchingWorkflowOutput$incrementalRunConfig' => '<p>An object which defines an incremental run type and has only <code>incrementalRunType</code> as a field.</p>', ], ], 'IncrementalRunType' => [ 'base' => NULL, 'refs' => [ 'IncrementalRunConfig$incrementalRunType' => '<p>The type of incremental run. It takes only one value: <code>IMMEDIATE</code>.</p>', ], ], 'InputSource' => [ 'base' => '<p>An object containing <code>InputSourceARN</code>, <code>SchemaName</code>, and <code>ApplyNormalization</code>.</p>', 'refs' => [ 'InputSourceConfig$member' => NULL, ], ], 'InputSourceConfig' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowInput$inputSourceConfig' => '<p>A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.</p>', 'CreateMatchingWorkflowOutput$inputSourceConfig' => '<p>A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.</p>', 'GetMatchingWorkflowOutput$inputSourceConfig' => '<p>A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.</p>', 'UpdateMatchingWorkflowInput$inputSourceConfig' => '<p>A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.</p>', 'UpdateMatchingWorkflowOutput$inputSourceConfig' => '<p>A list of <code>InputSource</code> objects, which have the fields <code>InputSourceARN</code> and <code>SchemaName</code>.</p>', ], ], 'InputSourceInputSourceARNString' => [ 'base' => NULL, 'refs' => [ 'InputSource$inputSourceARN' => '<p>An Glue table ARN for the input source table.</p>', ], ], 'Integer' => [ 'base' => NULL, 'refs' => [ 'JobMetrics$inputRecords' => '<p>The total number of input records.</p>', 'JobMetrics$matchIDs' => '<p>The total number of <code>matchID</code>s generated.</p>', 'JobMetrics$recordsNotProcessed' => '<p>The total number of records that did not get processed,</p>', 'JobMetrics$totalRecordsProcessed' => '<p>The total number of records processed.</p>', ], ], 'InternalServerException' => [ 'base' => '<p>This exception occurs when there is an internal failure in the AWS Entity Resolution service. <code>HTTP Status Code: 500</code> </p>', 'refs' => [], ], 'JobId' => [ 'base' => NULL, 'refs' => [ 'GetMatchingJobInput$jobId' => '<p>The ID of the job.</p>', 'GetMatchingJobOutput$jobId' => '<p>The ID of the job.</p>', 'JobSummary$jobId' => '<p>The ID of the job.</p>', 'StartMatchingJobOutput$jobId' => '<p>The ID of the job.</p>', ], ], 'JobList' => [ 'base' => NULL, 'refs' => [ 'ListMatchingJobsOutput$jobs' => '<p>A list of JobSummary objects, each of which contain the ID, status, start time, and end time of a job.</p>', ], ], 'JobMetrics' => [ 'base' => '<p>An object containing <code>InputRecords</code>, <code>TotalRecordsProcessed</code>, <code>MatchIDs</code>, and <code>RecordsNotProcessed</code>.</p>', 'refs' => [ 'GetMatchingJobOutput$metrics' => '<p>Metrics associated with the execution, specifically total records processed, unique IDs generated, and records the execution skipped.</p>', ], ], 'JobStatus' => [ 'base' => NULL, 'refs' => [ 'GetMatchingJobOutput$status' => '<p>The current status of the job. Either <code>running</code>, <code>succeeded</code>, <code>queued</code>, or <code>failed</code>.</p>', 'JobSummary$status' => '<p>The current status of the job. Either <code>running</code>, <code>succeeded</code>, <code>queued</code>, or <code>failed</code>.</p>', ], ], 'JobSummary' => [ 'base' => '<p>An object containing the <code>JobId</code>, <code>Status</code>, <code>StartTime</code>, and <code>EndTime</code> of a job.</p>', 'refs' => [ 'JobList$member' => NULL, ], ], 'KMSArn' => [ 'base' => NULL, 'refs' => [ 'OutputSource$KMSArn' => '<p>Customer KMS ARN for encryption at rest. If not provided, system will use an Entity Resolution managed KMS key.</p>', ], ], 'ListMatchingJobsInput' => [ 'base' => NULL, 'refs' => [], ], 'ListMatchingJobsInputMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListMatchingJobsInput$maxResults' => '<p>The maximum number of objects returned per page.</p>', ], ], 'ListMatchingJobsOutput' => [ 'base' => NULL, 'refs' => [], ], 'ListMatchingWorkflowsInput' => [ 'base' => NULL, 'refs' => [], ], 'ListMatchingWorkflowsInputMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListMatchingWorkflowsInput$maxResults' => '<p>The maximum number of objects returned per page.</p>', ], ], 'ListMatchingWorkflowsOutput' => [ 'base' => NULL, 'refs' => [], ], 'ListSchemaMappingsInput' => [ 'base' => NULL, 'refs' => [], ], 'ListSchemaMappingsInputMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListSchemaMappingsInput$maxResults' => '<p>The maximum number of objects returned per page.</p>', ], ], 'ListSchemaMappingsOutput' => [ 'base' => NULL, 'refs' => [], ], 'ListTagsForResourceInput' => [ 'base' => NULL, 'refs' => [], ], 'ListTagsForResourceOutput' => [ 'base' => NULL, 'refs' => [], ], 'MatchingWorkflowArn' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowOutput$workflowArn' => '<p>The ARN (Amazon Resource Name) that Entity Resolution generated for the <code>MatchingWorkflow</code>.</p>', 'GetMatchingWorkflowOutput$workflowArn' => '<p>The ARN (Amazon Resource Name) that Entity Resolution generated for the <code>MatchingWorkflow</code>.</p>', 'MatchingWorkflowSummary$workflowArn' => '<p>The ARN (Amazon Resource Name) that Entity Resolution generated for the <code>MatchingWorkflow</code>.</p>', ], ], 'MatchingWorkflowList' => [ 'base' => NULL, 'refs' => [ 'ListMatchingWorkflowsOutput$workflowSummaries' => '<p>A list of <code>MatchingWorkflowSummary</code> objects, each of which contain the fields <code>WorkflowName</code>, <code>WorkflowArn</code>, <code>CreatedAt</code>, and <code>UpdatedAt</code>.</p>', ], ], 'MatchingWorkflowSummary' => [ 'base' => '<p>A list of <code>MatchingWorkflowSummary</code> objects, each of which contain the fields <code>WorkflowName</code>, <code>WorkflowArn</code>, <code>CreatedAt</code>, <code>UpdatedAt</code>.</p>', 'refs' => [ 'MatchingWorkflowList$member' => NULL, ], ], 'NextToken' => [ 'base' => NULL, 'refs' => [ 'ListMatchingJobsInput$nextToken' => '<p>The pagination token from the previous <code>ListSchemaMappings</code> API call.</p>', 'ListMatchingJobsOutput$nextToken' => '<p>The pagination token from the previous <code>ListSchemaMappings</code> API call.</p>', 'ListMatchingWorkflowsInput$nextToken' => '<p>The pagination token from the previous <code>ListSchemaMappings</code> API call.</p>', 'ListMatchingWorkflowsOutput$nextToken' => '<p>The pagination token from the previous <code>ListSchemaMappings</code> API call.</p>', 'ListSchemaMappingsInput$nextToken' => '<p>The pagination token from the previous <code>ListSchemaMappings</code> API call.</p>', 'ListSchemaMappingsOutput$nextToken' => '<p>The pagination token from the previous <code>ListDomains</code> API call.</p>', ], ], 'OutputAttribute' => [ 'base' => '<p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>', 'refs' => [ 'OutputSourceOutputList$member' => NULL, ], ], 'OutputSource' => [ 'base' => '<p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>', 'refs' => [ 'OutputSourceConfig$member' => NULL, ], ], 'OutputSourceConfig' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowInput$outputSourceConfig' => '<p>A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.</p>', 'CreateMatchingWorkflowOutput$outputSourceConfig' => '<p>A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.</p>', 'GetMatchingWorkflowOutput$outputSourceConfig' => '<p>A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.</p>', 'UpdateMatchingWorkflowInput$outputSourceConfig' => '<p>A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.</p>', 'UpdateMatchingWorkflowOutput$outputSourceConfig' => '<p>A list of <code>OutputSource</code> objects, each of which contains fields <code>OutputS3Path</code>, <code>ApplyNormalization</code>, and <code>Output</code>.</p>', ], ], 'OutputSourceOutputList' => [ 'base' => NULL, 'refs' => [ 'OutputSource$output' => '<p>A list of <code>OutputAttribute</code> objects, each of which have the fields Name and Hashed. Each of these objects selects a column to be included in the output table, and whether the values of the column should be hashed.</p>', ], ], 'OutputSourceOutputS3PathString' => [ 'base' => NULL, 'refs' => [ 'OutputSource$outputS3Path' => '<p>The S3 path to which Entity Resolution will write the output table.</p>', ], ], 'RecordAttributeMap' => [ 'base' => NULL, 'refs' => [ 'GetMatchIdInput$record' => '<p>The record to fetch the Match ID for.</p>', ], ], 'RecordAttributeMapKeyString' => [ 'base' => NULL, 'refs' => [ 'RecordAttributeMap$key' => NULL, ], ], 'RecordAttributeMapValueString' => [ 'base' => NULL, 'refs' => [ 'RecordAttributeMap$value' => NULL, ], ], 'ResolutionTechniques' => [ 'base' => '<p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>', 'refs' => [ 'CreateMatchingWorkflowInput$resolutionTechniques' => '<p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>', 'CreateMatchingWorkflowOutput$resolutionTechniques' => '<p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>', 'GetMatchingWorkflowOutput$resolutionTechniques' => '<p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>', 'UpdateMatchingWorkflowInput$resolutionTechniques' => '<p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>', 'UpdateMatchingWorkflowOutput$resolutionTechniques' => '<p>An object which defines the <code>resolutionType</code> and the <code>ruleBasedProperties</code> </p>', ], ], 'ResolutionType' => [ 'base' => NULL, 'refs' => [ 'ResolutionTechniques$resolutionType' => '<p>There are two types of matching, <code>RULE_MATCHING</code> and <code>ML_MATCHING</code> </p>', ], ], 'ResourceNotFoundException' => [ 'base' => '<p>The resource could not be found. <code>HTTP Status Code: 404</code> </p>', 'refs' => [], ], 'Rule' => [ 'base' => '<p>An object containing <code>RuleName</code>, and <code>MatchingKeys</code>.</p>', 'refs' => [ 'RuleBasedPropertiesRulesList$member' => NULL, ], ], 'RuleBasedProperties' => [ 'base' => '<p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>', 'refs' => [ 'ResolutionTechniques$ruleBasedProperties' => '<p>An object which defines the list of matching rules to run and has a field <code>Rules</code>, which is a list of rule objects.</p>', ], ], 'RuleBasedPropertiesRulesList' => [ 'base' => NULL, 'refs' => [ 'RuleBasedProperties$rules' => '<p>A list of Rule objects, each of which have fields <code>RuleName</code> and <code>MatchingKeys</code>.</p>', ], ], 'RuleMatchingKeysList' => [ 'base' => NULL, 'refs' => [ 'Rule$matchingKeys' => '<p>A list of <code>MatchingKeys</code>. The <code>MatchingKeys</code> must have been defined in the <code>SchemaMapping</code>. Two records are considered to match according to this rule if all of the <code>MatchingKeys</code> match.</p>', ], ], 'RuleRuleNameString' => [ 'base' => NULL, 'refs' => [ 'Rule$ruleName' => '<p>A name for the matching rule.</p>', ], ], 'SchemaAttributeType' => [ 'base' => NULL, 'refs' => [ 'SchemaInputAttribute$type' => '<p>The type of the attribute, selected from a list of values.</p>', ], ], 'SchemaInputAttribute' => [ 'base' => '<p>An object containing <code>FieldField</code>, <code>Type</code>, <code>GroupName</code>, and <code>MatchKey</code>.</p>', 'refs' => [ 'SchemaInputAttributes$member' => NULL, ], ], 'SchemaInputAttributes' => [ 'base' => NULL, 'refs' => [ 'CreateSchemaMappingInput$mappedInputFields' => '<p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>', 'CreateSchemaMappingOutput$mappedInputFields' => '<p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information that Entity Resolution uses for matching.</p>', 'GetSchemaMappingOutput$mappedInputFields' => '<p>A list of <code>MappedInputFields</code>. Each <code>MappedInputField</code> corresponds to a column the source data table, and contains column name plus additional information Venice uses for matching.</p>', ], ], 'SchemaMappingArn' => [ 'base' => NULL, 'refs' => [ 'CreateSchemaMappingOutput$schemaArn' => '<p>The ARN (Amazon Resource Name) that Entity Resolution generated for the <code>SchemaMapping</code>.</p>', 'GetSchemaMappingOutput$schemaArn' => '<p>The ARN (Amazon Resource Name) that Entity Resolution generated for the SchemaMapping.</p>', 'SchemaMappingSummary$schemaArn' => '<p>The ARN (Amazon Resource Name) that Entity Resolution generated for the <code>SchemaMapping</code>.</p>', ], ], 'SchemaMappingList' => [ 'base' => NULL, 'refs' => [ 'ListSchemaMappingsOutput$schemaList' => '<p>A list of <code>SchemaMappingSummary</code> objects, each of which contain the fields <code>SchemaName</code>, <code>SchemaArn</code>, <code>CreatedAt</code>, <code>UpdatedAt</code>.</p>', ], ], 'SchemaMappingSummary' => [ 'base' => '<p>An object containing <code>SchemaName</code>, <code>SchemaArn</code>, <code>CreatedAt</code>, and<code>UpdatedAt</code>.</p>', 'refs' => [ 'SchemaMappingList$member' => NULL, ], ], 'StartMatchingJobInput' => [ 'base' => NULL, 'refs' => [], ], 'StartMatchingJobOutput' => [ 'base' => NULL, 'refs' => [], ], 'String' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowInput$roleArn' => '<p>The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.</p>', 'CreateMatchingWorkflowOutput$roleArn' => '<p>The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.</p>', 'DeleteMatchingWorkflowOutput$message' => '<p>A successful operation message.</p>', 'DeleteSchemaMappingOutput$message' => '<p>A successful operation message.</p>', 'GetMatchIdOutput$matchId' => '<p>The unique identifiers for this group of match records.</p>', 'GetMatchingWorkflowOutput$roleArn' => '<p>The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to access resources on your behalf.</p>', 'UpdateMatchingWorkflowInput$roleArn' => '<p>The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.</p>', 'UpdateMatchingWorkflowOutput$roleArn' => '<p>The Amazon Resource Name (ARN) of the IAM role. AWS Entity Resolution assumes this role to create resources on your behalf as part of workflow execution.</p>', ], ], 'TagKey' => [ 'base' => NULL, 'refs' => [ 'TagKeyList$member' => NULL, 'TagMap$key' => NULL, ], ], 'TagKeyList' => [ 'base' => NULL, 'refs' => [ 'UntagResourceInput$tagKeys' => '<p>The list of tag keys to remove from the resource.</p>', ], ], 'TagMap' => [ 'base' => NULL, 'refs' => [ 'CreateMatchingWorkflowInput$tags' => '<p>The tags used to organize, track, or control access for this resource.</p>', 'CreateSchemaMappingInput$tags' => '<p>The tags used to organize, track, or control access for this resource.</p>', 'GetMatchingWorkflowOutput$tags' => '<p>The tags used to organize, track, or control access for this resource.</p>', 'GetSchemaMappingOutput$tags' => '<p>The tags used to organize, track, or control access for this resource.</p>', 'ListTagsForResourceOutput$tags' => '<p>The tags used to organize, track, or control access for this resource.</p>', 'TagResourceInput$tags' => '<p>The tags used to organize, track, or control access for this resource.</p>', ], ], 'TagResourceInput' => [ 'base' => NULL, 'refs' => [], ], 'TagResourceOutput' => [ 'base' => NULL, 'refs' => [], ], 'TagValue' => [ 'base' => NULL, 'refs' => [ 'TagMap$value' => NULL, ], ], 'ThrottlingException' => [ 'base' => '<p>The request was denied due to request throttling. <code>HTTP Status Code: 429</code> </p>', 'refs' => [], ], 'Timestamp' => [ 'base' => NULL, 'refs' => [ 'GetMatchingJobOutput$endTime' => '<p>The time at which the job has finished.</p>', 'GetMatchingJobOutput$startTime' => '<p>The time at which the job was started.</p>', 'GetMatchingWorkflowOutput$createdAt' => '<p>The timestamp of when the workflow was created.</p>', 'GetMatchingWorkflowOutput$updatedAt' => '<p>The timestamp of when the workflow was last updated.</p>', 'GetSchemaMappingOutput$createdAt' => '<p>The timestamp of when the <code>SchemaMapping</code> was created.</p>', 'GetSchemaMappingOutput$updatedAt' => '<p>The timestamp of when the <code>SchemaMapping</code> was last updated.</p>', 'JobSummary$endTime' => '<p>The time at which the job has finished.</p>', 'JobSummary$startTime' => '<p>The time at which the job was started.</p>', 'MatchingWorkflowSummary$createdAt' => '<p>The timestamp of when the workflow was created.</p>', 'MatchingWorkflowSummary$updatedAt' => '<p>The timestamp of when the workflow was last updated.</p>', 'SchemaMappingSummary$createdAt' => '<p>The timestamp of when the <code>SchemaMapping</code> was created.</p>', 'SchemaMappingSummary$updatedAt' => '<p>The timestamp of when the <code>SchemaMapping</code> was last updated.</p>', ], ], 'UntagResourceInput' => [ 'base' => NULL, 'refs' => [], ], 'UntagResourceOutput' => [ 'base' => NULL, 'refs' => [], ], 'UpdateMatchingWorkflowInput' => [ 'base' => NULL, 'refs' => [], ], 'UpdateMatchingWorkflowOutput' => [ 'base' => NULL, 'refs' => [], ], 'ValidationException' => [ 'base' => '<p>The input fails to satisfy the constraints specified by AWS Entity Resolution. <code>HTTP Status Code: 400</code> </p>', 'refs' => [], ], 'VeniceGlobalArn' => [ 'base' => NULL, 'refs' => [ 'ListTagsForResourceInput$resourceArn' => '<p>The ARN of the resource for which you want to view tags.</p>', 'TagResourceInput$resourceArn' => '<p>The ARN of the resource for which you want to view tags.</p>', 'UntagResourceInput$resourceArn' => '<p>The ARN of the resource for which you want to untag.</p>', ], ], ],];
