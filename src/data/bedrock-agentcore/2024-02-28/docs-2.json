{
  "version": "2.0",
  "service": "<p><note> <p>Amazon Bedrock AgentCore is in preview release and is subject to change.</p> </note> <p>Welcome to the Amazon Bedrock AgentCore Data Plane API reference. Data Plane actions process and handle data or workloads within Amazon Web Services services. </p></p>",
  "operations": {
    "CreateEvent": "<p>Creates an event in an AgentCore Memory resource. Events represent interactions or activities that occur within a session and are associated with specific actors.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:CreateEvent</code> permission.</p> <p>This operation is subject to request rate limiting.</p>",
    "DeleteEvent": "<p>Deletes an event from an AgentCore Memory resource. When you delete an event, it is permanently removed.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:DeleteEvent</code> permission.</p>",
    "DeleteMemoryRecord": "<p>Deletes a memory record from an AgentCore Memory resource. When you delete a memory record, it is permanently removed.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:DeleteMemoryRecord</code> permission.</p>",
    "GetBrowserSession": "<p>Retrieves detailed information about a specific browser session in Amazon Bedrock. This operation returns the session's configuration, current status, associated streams, and metadata.</p> <p>To get a browser session, you must specify both the browser identifier and the session ID. The response includes information about the session's viewport configuration, timeout settings, and stream endpoints.</p> <p>The following operations are related to <code>GetBrowserSession</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartBrowserSession.html\">StartBrowserSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_ListBrowserSessions.html\">ListBrowserSessions</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StopBrowserSession.html\">StopBrowserSession</a> </p> </li> </ul>",
    "GetCodeInterpreterSession": "<p>Retrieves detailed information about a specific code interpreter session in Amazon Bedrock. This operation returns the session's configuration, current status, and metadata.</p> <p>To get a code interpreter session, you must specify both the code interpreter identifier and the session ID. The response includes information about the session's timeout settings and current status.</p> <p>The following operations are related to <code>GetCodeInterpreterSession</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartCodeInterpreterSession.html\">StartCodeInterpreterSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_ListCodeInterpreterSessions.html\">ListCodeInterpreterSessions</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StopCodeInterpreterSession.html\">StopCodeInterpreterSession</a> </p> </li> </ul>",
    "GetEvent": "<p>Retrieves information about a specific event in an AgentCore Memory resource.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:GetEvent</code> permission.</p>",
    "GetMemoryRecord": "<p>Retrieves a specific memory record from an AgentCore Memory resource.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:GetMemoryRecord</code> permission.</p>",
    "GetResourceApiKey": "<p>Retrieves an API Key associated with an API Key Credential Provider</p>",
    "GetResourceOauth2Token": "<p>Returns the OAuth 2.0 token of the provided resource</p>",
    "GetWorkloadAccessToken": "<p>Obtains an Workload access token for agentic workloads not acting on behalf of user.</p>",
    "GetWorkloadAccessTokenForJWT": "<p>Obtains an Workload access token for agentic workloads acting on behalf of user with JWT token</p>",
    "GetWorkloadAccessTokenForUserId": "<p>Obtains an Workload access token for agentic workloads acting on behalf of user with User Id.</p>",
    "InvokeAgentRuntime": "<p>Sends a request to an agent or tool hosted in an Amazon Bedrock AgentCore Runtime and receives responses in real-time. </p> <p>To invoke an agent you must specify the AgentCore Runtime ARN and provide a payload containing your request. You can optionally specify a qualifier to target a specific version or endpoint of the agent.</p> <p>This operation supports streaming responses, allowing you to receive partial responses as they become available. We recommend using pagination to ensure that the operation returns quickly and successfully when processing large responses.</p> <p>For example code, see <a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-invoke-agent.html\">Invoke an AgentCore Runtime agent</a>. </p> <p>If you're integrating your agent with OAuth, you can't use the Amazon Web Services SDK to call <code>InvokeAgentRuntime</code>. Instead, make a HTTPS request to <code>InvokeAgentRuntime</code>. For an example, see <a href=\"https://docs.aws.amazon.com/bedrock-agentcore/latest/devguide/runtime-oauth.html\">Authenticate and authorize with Inbound Auth and Outbound Auth</a>.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:InvokeAgentRuntime</code> permission.</p>",
    "InvokeCodeInterpreter": "<p>Executes code within an active code interpreter session in Amazon Bedrock. This operation processes the provided code, runs it in a secure environment, and returns the execution results including output, errors, and generated visualizations.</p> <p>To execute code, you must specify the code interpreter identifier, session ID, and the code to run in the arguments parameter. The operation returns a stream containing the execution results, which can include text output, error messages, and data visualizations.</p> <p>This operation is subject to request rate limiting based on your account's service quotas.</p> <p>The following operations are related to <code>InvokeCodeInterpreter</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartCodeInterpreterSession.html\">StartCodeInterpreterSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetCodeInterpreterSession.html\">GetCodeInterpreterSession</a> </p> </li> </ul>",
    "ListActors": "<p>Lists all actors in an AgentCore Memory resource. We recommend using pagination to ensure that the operation returns quickly and successfully.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:ListActors</code> permission.</p>",
    "ListBrowserSessions": "<p>Retrieves a list of browser sessions in Amazon Bedrock that match the specified criteria. This operation returns summary information about each session, including identifiers, status, and timestamps.</p> <p>You can filter the results by browser identifier and session status. The operation supports pagination to handle large result sets efficiently.</p> <p>We recommend using pagination to ensure that the operation returns quickly and successfully when retrieving large numbers of sessions.</p> <p>The following operations are related to <code>ListBrowserSessions</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartBrowserSession.html\">StartBrowserSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetBrowserSession.html\">GetBrowserSession</a> </p> </li> </ul>",
    "ListCodeInterpreterSessions": "<p>Retrieves a list of code interpreter sessions in Amazon Bedrock that match the specified criteria. This operation returns summary information about each session, including identifiers, status, and timestamps.</p> <p>You can filter the results by code interpreter identifier and session status. The operation supports pagination to handle large result sets efficiently.</p> <p>We recommend using pagination to ensure that the operation returns quickly and successfully when retrieving large numbers of sessions.</p> <p>The following operations are related to <code>ListCodeInterpreterSessions</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartCodeInterpreterSession.html\">StartCodeInterpreterSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetCodeInterpreterSession.html\">GetCodeInterpreterSession</a> </p> </li> </ul>",
    "ListEvents": "<p>Lists events in an AgentCore Memory resource based on specified criteria. We recommend using pagination to ensure that the operation returns quickly and successfully.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:ListEvents</code> permission.</p>",
    "ListMemoryRecords": "<p>Lists memory records in an AgentCore Memory resource based on specified criteria. We recommend using pagination to ensure that the operation returns quickly and successfully.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:ListMemoryRecords</code> permission.</p>",
    "ListSessions": "<p>Lists sessions in an AgentCore Memory resource based on specified criteria. We recommend using pagination to ensure that the operation returns quickly and successfully.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:ListSessions</code> permission.</p>",
    "RetrieveMemoryRecords": "<p>Searches for and retrieves memory records from an AgentCore Memory resource based on specified search criteria. We recommend using pagination to ensure that the operation returns quickly and successfully.</p> <p>To use this operation, you must have the <code>bedrock-agentcore:RetrieveMemoryRecords</code> permission.</p>",
    "StartBrowserSession": "<p>Creates and initializes a browser session in Amazon Bedrock. The session enables agents to navigate and interact with web content, extract information from websites, and perform web-based tasks as part of their response generation.</p> <p>To create a session, you must specify a browser identifier and a name. You can also configure the viewport dimensions to control the visible area of web content. The session remains active until it times out or you explicitly stop it using the <code>StopBrowserSession</code> operation.</p> <p>The following operations are related to <code>StartBrowserSession</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetBrowserSession.html\">GetBrowserSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_UpdateBrowserStream.html\">UpdateBrowserStream</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StopBrowserSession.html\">StopBrowserSession</a> </p> </li> </ul>",
    "StartCodeInterpreterSession": "<p>Creates and initializes a code interpreter session in Amazon Bedrock. The session enables agents to execute code as part of their response generation, supporting programming languages such as Python for data analysis, visualization, and computation tasks.</p> <p>To create a session, you must specify a code interpreter identifier and a name. The session remains active until it times out or you explicitly stop it using the <code>StopCodeInterpreterSession</code> operation.</p> <p>The following operations are related to <code>StartCodeInterpreterSession</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_InvokeCodeInterpreter.html\">InvokeCodeInterpreter</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetCodeInterpreterSession.html\">GetCodeInterpreterSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StopCodeInterpreterSession.html\">StopCodeInterpreterSession</a> </p> </li> </ul>",
    "StopBrowserSession": "<p>Terminates an active browser session in Amazon Bedrock. This operation stops the session, releases associated resources, and makes the session unavailable for further use.</p> <p>To stop a browser session, you must specify both the browser identifier and the session ID. Once stopped, a session cannot be restarted; you must create a new session using <code>StartBrowserSession</code>.</p> <p>The following operations are related to <code>StopBrowserSession</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartBrowserSession.html\">StartBrowserSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetBrowserSession.html\">GetBrowserSession</a> </p> </li> </ul>",
    "StopCodeInterpreterSession": "<p>Terminates an active code interpreter session in Amazon Bedrock. This operation stops the session, releases associated resources, and makes the session unavailable for further use.</p> <p>To stop a code interpreter session, you must specify both the code interpreter identifier and the session ID. Once stopped, a session cannot be restarted; you must create a new session using <code>StartCodeInterpreterSession</code>.</p> <p>The following operations are related to <code>StopCodeInterpreterSession</code>:</p> <ul> <li> <p> <a href=\"https://docs.aws.amazon.com/API_StartCodeInterpreterSession.html\">StartCodeInterpreterSession</a> </p> </li> <li> <p> <a href=\"https://docs.aws.amazon.com/API_GetCodeInterpreterSession.html\">GetCodeInterpreterSession</a> </p> </li> </ul>",
    "UpdateBrowserStream": "<p>Updates a browser stream. To use this operation, you must have permissions to perform the bedrock:UpdateBrowserStream action.</p>"
  },
  "shapes": {
    "AccessDeniedException": {
      "base": "<p>The exception that occurs when you do not have sufficient permissions to perform an action. Verify that your IAM policy includes the necessary permissions for the operation you are trying to perform.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$accessDeniedException": null
      }
    },
    "AccessTokenType": {
      "base": null,
      "refs": {
        "GetResourceOauth2TokenResponse$accessToken": "<p>OAuth2 token ready for use</p>"
      }
    },
    "ActorId": {
      "base": null,
      "refs": {
        "ActorSummary$actorId": "<p>The unique identifier of the actor.</p>",
        "CreateEventInput$actorId": "<p>The identifier of the actor associated with this event. An actor represents an entity that participates in sessions and generates events.</p>",
        "DeleteEventInput$actorId": "<p>The identifier of the actor associated with the event to delete.</p>",
        "Event$actorId": "<p>The identifier of the actor associated with the event.</p>",
        "GetEventInput$actorId": "<p>The identifier of the actor associated with the event.</p>",
        "ListEventsInput$actorId": "<p>The identifier of the actor for which to list events. If specified, only events from this actor are returned.</p>",
        "ListSessionsInput$actorId": "<p>The identifier of the actor for which to list sessions. If specified, only sessions involving this actor are returned.</p>",
        "SessionSummary$actorId": "<p>The identifier of the actor associated with the session.</p>"
      }
    },
    "ActorSummary": {
      "base": "<p>Contains summary information about an actor in an AgentCore Memory resource.</p>",
      "refs": {
        "ActorSummaryList$member": null
      }
    },
    "ActorSummaryList": {
      "base": null,
      "refs": {
        "ListActorsOutput$actorSummaries": "<p>The list of actor summaries.</p>"
      }
    },
    "ApiKeyType": {
      "base": null,
      "refs": {
        "GetResourceApiKeyResponse$apiKey": "<p>The API Key associated with the resource requested.</p>"
      }
    },
    "AutomationStream": {
      "base": "<p>The configuration for a stream that enables programmatic control of a browser session in Amazon Bedrock. This stream provides a bidirectional communication channel for sending commands to the browser and receiving responses, allowing agents to automate web interactions such as navigation, form filling, and element clicking.</p>",
      "refs": {
        "BrowserSessionStream$automationStream": "<p>The stream that enables programmatic control of the browser. This stream allows agents to perform actions such as navigating to URLs, clicking elements, and filling forms.</p>"
      }
    },
    "AutomationStreamStatus": {
      "base": null,
      "refs": {
        "AutomationStream$streamStatus": "<p>The current status of the automation stream. This indicates whether the stream is available for use. Possible values include ACTIVE, CONNECTING, and DISCONNECTED.</p>",
        "AutomationStreamUpdate$streamStatus": "<p>The status of the automation stream.</p>"
      }
    },
    "AutomationStreamUpdate": {
      "base": "<p>Contains information about an update to an automation stream.</p>",
      "refs": {
        "StreamUpdate$automationStreamUpdate": "<p>The update to an automation stream.</p>"
      }
    },
    "Blob": {
      "base": null,
      "refs": {
        "ContentBlock$data": "<p>The binary data content of the block.</p>",
        "ResourceContent$blob": "<p>The binary resource content.</p>"
      }
    },
    "Body": {
      "base": null,
      "refs": {
        "InputContentBlock$blob": "<p>The binary input content.</p>",
        "InvokeAgentRuntimeRequest$payload": "<p>The input data to send to the agent runtime. The format of this data depends on the specific agent configuration and must match the specified content type. For most agents, this is a JSON object containing the user's request.</p>"
      }
    },
    "Boolean": {
      "base": null,
      "refs": {
        "BranchFilter$includeParentBranches": "<p>Specifies whether to include parent branches in the results. Set to true to include parent branches, or false to exclude them.</p>",
        "CodeInterpreterResult$isError": "<p>Indicates whether the result represents an error. If true, the content contains error messages or exception information. If false, the content contains successful execution results.</p>",
        "GetResourceOauth2TokenRequest$forceAuthentication": "<p>If true, always initiate a new 3LO flow</p>",
        "ListEventsInput$includePayloads": "<p>Specifies whether to include event payloads in the response. Set to true to include payloads, or false to exclude them.</p>",
        "ToolArguments$clearContext": "<p>Whether to clear the context for the tool.</p>"
      }
    },
    "Branch": {
      "base": "<p>Contains information about a branch in an AgentCore Memory resource. Branches allow for organizing events into different conversation threads or paths.</p>",
      "refs": {
        "CreateEventInput$branch": "<p>The branch information for this event. Branches allow for organizing events into different conversation threads or paths.</p>",
        "Event$branch": "<p>The branch information for the event.</p>"
      }
    },
    "BranchFilter": {
      "base": "<p>Contains filter criteria for branches when listing events.</p>",
      "refs": {
        "FilterInput$branch": "<p>The branch filter criteria to apply when listing events.</p>"
      }
    },
    "BranchName": {
      "base": null,
      "refs": {
        "Branch$name": "<p>The name of the branch.</p>",
        "BranchFilter$name": "<p>The name of the branch to filter by.</p>"
      }
    },
    "BrowserSessionId": {
      "base": null,
      "refs": {
        "BrowserSessionSummary$sessionId": "<p>The unique identifier of the browser session. This identifier is used in operations that interact with the session.</p>",
        "GetBrowserSessionRequest$sessionId": "<p>The unique identifier of the browser session to retrieve.</p>",
        "GetBrowserSessionResponse$sessionId": "<p>The identifier of the browser session.</p>",
        "StartBrowserSessionResponse$sessionId": "<p>The unique identifier of the created browser session.</p>",
        "StopBrowserSessionRequest$sessionId": "<p>The unique identifier of the browser session to stop.</p>",
        "StopBrowserSessionResponse$sessionId": "<p>The identifier of the browser session.</p>",
        "UpdateBrowserStreamRequest$sessionId": "<p>The identifier of the browser session.</p>",
        "UpdateBrowserStreamResponse$sessionId": "<p>The identifier of the browser session.</p>"
      }
    },
    "BrowserSessionStatus": {
      "base": null,
      "refs": {
        "BrowserSessionSummary$status": "<p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>",
        "GetBrowserSessionResponse$status": "<p>The current status of the browser session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>",
        "ListBrowserSessionsRequest$status": "<p>The status of the browser sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>"
      }
    },
    "BrowserSessionStream": {
      "base": "<p>The collection of streams associated with a browser session in Amazon Bedrock. These streams provide different ways to interact with and observe the browser session, including programmatic control and visual representation of the browser content.</p>",
      "refs": {
        "GetBrowserSessionResponse$streams": "<p>The streams associated with this browser session. These include the automation stream and live view stream.</p>",
        "StartBrowserSessionResponse$streams": "<p>The streams associated with this browser session. These include the automation stream and live view stream.</p>",
        "UpdateBrowserStreamResponse$streams": null
      }
    },
    "BrowserSessionSummaries": {
      "base": null,
      "refs": {
        "ListBrowserSessionsResponse$items": "<p>The list of browser sessions that match the specified criteria.</p>"
      }
    },
    "BrowserSessionSummary": {
      "base": "<p>A condensed representation of a browser session in Amazon Bedrock. This structure contains key information about a browser session, including identifiers, status, and timestamps, without the full details of the session configuration and streams.</p>",
      "refs": {
        "BrowserSessionSummaries$member": null
      }
    },
    "BrowserSessionTimeout": {
      "base": null,
      "refs": {
        "GetBrowserSessionResponse$sessionTimeoutSeconds": "<p>The timeout period for the browser session in seconds.</p>",
        "StartBrowserSessionRequest$sessionTimeoutSeconds": "<p>The time in seconds after which the session automatically terminates if there is no activity. The default value is 3600 seconds (1 hour). The minimum allowed value is 60 seconds, and the maximum allowed value is 28800 seconds (8 hours).</p>"
      }
    },
    "BrowserStreamEndpoint": {
      "base": null,
      "refs": {
        "AutomationStream$streamEndpoint": "<p>The endpoint URL for the automation stream. This URL is used to establish a WebSocket connection to the stream for sending commands and receiving responses.</p>",
        "LiveViewStream$streamEndpoint": "<p>The endpoint URL for the live view stream. This URL is used to establish a connection to receive visual updates from the browser session.</p>"
      }
    },
    "ClientToken": {
      "base": null,
      "refs": {
        "StartBrowserSessionRequest$clientToken": "<p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. This parameter helps prevent the creation of duplicate sessions if there are temporary network issues.</p>",
        "StartCodeInterpreterSessionRequest$clientToken": "<p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. This parameter helps prevent the creation of duplicate sessions if there are temporary network issues.</p>",
        "StopBrowserSessionRequest$clientToken": "<p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>",
        "StopCodeInterpreterSessionRequest$clientToken": "<p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>",
        "UpdateBrowserStreamRequest$clientToken": "<p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error.</p>"
      }
    },
    "CodeInterpreterResult": {
      "base": "<p>The output produced by executing code in a code interpreter session in Amazon Bedrock. This structure contains the results of code execution, including textual output, structured data, and error information. Agents use these results to generate responses that incorporate computation, data analysis, and visualization.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$result": null
      }
    },
    "CodeInterpreterSessionId": {
      "base": null,
      "refs": {
        "CodeInterpreterSessionSummary$sessionId": "<p>The unique identifier of the code interpreter session. This identifier is used in operations that interact with the session.</p>",
        "GetCodeInterpreterSessionRequest$sessionId": "<p>The unique identifier of the code interpreter session to retrieve.</p>",
        "GetCodeInterpreterSessionResponse$sessionId": "<p>The identifier of the code interpreter session.</p>",
        "InvokeCodeInterpreterRequest$sessionId": "<p>The unique identifier of the code interpreter session to use. This must be an active session created with <code>StartCodeInterpreterSession</code>. If the session has expired or been stopped, the request will fail.</p>",
        "InvokeCodeInterpreterResponse$sessionId": "<p>The identifier of the code interpreter session.</p>",
        "StartCodeInterpreterSessionResponse$sessionId": "<p>The unique identifier of the created code interpreter session.</p>",
        "StopCodeInterpreterSessionRequest$sessionId": "<p>The unique identifier of the code interpreter session to stop.</p>",
        "StopCodeInterpreterSessionResponse$sessionId": "<p>The identifier of the code interpreter session.</p>"
      }
    },
    "CodeInterpreterSessionStatus": {
      "base": null,
      "refs": {
        "CodeInterpreterSessionSummary$status": "<p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>",
        "GetCodeInterpreterSessionResponse$status": "<p>The current status of the code interpreter session. Possible values include ACTIVE, STOPPING, and STOPPED.</p>",
        "ListCodeInterpreterSessionsRequest$status": "<p>The status of the code interpreter sessions to list. Valid values include ACTIVE, STOPPING, and STOPPED. If not specified, sessions with any status are returned.</p>"
      }
    },
    "CodeInterpreterSessionSummaries": {
      "base": null,
      "refs": {
        "ListCodeInterpreterSessionsResponse$items": "<p>The list of code interpreter sessions that match the specified criteria.</p>"
      }
    },
    "CodeInterpreterSessionSummary": {
      "base": "<p>A condensed representation of a code interpreter session in Amazon Bedrock. This structure contains key information about a code interpreter session, including identifiers, status, and timestamps, without the full details of the session configuration.</p>",
      "refs": {
        "CodeInterpreterSessionSummaries$member": null
      }
    },
    "CodeInterpreterSessionTimeout": {
      "base": null,
      "refs": {
        "GetCodeInterpreterSessionResponse$sessionTimeoutSeconds": "<p>The timeout period for the code interpreter session in seconds.</p>",
        "StartCodeInterpreterSessionRequest$sessionTimeoutSeconds": "<p>The time in seconds after which the session automatically terminates if there is no activity. The default value is 3600 seconds (1 hour). The minimum allowed value is 60 seconds, and the maximum allowed value is 28800 seconds (8 hours).</p>"
      }
    },
    "CodeInterpreterStreamOutput": {
      "base": "<p>Contains output from a code interpreter stream.</p>",
      "refs": {
        "InvokeCodeInterpreterResponse$stream": "<p>The stream containing the results of the code execution. This includes output, errors, and execution status.</p>"
      }
    },
    "ConflictException": {
      "base": "<p>The exception that occurs when the request conflicts with the current state of the resource. This can happen when trying to modify a resource that is currently being modified by another request, or when trying to create a resource that already exists.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$conflictException": null
      }
    },
    "Content": {
      "base": "<p>Contains the content of a memory item.</p>",
      "refs": {
        "Conversational$content": "<p>The content of the conversation message.</p>"
      }
    },
    "ContentBlock": {
      "base": "<p>A block of content in a response.</p>",
      "refs": {
        "ContentBlockList$member": null
      }
    },
    "ContentBlockList": {
      "base": null,
      "refs": {
        "CodeInterpreterResult$content": "<p>The textual content of the execution result. This includes standard output from the code execution, such as print statements, console output, and text representations of results.</p>"
      }
    },
    "ContentBlockType": {
      "base": null,
      "refs": {
        "ContentBlock$type": "<p>The type of content in the block.</p>"
      }
    },
    "ContentTextString": {
      "base": null,
      "refs": {
        "Content$text": "<p>The text content of the memory item.</p>"
      }
    },
    "Conversational": {
      "base": "<p>Contains conversational content for an event payload.</p>",
      "refs": {
        "PayloadType$conversational": "<p>The conversational content of the payload.</p>"
      }
    },
    "CreateEventInput": {
      "base": null,
      "refs": {}
    },
    "CreateEventOutput": {
      "base": null,
      "refs": {}
    },
    "CredentialProviderName": {
      "base": null,
      "refs": {
        "GetResourceApiKeyRequest$resourceCredentialProviderName": "<p>The credential provider name of the resource you are retrieving the API Key of.</p>",
        "GetResourceOauth2TokenRequest$resourceCredentialProviderName": "<p>Reference to the credential provider</p>"
      }
    },
    "CustomRequestKeyType": {
      "base": null,
      "refs": {
        "CustomRequestParametersType$key": null
      }
    },
    "CustomRequestParametersType": {
      "base": null,
      "refs": {
        "GetResourceOauth2TokenRequest$customParameters": "<p>Gives the ability to send extra/custom parameters to the resource credentials provider during the authorization process. Standard OAuth2 flow parameters will not be overriden.</p>"
      }
    },
    "CustomRequestValueType": {
      "base": null,
      "refs": {
        "CustomRequestParametersType$value": null
      }
    },
    "DateTimestamp": {
      "base": null,
      "refs": {
        "BrowserSessionSummary$createdAt": "<p>The timestamp when the browser session was created. This value is in ISO 8601 format.</p>",
        "BrowserSessionSummary$lastUpdatedAt": "<p>The timestamp when the browser session was last updated. This value is in ISO 8601 format.</p>",
        "CodeInterpreterSessionSummary$createdAt": "<p>The timestamp when the code interpreter session was created. This value is in ISO 8601 format.</p>",
        "CodeInterpreterSessionSummary$lastUpdatedAt": "<p>The timestamp when the code interpreter session was last updated. This value is in ISO 8601 format.</p>",
        "GetBrowserSessionResponse$createdAt": "<p>The time at which the browser session was created.</p>",
        "GetBrowserSessionResponse$lastUpdatedAt": "<p>The time at which the browser session was last updated.</p>",
        "GetCodeInterpreterSessionResponse$createdAt": "<p>The time at which the code interpreter session was created.</p>",
        "StartBrowserSessionResponse$createdAt": "<p>The timestamp when the browser session was created.</p>",
        "StartCodeInterpreterSessionResponse$createdAt": "<p>The time at which the code interpreter session was created.</p>",
        "StopBrowserSessionResponse$lastUpdatedAt": "<p>The time at which the browser session was last updated.</p>",
        "StopCodeInterpreterSessionResponse$lastUpdatedAt": "<p>The timestamp when the code interpreter session was last updated.</p>",
        "UpdateBrowserStreamResponse$updatedAt": "<p>The time at which the browser stream was updated.</p>"
      }
    },
    "DeleteEventInput": {
      "base": null,
      "refs": {}
    },
    "DeleteEventOutput": {
      "base": null,
      "refs": {}
    },
    "DeleteMemoryRecordInput": {
      "base": null,
      "refs": {}
    },
    "DeleteMemoryRecordOutput": {
      "base": null,
      "refs": {}
    },
    "Document": {
      "base": null,
      "refs": {
        "PayloadType$blob": "<p>The binary content of the payload.</p>"
      }
    },
    "Double": {
      "base": null,
      "refs": {
        "MemoryRecordSummary$score": "<p>The relevance score of the memory record when returned as part of a search result. Higher values indicate greater relevance to the search query.</p>",
        "ToolResultStructuredContent$executionTime": "<p>The execution time of the tool operation in milliseconds.</p>"
      }
    },
    "Event": {
      "base": "<p>Contains information about an event in an AgentCore Memory resource.</p>",
      "refs": {
        "CreateEventOutput$event": "<p>The event that was created.</p>",
        "EventList$member": null,
        "GetEventOutput$event": "<p>The requested event information.</p>"
      }
    },
    "EventId": {
      "base": null,
      "refs": {
        "Branch$rootEventId": "<p>The identifier of the root event for this branch.</p>",
        "DeleteEventInput$eventId": "<p>The identifier of the event to delete.</p>",
        "DeleteEventOutput$eventId": "<p>The identifier of the event that was deleted.</p>",
        "Event$eventId": "<p>The unique identifier of the event.</p>",
        "GetEventInput$eventId": "<p>The identifier of the event to retrieve.</p>"
      }
    },
    "EventList": {
      "base": null,
      "refs": {
        "ListEventsOutput$events": "<p>The list of events that match the specified criteria.</p>"
      }
    },
    "FilterInput": {
      "base": "<p>Contains filter criteria for listing events.</p>",
      "refs": {
        "ListEventsInput$filter": "<p>Filter criteria to apply when listing events.</p>"
      }
    },
    "GetBrowserSessionRequest": {
      "base": null,
      "refs": {}
    },
    "GetBrowserSessionResponse": {
      "base": null,
      "refs": {}
    },
    "GetCodeInterpreterSessionRequest": {
      "base": null,
      "refs": {}
    },
    "GetCodeInterpreterSessionResponse": {
      "base": null,
      "refs": {}
    },
    "GetEventInput": {
      "base": null,
      "refs": {}
    },
    "GetEventOutput": {
      "base": null,
      "refs": {}
    },
    "GetMemoryRecordInput": {
      "base": null,
      "refs": {}
    },
    "GetMemoryRecordOutput": {
      "base": null,
      "refs": {}
    },
    "GetResourceApiKeyRequest": {
      "base": null,
      "refs": {}
    },
    "GetResourceApiKeyResponse": {
      "base": null,
      "refs": {}
    },
    "GetResourceOauth2TokenRequest": {
      "base": null,
      "refs": {}
    },
    "GetResourceOauth2TokenResponse": {
      "base": null,
      "refs": {}
    },
    "GetWorkloadAccessTokenForJWTRequest": {
      "base": null,
      "refs": {}
    },
    "GetWorkloadAccessTokenForJWTResponse": {
      "base": null,
      "refs": {}
    },
    "GetWorkloadAccessTokenForUserIdRequest": {
      "base": null,
      "refs": {}
    },
    "GetWorkloadAccessTokenForUserIdResponse": {
      "base": null,
      "refs": {}
    },
    "GetWorkloadAccessTokenRequest": {
      "base": null,
      "refs": {}
    },
    "GetWorkloadAccessTokenResponse": {
      "base": null,
      "refs": {}
    },
    "HttpResponseCode": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeResponse$statusCode": "<p>The HTTP status code of the response. A status code of 200 indicates a successful operation. Other status codes indicate various error conditions.</p>"
      }
    },
    "InputContentBlock": {
      "base": "<p>A block of input content.</p>",
      "refs": {
        "InputContentBlockList$member": null
      }
    },
    "InputContentBlockList": {
      "base": null,
      "refs": {
        "ToolArguments$content": "<p>The content for the tool operation.</p>"
      }
    },
    "Integer": {
      "base": null,
      "refs": {
        "ToolResultStructuredContent$exitCode": "<p>The exit code from the tool execution.</p>"
      }
    },
    "InternalServerException": {
      "base": "<p>The exception that occurs when the service encounters an unexpected internal error. This is a temporary condition that will resolve itself with retries. We recommend implementing exponential backoff retry logic in your application.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$internalServerException": null
      }
    },
    "InvalidInputException": {
      "base": "<p>The input fails to satisfy the constraints specified by AgentCore. Check your input values and try again.</p>",
      "refs": {}
    },
    "InvokeAgentRuntimeRequest": {
      "base": null,
      "refs": {}
    },
    "InvokeAgentRuntimeRequestBaggageString": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$baggage": "<p>Additional context information for distributed tracing.</p>"
      }
    },
    "InvokeAgentRuntimeRequestTraceIdString": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$traceId": "<p>The trace identifier for request tracking.</p>"
      }
    },
    "InvokeAgentRuntimeRequestTraceParentString": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$traceParent": "<p>The parent trace information for distributed tracing.</p>"
      }
    },
    "InvokeAgentRuntimeRequestTraceStateString": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$traceState": "<p>The trace state information for distributed tracing.</p>"
      }
    },
    "InvokeAgentRuntimeResponse": {
      "base": null,
      "refs": {}
    },
    "InvokeCodeInterpreterRequest": {
      "base": null,
      "refs": {}
    },
    "InvokeCodeInterpreterResponse": {
      "base": null,
      "refs": {}
    },
    "ListActorsInput": {
      "base": null,
      "refs": {}
    },
    "ListActorsOutput": {
      "base": null,
      "refs": {}
    },
    "ListBrowserSessionsRequest": {
      "base": null,
      "refs": {}
    },
    "ListBrowserSessionsResponse": {
      "base": null,
      "refs": {}
    },
    "ListCodeInterpreterSessionsRequest": {
      "base": null,
      "refs": {}
    },
    "ListCodeInterpreterSessionsResponse": {
      "base": null,
      "refs": {}
    },
    "ListEventsInput": {
      "base": null,
      "refs": {}
    },
    "ListEventsOutput": {
      "base": null,
      "refs": {}
    },
    "ListMemoryRecordsInput": {
      "base": null,
      "refs": {}
    },
    "ListMemoryRecordsOutput": {
      "base": null,
      "refs": {}
    },
    "ListSessionsInput": {
      "base": null,
      "refs": {}
    },
    "ListSessionsOutput": {
      "base": null,
      "refs": {}
    },
    "LiveViewStream": {
      "base": "<p>The configuration for a stream that provides a visual representation of a browser session in Amazon Bedrock. This stream enables agents to observe the current state of the browser, including rendered web pages, visual elements, and the results of interactions.</p>",
      "refs": {
        "BrowserSessionStream$liveViewStream": "<p>The stream that provides a visual representation of the browser content. This stream allows agents to observe the current state of the browser, including rendered web pages and visual elements.</p>"
      }
    },
    "Long": {
      "base": null,
      "refs": {
        "ContentBlock$size": "<p>The size of the content in bytes.</p>"
      }
    },
    "MaxLenString": {
      "base": null,
      "refs": {
        "InputContentBlock$path": "<p>The path to the input content.</p>",
        "InputContentBlock$text": "<p>The text input content.</p>",
        "StringList$member": null,
        "ToolArguments$code": "<p>The code to execute in a code interpreter session. This is the source code in the specified programming language that will be executed by the code interpreter.</p>",
        "ToolArguments$command": "<p>The command to execute with the tool.</p>",
        "ToolArguments$path": "<p>The path for the tool operation.</p>",
        "ToolArguments$directoryPath": "<p>The directory path for the tool operation.</p>",
        "ToolArguments$taskId": "<p>The identifier of the task for the tool operation.</p>"
      }
    },
    "MaxResults": {
      "base": null,
      "refs": {
        "ListActorsInput$maxResults": "<p>The maximum number of results to return in a single call. Minimum value of 1, maximum value of 100. Default is 20.</p>",
        "ListBrowserSessionsRequest$maxResults": "<p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>",
        "ListCodeInterpreterSessionsRequest$maxResults": "<p>The maximum number of results to return in a single call. The default value is 10. Valid values range from 1 to 100. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>",
        "ListEventsInput$maxResults": "<p>The maximum number of results to return in a single call. Minimum value of 1, maximum value of 100. Default is 20.</p>",
        "ListMemoryRecordsInput$maxResults": "<p>The maximum number of results to return in a single call. Minimum value of 1, maximum value of 100. Default is 20.</p>",
        "ListSessionsInput$maxResults": "<p>The maximum number of results to return in a single call. Minimum value of 1, maximum value of 100. Default is 20.</p>",
        "RetrieveMemoryRecordsInput$maxResults": "<p>The maximum number of results to return in a single call. Minimum value of 1, maximum value of 100. Default is 20.</p>"
      }
    },
    "MemoryContent": {
      "base": "<p>Contains the content of a memory record.</p>",
      "refs": {
        "MemoryRecord$content": "<p>The content of the memory record.</p>",
        "MemoryRecordSummary$content": "<p>The content of the memory record.</p>"
      }
    },
    "MemoryId": {
      "base": null,
      "refs": {
        "CreateEventInput$memoryId": "<p>The identifier of the AgentCore Memory resource in which to create the event.</p>",
        "DeleteEventInput$memoryId": "<p>The identifier of the AgentCore Memory resource from which to delete the event.</p>",
        "DeleteMemoryRecordInput$memoryId": "<p>The identifier of the AgentCore Memory resource from which to delete the memory record.</p>",
        "Event$memoryId": "<p>The identifier of the AgentCore Memory resource containing the event.</p>",
        "GetEventInput$memoryId": "<p>The identifier of the AgentCore Memory resource containing the event.</p>",
        "GetMemoryRecordInput$memoryId": "<p>The identifier of the AgentCore Memory resource containing the memory record.</p>",
        "ListActorsInput$memoryId": "<p>The identifier of the AgentCore Memory resource for which to list actors.</p>",
        "ListEventsInput$memoryId": "<p>The identifier of the AgentCore Memory resource for which to list events.</p>",
        "ListMemoryRecordsInput$memoryId": "<p>The identifier of the AgentCore Memory resource for which to list memory records.</p>",
        "ListSessionsInput$memoryId": "<p>The identifier of the AgentCore Memory resource for which to list sessions.</p>",
        "RetrieveMemoryRecordsInput$memoryId": "<p>The identifier of the AgentCore Memory resource from which to retrieve memory records.</p>"
      }
    },
    "MemoryRecord": {
      "base": "<p>Contains information about a memory record in an AgentCore Memory resource.</p>",
      "refs": {
        "GetMemoryRecordOutput$memoryRecord": "<p>The requested memory record.</p>"
      }
    },
    "MemoryRecordId": {
      "base": null,
      "refs": {
        "MemoryRecord$memoryRecordId": "<p>The unique identifier of the memory record.</p>",
        "MemoryRecordSummary$memoryRecordId": "<p>The unique identifier of the memory record.</p>"
      }
    },
    "MemoryRecordSummary": {
      "base": "<p>Contains summary information about a memory record.</p>",
      "refs": {
        "MemoryRecordSummaryList$member": null
      }
    },
    "MemoryRecordSummaryList": {
      "base": null,
      "refs": {
        "ListMemoryRecordsOutput$memoryRecordSummaries": "<p>The list of memory record summaries that match the specified criteria.</p>",
        "RetrieveMemoryRecordsOutput$memoryRecordSummaries": "<p>The list of memory record summaries that match the search criteria, ordered by relevance.</p>"
      }
    },
    "MemoryStrategyId": {
      "base": null,
      "refs": {
        "ListMemoryRecordsInput$memoryStrategyId": "<p>The memory strategy identifier to filter memory records by. If specified, only memory records with this strategy ID are returned.</p>",
        "MemoryRecord$memoryStrategyId": "<p>The identifier of the memory strategy associated with this record.</p>",
        "MemoryRecordSummary$memoryStrategyId": "<p>The identifier of the memory strategy associated with this record.</p>",
        "SearchCriteria$memoryStrategyId": "<p>The memory strategy identifier to filter memory records by.</p>"
      }
    },
    "MimeType": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$contentType": "<p>The MIME type of the input data in the payload. This tells the agent runtime how to interpret the payload data. Common values include application/json for JSON data.</p>",
        "InvokeAgentRuntimeRequest$accept": "<p>The desired MIME type for the response from the agent runtime. This tells the agent runtime what format to use for the response data. Common values include application/json for JSON data.</p>"
      }
    },
    "Name": {
      "base": null,
      "refs": {
        "BrowserSessionSummary$name": "<p>The name of the browser session. This name helps identify and manage the session.</p>",
        "CodeInterpreterSessionSummary$name": "<p>The name of the code interpreter session. This name helps identify and manage the session.</p>",
        "GetBrowserSessionResponse$name": "<p>The name of the browser session.</p>",
        "GetCodeInterpreterSessionResponse$name": "<p>The name of the code interpreter session.</p>",
        "StartBrowserSessionRequest$name": "<p>The name of the browser session. This name helps you identify and manage the session. The name does not need to be unique.</p>",
        "StartCodeInterpreterSessionRequest$name": "<p>The name of the code interpreter session. This name helps you identify and manage the session. The name does not need to be unique.</p>"
      }
    },
    "Namespace": {
      "base": null,
      "refs": {
        "ListMemoryRecordsInput$namespace": "<p>The namespace to filter memory records by. If specified, only memory records in this namespace are returned.</p>",
        "NamespacesList$member": null,
        "RetrieveMemoryRecordsInput$namespace": "<p>The namespace to filter memory records by. If specified, only memory records in this namespace are searched.</p>"
      }
    },
    "NamespacesList": {
      "base": null,
      "refs": {
        "MemoryRecord$namespaces": "<p>The namespaces associated with this memory record. Namespaces help organize and categorize memory records.</p>",
        "MemoryRecordSummary$namespaces": "<p>The namespaces associated with this memory record.</p>"
      }
    },
    "NextToken": {
      "base": null,
      "refs": {
        "ListBrowserSessionsRequest$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>",
        "ListBrowserSessionsResponse$nextToken": "<p>The token to use in a subsequent <code>ListBrowserSessions</code> request to get the next set of results.</p>",
        "ListCodeInterpreterSessionsRequest$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. If not specified, Amazon Bedrock returns the first page of results.</p>",
        "ListCodeInterpreterSessionsResponse$nextToken": "<p>The token to use in a subsequent <code>ListCodeInterpreterSessions</code> request to get the next set of results.</p>"
      }
    },
    "NonBlankString": {
      "base": null,
      "refs": {
        "AccessDeniedException$message": null,
        "ConflictException$message": null,
        "InternalServerException$message": null,
        "ResourceNotFoundException$message": null,
        "RuntimeClientError$message": null,
        "ServiceQuotaExceededException$message": null,
        "ThrottlingException$message": null,
        "UnauthorizedException$message": null
      }
    },
    "Oauth2FlowType": {
      "base": null,
      "refs": {
        "GetResourceOauth2TokenRequest$oauth2Flow": "<p>The type of flow to be performed</p>"
      }
    },
    "PaginationToken": {
      "base": null,
      "refs": {
        "ListActorsInput$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
        "ListActorsOutput$nextToken": "<p>The token to use in a subsequent request to get the next set of results. This value is null when there are no more results to return.</p>",
        "ListEventsInput$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
        "ListEventsOutput$nextToken": "<p>The token to use in a subsequent request to get the next set of results. This value is null when there are no more results to return.</p>",
        "ListMemoryRecordsInput$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
        "ListMemoryRecordsOutput$nextToken": "<p>The token to use in a subsequent request to get the next set of results. This value is null when there are no more results to return.</p>",
        "ListSessionsInput$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
        "ListSessionsOutput$nextToken": "<p>The token to use in a subsequent request to get the next set of results. This value is null when there are no more results to return.</p>",
        "RetrieveMemoryRecordsInput$nextToken": "<p>The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results.</p>",
        "RetrieveMemoryRecordsOutput$nextToken": "<p>The token to use in a subsequent request to get the next set of results. This value is null when there are no more results to return.</p>"
      }
    },
    "PayloadType": {
      "base": "<p>Contains the payload content for an event.</p>",
      "refs": {
        "PayloadTypeList$member": null
      }
    },
    "PayloadTypeList": {
      "base": null,
      "refs": {
        "CreateEventInput$payload": "<p>The content payload of the event. This can include conversational data or binary content.</p>",
        "Event$payload": "<p>The content payload of the event.</p>"
      }
    },
    "ProgrammingLanguage": {
      "base": null,
      "refs": {
        "ToolArguments$language": "<p>The programming language of the code to execute. This tells the code interpreter which language runtime to use for execution. Common values include 'python', 'javascript', and 'r'.</p>"
      }
    },
    "ResourceContent": {
      "base": "<p>Contains information about resource content.</p>",
      "refs": {
        "ContentBlock$resource": "<p>The resource associated with the content block.</p>"
      }
    },
    "ResourceContentType": {
      "base": null,
      "refs": {
        "ResourceContent$type": "<p>The type of resource content.</p>"
      }
    },
    "ResourceNotFoundException": {
      "base": "<p>The exception that occurs when the specified resource does not exist. This can happen when using an invalid identifier or when trying to access a resource that has been deleted.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$resourceNotFoundException": null
      }
    },
    "ResourceOauth2ReturnUrlType": {
      "base": null,
      "refs": {
        "GetResourceOauth2TokenRequest$resourceOauth2ReturnUrl": "<p>Callback url to redirect after token retrieval completes. Should be one of the provideded urls during WorkloadIdentity creation</p>"
      }
    },
    "ResponseStream": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeResponse$response": "<p>The response data from the agent runtime. The format of this data depends on the specific agent configuration and the requested accept type. For most agents, this is a JSON object containing the agent's response to the user's request.</p>"
      }
    },
    "RetrieveMemoryRecordsInput": {
      "base": null,
      "refs": {}
    },
    "RetrieveMemoryRecordsOutput": {
      "base": null,
      "refs": {}
    },
    "Role": {
      "base": null,
      "refs": {
        "Conversational$role": "<p>The role of the participant in the conversation (for example, \"user\" or \"assistant\").</p>"
      }
    },
    "RuntimeClientError": {
      "base": "<p>The exception that occurs when there is an error in the runtime client. This can happen due to network issues, invalid configuration, or other client-side problems. Check the error message for specific details about the error.</p>",
      "refs": {}
    },
    "ScopeType": {
      "base": null,
      "refs": {
        "ScopesListType$member": null
      }
    },
    "ScopesListType": {
      "base": null,
      "refs": {
        "GetResourceOauth2TokenRequest$scopes": "<p>The OAuth scopes requested</p>"
      }
    },
    "SearchCriteria": {
      "base": "<p>Contains search criteria for retrieving memory records.</p>",
      "refs": {
        "RetrieveMemoryRecordsInput$searchCriteria": "<p>The search criteria to use for finding relevant memory records. This includes the search query, memory strategy ID, and other search parameters.</p>"
      }
    },
    "SearchCriteriaSearchQueryString": {
      "base": null,
      "refs": {
        "SearchCriteria$searchQuery": "<p>The search query to use for finding relevant memory records.</p>"
      }
    },
    "SearchCriteriaTopKInteger": {
      "base": null,
      "refs": {
        "SearchCriteria$topK": "<p>The maximum number of top-scoring memory records to return. This value is used for semantic search ranking.</p>"
      }
    },
    "SensitiveString": {
      "base": null,
      "refs": {
        "MemoryContent$text": "<p>The text content of the memory record.</p>"
      }
    },
    "ServiceException": {
      "base": "<p>The service encountered an internal error. Try your request again later.</p>",
      "refs": {}
    },
    "ServiceQuotaExceededException": {
      "base": "<p>The exception that occurs when the request would cause a service quota to be exceeded. Review your service quotas and either reduce your request rate or request a quota increase.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$serviceQuotaExceededException": null
      }
    },
    "SessionId": {
      "base": null,
      "refs": {
        "CreateEventInput$sessionId": "<p>The identifier of the session in which this event occurs. A session represents a sequence of related events.</p>",
        "DeleteEventInput$sessionId": "<p>The identifier of the session containing the event to delete.</p>",
        "Event$sessionId": "<p>The identifier of the session containing the event.</p>",
        "GetEventInput$sessionId": "<p>The identifier of the session containing the event.</p>",
        "InvokeAgentRuntimeResponse$runtimeSessionId": "<p>The identifier of the runtime session.</p>",
        "InvokeAgentRuntimeResponse$mcpSessionId": "<p>The identifier of the MCP session.</p>",
        "ListEventsInput$sessionId": "<p>The identifier of the session for which to list events. If specified, only events from this session are returned.</p>",
        "SessionSummary$sessionId": "<p>The unique identifier of the session.</p>"
      }
    },
    "SessionSummary": {
      "base": "<p>Contains summary information about a session in an AgentCore Memory resource.</p>",
      "refs": {
        "SessionSummaryList$member": null
      }
    },
    "SessionSummaryList": {
      "base": null,
      "refs": {
        "ListSessionsOutput$sessionSummaries": "<p>The list of session summaries that match the specified criteria.</p>"
      }
    },
    "SessionType": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$runtimeSessionId": "<p>The identifier of the runtime session.</p>"
      }
    },
    "StartBrowserSessionRequest": {
      "base": null,
      "refs": {}
    },
    "StartBrowserSessionResponse": {
      "base": null,
      "refs": {}
    },
    "StartCodeInterpreterSessionRequest": {
      "base": null,
      "refs": {}
    },
    "StartCodeInterpreterSessionResponse": {
      "base": null,
      "refs": {}
    },
    "StopBrowserSessionRequest": {
      "base": null,
      "refs": {}
    },
    "StopBrowserSessionResponse": {
      "base": null,
      "refs": {}
    },
    "StopCodeInterpreterSessionRequest": {
      "base": null,
      "refs": {}
    },
    "StopCodeInterpreterSessionResponse": {
      "base": null,
      "refs": {}
    },
    "StreamUpdate": {
      "base": "<p>Contains information about an update to a stream.</p>",
      "refs": {
        "UpdateBrowserStreamRequest$streamUpdate": "<p>The update to apply to the browser stream.</p>"
      }
    },
    "String": {
      "base": null,
      "refs": {
        "BrowserSessionSummary$browserIdentifier": "<p>The unique identifier of the browser associated with the session. This identifier specifies which browser environment is used for the session.</p>",
        "CodeInterpreterSessionSummary$codeInterpreterIdentifier": "<p>The unique identifier of the code interpreter associated with the session. This identifier specifies which code interpreter environment is used for the session.</p>",
        "ContentBlock$text": "<p>The text content of the block.</p>",
        "ContentBlock$mimeType": "<p>The MIME type of the content.</p>",
        "ContentBlock$uri": "<p>The URI of the content.</p>",
        "ContentBlock$name": "<p>The name of the content block.</p>",
        "ContentBlock$description": "<p>The description of the content block.</p>",
        "CreateEventInput$clientToken": "<p>A unique, case-sensitive identifier to ensure that the operation completes no more than one time. If this token matches a previous request, AgentCore ignores the request, but does not return an error.</p>",
        "DeleteMemoryRecordInput$memoryRecordId": "<p>The identifier of the memory record to delete.</p>",
        "DeleteMemoryRecordOutput$memoryRecordId": "<p>The identifier of the memory record that was deleted.</p>",
        "GetBrowserSessionRequest$browserIdentifier": "<p>The unique identifier of the browser associated with the session.</p>",
        "GetBrowserSessionResponse$browserIdentifier": "<p>The identifier of the browser.</p>",
        "GetBrowserSessionResponse$sessionReplayArtifact": "<p>The artifact containing the session replay information.</p>",
        "GetCodeInterpreterSessionRequest$codeInterpreterIdentifier": "<p>The unique identifier of the code interpreter associated with the session.</p>",
        "GetCodeInterpreterSessionResponse$codeInterpreterIdentifier": "<p>The identifier of the code interpreter.</p>",
        "GetMemoryRecordInput$memoryRecordId": "<p>The identifier of the memory record to retrieve.</p>",
        "GetResourceOauth2TokenResponse$authorizationUrl": "<p>The URL for the authorization process, provided if the Access token requires user Authorization.</p>",
        "InvalidInputException$message": null,
        "InvokeAgentRuntimeRequest$agentRuntimeArn": "<p>The Amazon Web Services Resource Name (ARN) of the agent runtime to invoke. The ARN uniquely identifies the agent runtime resource in Amazon Bedrock.</p>",
        "InvokeAgentRuntimeRequest$qualifier": "<p>The qualifier to use for the agent runtime. This can be a version number or an endpoint name that points to a specific version. If not specified, Amazon Bedrock uses the default version of the agent runtime.</p>",
        "InvokeAgentRuntimeResponse$mcpProtocolVersion": "<p>The version of the MCP protocol being used.</p>",
        "InvokeAgentRuntimeResponse$traceId": "<p>The trace identifier for request tracking.</p>",
        "InvokeAgentRuntimeResponse$traceParent": "<p>The parent trace information for distributed tracing.</p>",
        "InvokeAgentRuntimeResponse$traceState": "<p>The trace state information for distributed tracing.</p>",
        "InvokeAgentRuntimeResponse$baggage": "<p>Additional context information for distributed tracing.</p>",
        "InvokeAgentRuntimeResponse$contentType": "<p>The MIME type of the response data. This indicates how to interpret the response data. Common values include application/json for JSON data.</p>",
        "InvokeCodeInterpreterRequest$codeInterpreterIdentifier": "<p>The unique identifier of the code interpreter associated with the session. This must match the identifier used when creating the session with <code>StartCodeInterpreterSession</code>.</p>",
        "ListBrowserSessionsRequest$browserIdentifier": "<p>The unique identifier of the browser to list sessions for. If specified, only sessions for this browser are returned. If not specified, sessions for all browsers are returned.</p>",
        "ListCodeInterpreterSessionsRequest$codeInterpreterIdentifier": "<p>The unique identifier of the code interpreter to list sessions for. If specified, only sessions for this code interpreter are returned. If not specified, sessions for all code interpreters are returned.</p>",
        "ResourceContent$uri": "<p>The URI of the resource content.</p>",
        "ResourceContent$mimeType": "<p>The MIME type of the resource content.</p>",
        "ResourceContent$text": "<p>The text resource content.</p>",
        "ServiceException$message": null,
        "StartBrowserSessionRequest$browserIdentifier": "<p>The unique identifier of the browser to use for this session. This identifier specifies which browser environment to initialize for the session.</p>",
        "StartBrowserSessionResponse$browserIdentifier": "<p>The identifier of the browser.</p>",
        "StartCodeInterpreterSessionRequest$codeInterpreterIdentifier": "<p>The unique identifier of the code interpreter to use for this session. This identifier specifies which code interpreter environment to initialize for the session.</p>",
        "StartCodeInterpreterSessionResponse$codeInterpreterIdentifier": "<p>The identifier of the code interpreter.</p>",
        "StopBrowserSessionRequest$browserIdentifier": "<p>The unique identifier of the browser associated with the session.</p>",
        "StopBrowserSessionResponse$browserIdentifier": "<p>The identifier of the browser.</p>",
        "StopCodeInterpreterSessionRequest$codeInterpreterIdentifier": "<p>The unique identifier of the code interpreter associated with the session.</p>",
        "StopCodeInterpreterSessionResponse$codeInterpreterIdentifier": "<p>The identifier of the code interpreter.</p>",
        "ThrottledException$message": null,
        "ToolResultStructuredContent$taskId": "<p>The identifier of the task that produced the result.</p>",
        "ToolResultStructuredContent$stdout": "<p>The standard output from the tool execution.</p>",
        "ToolResultStructuredContent$stderr": "<p>The standard error output from the tool execution.</p>",
        "UpdateBrowserStreamRequest$browserIdentifier": "<p>The identifier of the browser.</p>",
        "UpdateBrowserStreamResponse$browserIdentifier": "<p>The identifier of the browser.</p>",
        "ValidationException$message": null,
        "ValidationExceptionField$name": "<p>The name of the field.</p>",
        "ValidationExceptionField$message": "<p>A message describing why this field failed validation.</p>"
      }
    },
    "StringList": {
      "base": null,
      "refs": {
        "ToolArguments$paths": "<p>The paths for the tool operation.</p>"
      }
    },
    "StringType": {
      "base": null,
      "refs": {
        "InvokeAgentRuntimeRequest$mcpSessionId": "<p>The identifier of the MCP session.</p>",
        "InvokeAgentRuntimeRequest$mcpProtocolVersion": "<p>The version of the MCP protocol being used.</p>",
        "InvokeAgentRuntimeRequest$runtimeUserId": "<p>The identifier of the runtime user.</p>"
      }
    },
    "TaskStatus": {
      "base": null,
      "refs": {
        "ToolResultStructuredContent$taskStatus": "<p>The status of the task that produced the result.</p>"
      }
    },
    "ThrottledException": {
      "base": "<p>The request was denied due to request throttling. Reduce the frequency of requests and try again.</p>",
      "refs": {}
    },
    "ThrottlingException": {
      "base": "<p>The exception that occurs when the request was denied due to request throttling. This happens when you exceed the allowed request rate for an operation. Reduce the frequency of requests or implement exponential backoff retry logic in your application.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$throttlingException": null
      }
    },
    "Timestamp": {
      "base": null,
      "refs": {
        "CreateEventInput$eventTimestamp": "<p>The timestamp when the event occurred. If not specified, the current time is used.</p>",
        "Event$eventTimestamp": "<p>The timestamp when the event occurred.</p>",
        "MemoryRecord$createdAt": "<p>The timestamp when the memory record was created.</p>",
        "MemoryRecordSummary$createdAt": "<p>The timestamp when the memory record was created.</p>",
        "SessionSummary$createdAt": "<p>The timestamp when the session was created.</p>"
      }
    },
    "ToolArguments": {
      "base": "<p>The collection of arguments that specify the operation to perform and its parameters when invoking a tool in Amazon Bedrock. Different tools require different arguments, and this structure provides a flexible way to pass the appropriate arguments to each tool type.</p>",
      "refs": {
        "InvokeCodeInterpreterRequest$arguments": "<p>The arguments for the code interpreter. This includes the code to execute and any additional parameters such as the programming language, whether to clear the execution context, and other execution options. The structure of this parameter depends on the specific code interpreter being used.</p>"
      }
    },
    "ToolName": {
      "base": null,
      "refs": {
        "InvokeCodeInterpreterRequest$name": "<p>The name of the code interpreter to invoke.</p>"
      }
    },
    "ToolResultStructuredContent": {
      "base": "<p>Contains structured content from a tool result.</p>",
      "refs": {
        "CodeInterpreterResult$structuredContent": "<p>The structured content of the execution result. This includes additional metadata about the execution, such as execution time, memory usage, and structured representations of output data. The format depends on the specific code interpreter and execution context.</p>"
      }
    },
    "UnauthorizedException": {
      "base": "<p>This exception is thrown when the JWT bearer token is invalid or not found for OAuth bearer token based access</p>",
      "refs": {}
    },
    "UpdateBrowserStreamRequest": {
      "base": null,
      "refs": {}
    },
    "UpdateBrowserStreamResponse": {
      "base": null,
      "refs": {}
    },
    "UserIdType": {
      "base": null,
      "refs": {
        "GetWorkloadAccessTokenForUserIdRequest$userId": "<p>The user id of the user you are retrieving the access token for.</p>"
      }
    },
    "UserTokenType": {
      "base": null,
      "refs": {
        "GetWorkloadAccessTokenForJWTRequest$userToken": "<p>OAuth2 token issued by the user's identity provider</p>"
      }
    },
    "ValidationException": {
      "base": "<p>The exception that occurs when the input fails to satisfy the constraints specified by the service. Check the error message for details about which input parameter is invalid and correct your request.</p>",
      "refs": {
        "CodeInterpreterStreamOutput$validationException": null
      }
    },
    "ValidationExceptionField": {
      "base": "<p>Stores information about a field passed inside a request that resulted in an exception.</p>",
      "refs": {
        "ValidationExceptionFieldList$member": null
      }
    },
    "ValidationExceptionFieldList": {
      "base": null,
      "refs": {
        "ValidationException$fieldList": null
      }
    },
    "ValidationExceptionReason": {
      "base": null,
      "refs": {
        "ValidationException$reason": null
      }
    },
    "ViewPort": {
      "base": "<p>The configuration that defines the dimensions of a browser viewport in a browser session. The viewport determines the visible area of web content and affects how web pages are rendered and displayed. Proper viewport configuration ensures that web content is displayed correctly for the agent's browsing tasks.</p>",
      "refs": {
        "GetBrowserSessionResponse$viewPort": null,
        "StartBrowserSessionRequest$viewPort": "<p>The dimensions of the browser viewport for this session. This determines the visible area of the web content and affects how web pages are rendered. If not specified, Amazon Bedrock uses a default viewport size.</p>"
      }
    },
    "ViewPortHeight": {
      "base": null,
      "refs": {
        "ViewPort$height": "<p>The height of the viewport in pixels. This value determines the vertical dimension of the visible area. Valid values range from 600 to 1080 pixels.</p>"
      }
    },
    "ViewPortWidth": {
      "base": null,
      "refs": {
        "ViewPort$width": "<p>The width of the viewport in pixels. This value determines the horizontal dimension of the visible area. Valid values range from 800 to 1920 pixels.</p>"
      }
    },
    "WorkloadIdentityNameType": {
      "base": null,
      "refs": {
        "GetWorkloadAccessTokenForJWTRequest$workloadName": "<p>Unique identifier for the registered agent</p>",
        "GetWorkloadAccessTokenForUserIdRequest$workloadName": "<p>The name of the worklaod you want to get the access token of.</p>",
        "GetWorkloadAccessTokenRequest$workloadName": "<p>Unique identifier for the registered agent</p>"
      }
    },
    "WorkloadIdentityTokenType": {
      "base": null,
      "refs": {
        "GetResourceApiKeyRequest$workloadIdentityToken": "<p>The identity token of the workload you want to get the API Key of.</p>",
        "GetResourceOauth2TokenRequest$workloadIdentityToken": "<p>The identity token of the workload you want to retrive the Oauth2 Token of.</p>",
        "GetWorkloadAccessTokenForJWTResponse$workloadAccessToken": "<p>Opaque token representing both agent and user identity</p>",
        "GetWorkloadAccessTokenForUserIdResponse$workloadAccessToken": "<p>The workload access token of the named workload.</p>",
        "GetWorkloadAccessTokenResponse$workloadAccessToken": "<p>Opaque token representing both agent and user identity</p>"
      }
    }
  }
}
