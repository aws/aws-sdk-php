<?php
// This file was auto-generated from sdk-root/src/data/metering.marketplace/2016-01-14/docs-2.json
return [ 'version' => '2.0', 'service' => '<fullname>Amazon Web Services Marketplace Metering Service</fullname> <p>This reference provides descriptions of the low-level Marketplace Metering Service API.</p> <p>Amazon Web Services Marketplace sellers can use this API to submit usage data for custom usage dimensions.</p> <p>For information about the permissions that you need to use this API, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/iam-user-policy-for-aws-marketplace-actions.html">Amazon Web Services Marketplace metering and entitlement API permissions</a> in the <i>Amazon Web Services Marketplace Seller Guide.</i> </p> <p> <b>Submitting metering records</b> </p> <p> <i>MeterUsage</i> </p> <ul> <li> <p>Submits the metering record for an Amazon Web Services Marketplace product.</p> </li> <li> <p>Called from: Amazon Elastic Compute Cloud (Amazon EC2) instance or a container running on either Amazon Elastic Kubernetes Service (Amazon EKS) or Amazon Elastic Container Service (Amazon ECS)</p> </li> <li> <p>Supported product types: Amazon Machine Images (AMIs) and containers</p> </li> <li> <p>Vendor-metered tagging: Supported allocation tagging</p> </li> </ul> <p> <i>BatchMeterUsage</i> </p> <ul> <li> <p>Submits the metering record for a set of customers. <code>BatchMeterUsage</code> API calls are captured by CloudTrail. You can use CloudTrail to verify that the software as a subscription (SaaS) metering records that you sent are accurate by searching for records with the <code>eventName</code> of <code>BatchMeterUsage</code>. You can also use CloudTrail to audit records over time. For more information, see the <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-concepts.html">CloudTrail User Guide</a>.</p> </li> <li> <p>Called from: SaaS applications</p> </li> <li> <p>Supported product type: SaaS</p> </li> <li> <p>Vendor-metered tagging: Supports allocation tagging</p> </li> </ul> <p> <b>Accepting new customers</b> </p> <p> <i>ResolveCustomer</i> </p> <ul> <li> <p>Resolves the registration token that the buyer submits through the browser during the registration process. Obtains a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> </li> <li> <p>Called from: SaaS application during the registration process</p> </li> <li> <p>Supported product type: SaaS</p> </li> <li> <p>Vendor-metered tagging: Not applicable</p> </li> </ul> <p> <b>Entitlement and metering for paid container products</b> </p> <p> <i>RegisteredUsage</i> </p> <ul> <li> <p>Provides software entitlement and metering. Paid container software products sold through Amazon Web Services Marketplace must integrate with the Marketplace Metering Service and call the <code>RegisterUsage</code> operation. Free and Bring Your Own License model (BYOL) products for Amazon ECS or Amazon EKS aren\'t required to call <code>RegisterUsage</code>. However, you can do so if you want to receive usage data in your seller reports. For more information about using the <code>RegisterUsage</code> operation, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-based products</a>.</p> </li> <li> <p>Called from: Paid container software products</p> </li> <li> <p>Supported product type: Containers</p> </li> <li> <p>Vendor-metered tagging: Not applicable</p> </li> </ul> <p> <b>Entitlement custom metering for container products</b> </p> <ul> <li> <p>MeterUsage API is available in GovCloud Regions but only supports AMI FCP products in GovCloud Regions. Flexible Consumption Pricing (FCP) Container products aren’t supported in GovCloud Regions: us-gov-west-1 and us-gov-east-1. For more information, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/container-based-products.html">Container-based products</a>.</p> </li> <li> <p>Custom metering for container products are called using the MeterUsage API. The API is used for FCP AMI and FCP Container product metering.</p> </li> </ul> <p> <b>Custom metering for Amazon EKS is available in 17 Amazon Web Services Regions</b> </p> <ul> <li> <p>The metering service supports Amazon ECS and EKS for Flexible Consumption Pricing (FCP) products using MeterUsage API. Amazon ECS is supported in all Amazon Web Services Regions that MeterUsage API is available except for GovCloud.</p> </li> <li> <p>Amazon EKS is supported in the following: us-east-1, us-east-2, us-west-1, us-west-2, eu-west-1, eu-central-1, eu-west-2, eu-west-3, eu-north-1, ap-east-1, ap-southeast-1, ap-northeast-1, ap-southeast-2, ap-northeast-2, ap-south-1, ca-central-1, sa-east-1.</p> <note> <p>For questions about adding Amazon Web Services Regions for metering, contact <a href="mailto://aws.amazon.com/marketplace/management/contact-us/">Amazon Web Services Marketplace Seller Operations</a>.</p> </note> </li> </ul>', 'operations' => [ 'BatchMeterUsage' => '<important> <p> The <code>CustomerIdentifier</code> parameter is scheduled for deprecation. Use <code>CustomerAWSAccountID</code> instead.</p> <p>These parameters are mutually exclusive. You can\'t specify both <code>CustomerIdentifier</code> and <code>CustomerAWSAccountID</code> in the same request. </p> </important> <p>To post metering records for customers, SaaS applications call <code>BatchMeterUsage</code>, which is used for metering SaaS flexible consumption pricing (FCP). Identical requests are idempotent and can be retried with the same records or a subset of records. Each <code>BatchMeterUsage</code> request is for only one product. If you want to meter usage for multiple products, you must make multiple <code>BatchMeterUsage</code> calls.</p> <p>Usage records should be submitted in quick succession following a recorded event. Usage records aren\'t accepted 6 hours or more after an event.</p> <p> <code>BatchMeterUsage</code> can process up to 25 <code>UsageRecords</code> at a time, and each request must be less than 1 MB in size. Optionally, you can have multiple usage allocations for usage data that\'s split into buckets according to predefined tags.</p> <p> <code>BatchMeterUsage</code> returns a list of <code>UsageRecordResult</code> objects, which have each <code>UsageRecord</code>. It also returns a list of <code>UnprocessedRecords</code>, which indicate errors on the service side that should be retried.</p> <p>For Amazon Web Services Regions that support <code>BatchMeterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/APIReference/metering-regions.html#batchmeterusage-region-support">BatchMeterUsage Region support</a>. </p> <note> <p>For an example of <code>BatchMeterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-batchmeterusage-example"> BatchMeterUsage code example</a> in the <i>Amazon Web Services Marketplace Seller Guide</i>.</p> </note>', 'MeterUsage' => '<p>API to emit metering records. For identical requests, the API is idempotent and returns the metering record ID. This is used for metering flexible consumption pricing (FCP) Amazon Machine Images (AMI) and container products.</p> <p> <code>MeterUsage</code> is authenticated on the buyer\'s Amazon Web Services account using credentials from the Amazon EC2 instance, Amazon ECS task, or Amazon EKS pod.</p> <p> <code>MeterUsage</code> can optionally include multiple usage allocations, to provide customers with usage data split into buckets by tags that you define (or allow the customer to define).</p> <p>Usage records are expected to be submitted as quickly as possible after the event that is being recorded, and are not accepted more than 6 hours after the event.</p> <p>For Amazon Web Services Regions that support <code>MeterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/APIReference/metering-regions.html#meterusage-region-support-ec2">MeterUsage Region support for Amazon EC2</a> and <a href="https://docs.aws.amazon.com/marketplace/latest/APIReference/metering-regions.html#meterusage-region-support-ecs-eks">MeterUsage Region support for Amazon ECS and Amazon EKS</a>. </p>', 'RegisterUsage' => '<p>Paid container software products sold through Amazon Web Services Marketplace must integrate with the Amazon Web Services Marketplace Metering Service and call the <code>RegisterUsage</code> operation for software entitlement and metering. Free and BYOL products for Amazon ECS or Amazon EKS aren\'t required to call <code>RegisterUsage</code>, but you may choose to do so if you would like to receive usage data in your seller reports. The sections below explain the behavior of <code>RegisterUsage</code>. <code>RegisterUsage</code> performs two primary functions: metering and entitlement.</p> <ul> <li> <p> <i>Entitlement</i>: <code>RegisterUsage</code> allows you to verify that the customer running your paid software is subscribed to your product on Amazon Web Services Marketplace, enabling you to guard against unauthorized use. Your container image that integrates with <code>RegisterUsage</code> is only required to guard against unauthorized use at container startup, as such a <code>CustomerNotSubscribedException</code> or <code>PlatformNotSupportedException</code> will only be thrown on the initial call to <code>RegisterUsage</code>. Subsequent calls from the same Amazon ECS task instance (e.g. task-id) or Amazon EKS pod will not throw a <code>CustomerNotSubscribedException</code>, even if the customer unsubscribes while the Amazon ECS task or Amazon EKS pod is still running.</p> </li> <li> <p> <i>Metering</i>: <code>RegisterUsage</code> meters software use per ECS task, per hour, or per pod for Amazon EKS with usage prorated to the second. A minimum of 1 minute of usage applies to tasks that are short lived. For example, if a customer has a 10 node Amazon ECS or Amazon EKS cluster and a service configured as a Daemon Set, then Amazon ECS or Amazon EKS will launch a task on all 10 cluster nodes and the customer will be charged for 10 tasks. Software metering is handled by the Amazon Web Services Marketplace metering control plane—your software is not required to perform metering-specific actions other than to call <code>RegisterUsage</code> to commence metering. The Amazon Web Services Marketplace metering control plane will also bill customers for running ECS tasks and Amazon EKS pods, regardless of the customer\'s subscription state, which removes the need for your software to run entitlement checks at runtime. For containers, <code>RegisterUsage</code> should be called immediately at launch. If you don’t register the container within the first 6 hours of the launch, Amazon Web Services Marketplace Metering Service doesn’t provide any metering guarantees for previous months. Metering will continue, however, for the current month forward until the container ends. <code>RegisterUsage</code> is for metering paid hourly container products.</p> <p>For Amazon Web Services Regions that support <code>RegisterUsage</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/APIReference/metering-regions.html#registerusage-region-support">RegisterUsage Region support</a>. </p> </li> </ul>', 'ResolveCustomer' => '<p> <code>ResolveCustomer</code> is called by a SaaS application during the registration process. When a buyer visits your website during the registration process, the buyer submits a registration token through their browser. The registration token is resolved through this API to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p> <note> <p>To successfully resolve the token, the API must be called from the account that was used to publish the SaaS application. For an example of using <code>ResolveCustomer</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/userguide/saas-code-examples.html#saas-resolvecustomer-example"> ResolveCustomer code example</a> in the <i>Amazon Web Services Marketplace Seller Guide</i>.</p> </note> <p>Permission is required for this operation. Your IAM role or user performing this operation requires a policy to allow the <code>aws-marketplace:ResolveCustomer</code> action. For more information, see <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_awsmarketplacemeteringservice.html">Actions, resources, and condition keys for Amazon Web Services Marketplace Metering Service</a> in the <i>Service Authorization Reference</i>.</p> <p>For Amazon Web Services Regions that support <code>ResolveCustomer</code>, see <a href="https://docs.aws.amazon.com/marketplace/latest/APIReference/metering-regions.html#resolvecustomer-region-support">ResolveCustomer Region support</a>. </p>', ], 'shapes' => [ 'AllocatedUsageQuantity' => [ 'base' => NULL, 'refs' => [ 'UsageAllocation$AllocatedUsageQuantity' => '<p>The total quantity allocated to this bucket of usage.</p>', ], ], 'BatchMeterUsageRequest' => [ 'base' => '<p>A <code>BatchMeterUsageRequest</code> contains <code>UsageRecords</code>, which indicate quantities of usage within your application.</p>', 'refs' => [], ], 'BatchMeterUsageResult' => [ 'base' => '<p>Contains the <code>UsageRecords</code> processed by <code>BatchMeterUsage</code> and any records that have failed due to transient error.</p>', 'refs' => [], ], 'Boolean' => [ 'base' => NULL, 'refs' => [ 'MeterUsageRequest$DryRun' => '<p>Checks whether you have the permissions required for the action, but does not make the request. If you have the permissions, the request returns <code>DryRunOperation</code>; otherwise, it returns <code>UnauthorizedException</code>. Defaults to <code>false</code> if not specified.</p>', ], ], 'CustomerAWSAccountId' => [ 'base' => NULL, 'refs' => [ 'ResolveCustomerResult$CustomerAWSAccountId' => '<p>The <code>CustomerAWSAccountId</code> provides the Amazon Web Services account ID associated with the <code>CustomerIdentifier</code> for the individual customer.</p>', 'UsageRecord$CustomerAWSAccountId' => '<p> The <code>CustomerAWSAccountID</code> parameter specifies the AWS account ID of the buyer. </p>', ], ], 'CustomerIdentifier' => [ 'base' => NULL, 'refs' => [ 'ResolveCustomerResult$CustomerIdentifier' => '<p>The <code>CustomerIdentifier</code> is used to identify an individual customer in your application. Calls to <code>BatchMeterUsage</code> require <code>CustomerIdentifiers</code> for each <code>UsageRecord</code>.</p>', 'UsageRecord$CustomerIdentifier' => '<p>The <code>CustomerIdentifier</code> is obtained through the <code>ResolveCustomer</code> operation and represents an individual buyer in your application.</p>', ], ], 'CustomerNotEntitledException' => [ 'base' => '<p>Exception thrown when the customer does not have a valid subscription for the product.</p>', 'refs' => [], ], 'DisabledApiException' => [ 'base' => '<p>The API is disabled in the Region.</p>', 'refs' => [], ], 'DuplicateRequestException' => [ 'base' => '<p>A metering record has already been emitted by the same EC2 instance, ECS task, or EKS pod for the given {<code>usageDimension</code>, <code>timestamp</code>} with a different <code>usageQuantity</code>.</p>', 'refs' => [], ], 'ExpiredTokenException' => [ 'base' => '<p>The submitted registration token has expired. This can happen if the buyer\'s browser takes too long to redirect to your page, the buyer has resubmitted the registration token, or your application has held on to the registration token for too long. Your SaaS registration website should redeem this token as soon as it is submitted by the buyer\'s browser.</p>', 'refs' => [], ], 'InternalServiceErrorException' => [ 'base' => '<p>An internal error has occurred. Retry your request. If the problem persists, post a message with details on the Amazon Web Services forums.</p>', 'refs' => [], ], 'InvalidCustomerIdentifierException' => [ 'base' => '<p>You have metered usage for a <code>CustomerIdentifier</code> that does not exist.</p>', 'refs' => [], ], 'InvalidEndpointRegionException' => [ 'base' => '<p>The endpoint being called is in a Amazon Web Services Region different from your EC2 instance, ECS task, or EKS pod. The Region of the Metering Service endpoint and the Amazon Web Services Region of the resource must match.</p>', 'refs' => [], ], 'InvalidProductCodeException' => [ 'base' => '<p>The product code passed does not match the product code used for publishing the product.</p>', 'refs' => [], ], 'InvalidPublicKeyVersionException' => [ 'base' => '<p>Public Key version is invalid.</p>', 'refs' => [], ], 'InvalidRegionException' => [ 'base' => '<p> <code>RegisterUsage</code> must be called in the same Amazon Web Services Region the ECS task was launched in. This prevents a container from hardcoding a Region (e.g. withRegion(“us-east-1”) when calling <code>RegisterUsage</code>.</p>', 'refs' => [], ], 'InvalidTagException' => [ 'base' => '<p>The tag is invalid, or the number of tags is greater than 5.</p>', 'refs' => [], ], 'InvalidTokenException' => [ 'base' => '<p>Registration token is invalid.</p>', 'refs' => [], ], 'InvalidUsageAllocationsException' => [ 'base' => '<p>Sum of allocated usage quantities is not equal to the usage quantity.</p>', 'refs' => [], ], 'InvalidUsageDimensionException' => [ 'base' => '<p>The usage dimension does not match one of the <code>UsageDimensions</code> associated with products.</p>', 'refs' => [], ], 'MeterUsageRequest' => [ 'base' => NULL, 'refs' => [], ], 'MeterUsageResult' => [ 'base' => NULL, 'refs' => [], ], 'NonEmptyString' => [ 'base' => NULL, 'refs' => [ 'RegisterUsageResult$Signature' => '<p>JWT Token</p>', 'ResolveCustomerRequest$RegistrationToken' => '<p>When a buyer visits your website during the registration process, the buyer submits a registration token through the browser. The registration token is resolved to obtain a <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>', ], ], 'Nonce' => [ 'base' => NULL, 'refs' => [ 'RegisterUsageRequest$Nonce' => '<p>(Optional) To scope down the registration to a specific running software instance and guard against replay attacks.</p>', ], ], 'PlatformNotSupportedException' => [ 'base' => '<p>Amazon Web Services Marketplace does not support metering usage from the underlying platform. Currently, Amazon ECS, Amazon EKS, and Fargate are supported.</p>', 'refs' => [], ], 'ProductCode' => [ 'base' => NULL, 'refs' => [ 'BatchMeterUsageRequest$ProductCode' => '<p>Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>', 'MeterUsageRequest$ProductCode' => '<p>Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>', 'RegisterUsageRequest$ProductCode' => '<p>Product code is used to uniquely identify a product in Amazon Web Services Marketplace. The product code should be the same as the one used during the publishing of a new product.</p>', 'ResolveCustomerResult$ProductCode' => '<p>The product code is returned to confirm that the buyer is registering for your product. Subsequent <code>BatchMeterUsage</code> calls should be made using this product code.</p>', ], ], 'RegisterUsageRequest' => [ 'base' => NULL, 'refs' => [], ], 'RegisterUsageResult' => [ 'base' => NULL, 'refs' => [], ], 'ResolveCustomerRequest' => [ 'base' => '<p>Contains input to the <code>ResolveCustomer</code> operation.</p>', 'refs' => [], ], 'ResolveCustomerResult' => [ 'base' => '<p>The result of the <code>ResolveCustomer</code> operation. Contains the <code>CustomerIdentifier</code> along with the <code>CustomerAWSAccountId</code> and <code>ProductCode</code>.</p>', 'refs' => [], ], 'String' => [ 'base' => NULL, 'refs' => [ 'MeterUsageResult$MeteringRecordId' => '<p>Metering record id.</p>', 'UsageRecordResult$MeteringRecordId' => '<p>The <code>MeteringRecordId</code> is a unique identifier for this metering event.</p>', ], ], 'Tag' => [ 'base' => '<p>Metadata assigned to an allocation. Each tag is made up of a <code>key</code> and a <code>value</code>.</p>', 'refs' => [ 'TagList$member' => NULL, ], ], 'TagKey' => [ 'base' => NULL, 'refs' => [ 'Tag$Key' => '<p>One part of a key-value pair that makes up a <code>tag</code>. A <code>key</code> is a label that acts like a category for the specific tag values.</p>', ], ], 'TagList' => [ 'base' => NULL, 'refs' => [ 'UsageAllocation$Tags' => '<p>The set of tags that define the bucket of usage. For the bucket of items with no tags, this parameter can be left out.</p>', ], ], 'TagValue' => [ 'base' => NULL, 'refs' => [ 'Tag$Value' => '<p>One part of a key-value pair that makes up a <code>tag</code>. A <code>value</code> acts as a descriptor within a tag category (key). The value can be empty or null.</p>', ], ], 'ThrottlingException' => [ 'base' => '<p>The calls to the API are throttled.</p>', 'refs' => [], ], 'Timestamp' => [ 'base' => NULL, 'refs' => [ 'MeterUsageRequest$Timestamp' => '<p>Timestamp, in UTC, for which the usage is being reported. Your application can meter usage for up to six hours in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>', 'RegisterUsageResult$PublicKeyRotationTimestamp' => '<p>(Optional) Only included when public key version has expired</p>', 'UsageRecord$Timestamp' => '<p>Timestamp, in UTC, for which the usage is being reported.</p> <p>Your application can meter usage for up to one hour in the past. Make sure the <code>timestamp</code> value is not before the start of the software usage.</p>', ], ], 'TimestampOutOfBoundsException' => [ 'base' => '<p>The <code>timestamp</code> value passed in the <code>UsageRecord</code> is out of allowed range.</p> <p>For <code>BatchMeterUsage</code>, if any of the records are outside of the allowed range, the entire batch is not processed. You must remove invalid records and try again.</p>', 'refs' => [], ], 'UsageAllocation' => [ 'base' => '<p>Usage allocations allow you to split usage into buckets by tags.</p> <p>Each <code>UsageAllocation</code> indicates the usage quantity for a specific set of tags.</p>', 'refs' => [ 'UsageAllocations$member' => NULL, ], ], 'UsageAllocations' => [ 'base' => NULL, 'refs' => [ 'MeterUsageRequest$UsageAllocations' => '<p>The set of <code>UsageAllocations</code> to submit.</p> <p>The sum of all <code>UsageAllocation</code> quantities must equal the <code>UsageQuantity</code> of the <code>MeterUsage</code> request, and each <code>UsageAllocation</code> must have a unique set of tags (include no tags).</p>', 'UsageRecord$UsageAllocations' => '<p>The set of <code>UsageAllocations</code> to submit. The sum of all <code>UsageAllocation</code> quantities must equal the Quantity of the <code>UsageRecord</code>.</p>', ], ], 'UsageDimension' => [ 'base' => NULL, 'refs' => [ 'MeterUsageRequest$UsageDimension' => '<p>It will be one of the fcp dimension name provided during the publishing of the product.</p>', 'UsageRecord$Dimension' => '<p>During the process of registering a product on Amazon Web Services Marketplace, dimensions are specified. These represent different units of value in your application.</p>', ], ], 'UsageQuantity' => [ 'base' => NULL, 'refs' => [ 'MeterUsageRequest$UsageQuantity' => '<p>Consumption value for the hour. Defaults to <code>0</code> if not specified.</p>', 'UsageRecord$Quantity' => '<p>The quantity of usage consumed by the customer for the given dimension and time. Defaults to <code>0</code> if not specified.</p>', ], ], 'UsageRecord' => [ 'base' => '<p>A <code>UsageRecord</code> indicates a quantity of usage for a given product, customer, dimension and time.</p> <p>Multiple requests with the same <code>UsageRecords</code> as input will be de-duplicated to prevent double charges.</p>', 'refs' => [ 'UsageRecordList$member' => NULL, 'UsageRecordResult$UsageRecord' => '<p>The <code>UsageRecord</code> that was part of the <code>BatchMeterUsage</code> request.</p>', ], ], 'UsageRecordList' => [ 'base' => NULL, 'refs' => [ 'BatchMeterUsageRequest$UsageRecords' => '<p>The set of <code>UsageRecords</code> to submit. <code>BatchMeterUsage</code> accepts up to 25 <code>UsageRecords</code> at a time.</p>', 'BatchMeterUsageResult$UnprocessedRecords' => '<p>Contains all <code>UsageRecords</code> that were not processed by <code>BatchMeterUsage</code>. This is a list of <code>UsageRecords</code>. You can retry the failed request by making another <code>BatchMeterUsage</code> call with this list as input in the <code>BatchMeterUsageRequest</code>.</p>', ], ], 'UsageRecordResult' => [ 'base' => '<p>A <code>UsageRecordResult</code> indicates the status of a given <code>UsageRecord</code> processed by <code>BatchMeterUsage</code>.</p>', 'refs' => [ 'UsageRecordResultList$member' => NULL, ], ], 'UsageRecordResultList' => [ 'base' => NULL, 'refs' => [ 'BatchMeterUsageResult$Results' => '<p>Contains all <code>UsageRecords</code> processed by <code>BatchMeterUsage</code>. These records were either honored by Amazon Web Services Marketplace Metering Service or were invalid. Invalid records should be fixed before being resubmitted.</p>', ], ], 'UsageRecordResultStatus' => [ 'base' => NULL, 'refs' => [ 'UsageRecordResult$Status' => '<p>The <code>UsageRecordResult</code> <code>Status</code> indicates the status of an individual <code>UsageRecord</code> processed by <code>BatchMeterUsage</code>.</p> <ul> <li> <p> <i>Success</i>- The <code>UsageRecord</code> was accepted and honored by <code>BatchMeterUsage</code>.</p> </li> <li> <p> <i>CustomerNotSubscribed</i>- The <code>CustomerIdentifier</code> specified is not able to use your product. The <code>UsageRecord</code> was not honored. There are three causes for this result:</p> <ul> <li> <p>The customer identifier is invalid.</p> </li> <li> <p>The customer identifier provided in the metering record does not have an active agreement or subscription with this product. Future <code>UsageRecords</code> for this customer will fail until the customer subscribes to your product.</p> </li> <li> <p>The customer\'s Amazon Web Services account was suspended.</p> </li> </ul> </li> <li> <p> <i>DuplicateRecord</i>- Indicates that the <code>UsageRecord</code> was invalid and not honored. A previously metered <code>UsageRecord</code> had the same customer, dimension, and time, but a different quantity.</p> </li> </ul>', ], ], 'VersionInteger' => [ 'base' => NULL, 'refs' => [ 'RegisterUsageRequest$PublicKeyVersion' => '<p>Public Key Version provided by Amazon Web Services Marketplace</p>', ], ], 'errorMessage' => [ 'base' => NULL, 'refs' => [ 'CustomerNotEntitledException$message' => NULL, 'DisabledApiException$message' => NULL, 'DuplicateRequestException$message' => NULL, 'ExpiredTokenException$message' => NULL, 'InternalServiceErrorException$message' => NULL, 'InvalidCustomerIdentifierException$message' => NULL, 'InvalidEndpointRegionException$message' => NULL, 'InvalidProductCodeException$message' => NULL, 'InvalidPublicKeyVersionException$message' => NULL, 'InvalidRegionException$message' => NULL, 'InvalidTagException$message' => NULL, 'InvalidTokenException$message' => NULL, 'InvalidUsageAllocationsException$message' => NULL, 'InvalidUsageDimensionException$message' => NULL, 'PlatformNotSupportedException$message' => NULL, 'ThrottlingException$message' => NULL, 'TimestampOutOfBoundsException$message' => NULL, ], ], ],];
