<?php
// This file was auto-generated from sdk-root/src/data/security-ir/2018-05-10/docs-2.json
return [ 'version' => '2.0', 'service' => '<p>This guide provides documents the action and response elements for customer use of the service.</p>', 'operations' => [ 'BatchGetMemberAccountDetails' => '<p>Grants permission to view an existing membership.</p>', 'CancelMembership' => '<p>Grants permissions to cancel an existing membership.</p>', 'CloseCase' => '<p>Grants permission to close an existing case.</p>', 'CreateCase' => '<p>Grants permission to create a new case.</p>', 'CreateCaseComment' => '<p>Grants permission to add a comment to an existing case.</p>', 'CreateMembership' => '<p>Grants permissions to create a new membership.</p>', 'GetCase' => '<p>Grant permission to view a designated case.</p>', 'GetCaseAttachmentDownloadUrl' => '<p>Grants permission to obtain an Amazon S3 presigned URL to download an attachment.</p>', 'GetCaseAttachmentUploadUrl' => '<p>Grants permission to upload an attachment to a case.</p>', 'GetMembership' => '<p>Grants permission to get details of a designated service membership.</p>', 'ListCaseEdits' => '<p>Grants permissions to view the aidt log for edits made to a designated case.</p>', 'ListCases' => '<p>Grants permission to list all cases the requester has access to.</p>', 'ListComments' => '<p>Grants permissions to list and view comments for a designated case.</p>', 'ListMemberships' => '<p>Grants permission to query the memberships a principal has access to.</p>', 'ListTagsForResource' => '<p>Grants permission to view currently configured tags on a resource.</p>', 'TagResource' => '<p>Grants permission to add a tag(s) to a designated resource.</p>', 'UntagResource' => '<p>Grants permission to remove a tag(s) from a designate resource.</p>', 'UpdateCase' => '<p>Grants permission to update an existing case.</p>', 'UpdateCaseComment' => '<p>Grants permission to update an existing case comment.</p>', 'UpdateCaseStatus' => '<p>Grants permission to update the status for a designated cases. Options include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed</code>. </p>', 'UpdateMembership' => '<p>Grants access to UpdateMembership to change membership configuration.</p>', 'UpdateResolverType' => '<p>Grants permission to update the resolver type for a case.</p> <important> <p>This is a one-way action and cannot be reversed.</p> </important> <p>Options include self-supported &gt; AWS-supported.</p>', ], 'shapes' => [ 'AWSAccountId' => [ 'base' => NULL, 'refs' => [ 'AWSAccountIds$member' => NULL, 'GetMembershipAccountDetailError$accountId' => '<p/>', 'GetMembershipAccountDetailItem$accountId' => '<p/>', 'GetMembershipResponse$accountId' => '<p>Response element for GetMembership that provides the configured account for managing the membership. </p>', 'ImpactedAccounts$member' => NULL, 'ListMembershipItem$accountId' => '<p/>', ], ], 'AWSAccountIds' => [ 'base' => NULL, 'refs' => [ 'BatchGetMemberAccountDetailsRequest$accountIds' => '<p>Optional element to query the membership relationship status to a provided list of account IDs.</p>', ], ], 'AccessDeniedException' => [ 'base' => '<p/>', 'refs' => [], ], 'Arn' => [ 'base' => NULL, 'refs' => [ 'ListTagsForResourceInput$resourceArn' => '<p>Required element for ListTagsForResource to provide the ARN to identify a specific resource.</p>', 'TagResourceInput$resourceArn' => '<p>Required element for TagResource to identify the ARN for the resource to add a tag to.</p>', 'UntagResourceInput$resourceArn' => '<p>Required element for UnTagResource to identify the ARN for the resource to remove a tag from.</p>', ], ], 'AttachmentId' => [ 'base' => NULL, 'refs' => [ 'CaseAttachmentAttributes$attachmentId' => '<p/>', 'GetCaseAttachmentDownloadUrlRequest$attachmentId' => '<p>Required element for GetCaseAttachmentDownloadUrl to identify the attachment ID for downloading an attachment. </p>', ], ], 'AwsRegion' => [ 'base' => NULL, 'refs' => [ 'GetMembershipResponse$region' => '<p>Response element for GetMembership that provides the configured region for managing the membership.</p>', 'ImpactedAwsRegion$region' => '<p/>', 'ListMembershipItem$region' => '<p/>', ], ], 'AwsService' => [ 'base' => NULL, 'refs' => [ 'ImpactedServicesList$member' => NULL, ], ], 'BatchGetMemberAccountDetailsRequest' => [ 'base' => NULL, 'refs' => [], ], 'BatchGetMemberAccountDetailsResponse' => [ 'base' => NULL, 'refs' => [], ], 'Boolean' => [ 'base' => NULL, 'refs' => [ 'OptInFeature$isEnabled' => '<p/>', ], ], 'CancelMembershipRequest' => [ 'base' => NULL, 'refs' => [], ], 'CancelMembershipResponse' => [ 'base' => NULL, 'refs' => [], ], 'CaseArn' => [ 'base' => NULL, 'refs' => [ 'GetCaseResponse$caseArn' => '<p>Response element for GetCase that provides the case ARN</p>', 'ListCasesItem$caseArn' => '<p/>', ], ], 'CaseAttachmentAttributes' => [ 'base' => '<p/>', 'refs' => [ 'CaseAttachmentsList$member' => NULL, ], ], 'CaseAttachmentStatus' => [ 'base' => NULL, 'refs' => [ 'CaseAttachmentAttributes$attachmentStatus' => '<p/>', ], ], 'CaseAttachmentsList' => [ 'base' => NULL, 'refs' => [ 'GetCaseResponse$caseAttachments' => '<p>Response element for GetCase that provides a list of current case attachments.</p>', ], ], 'CaseDescription' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$description' => '<p>Required element used in combination with CreateCase to provide a description for the new case.</p>', 'GetCaseResponse$description' => '<p>Response element for GetCase that provides contents of the case description.</p>', 'UpdateCaseRequest$description' => '<p>Optional element for UpdateCase to provide content for the description field.</p>', ], ], 'CaseEditAction' => [ 'base' => NULL, 'refs' => [ 'CaseEditItem$action' => '<p/>', ], ], 'CaseEditItem' => [ 'base' => '<p/>', 'refs' => [ 'CaseEditItems$member' => NULL, ], ], 'CaseEditItems' => [ 'base' => NULL, 'refs' => [ 'ListCaseEditsResponse$items' => '<p>Response element for ListCaseEdits that includes the action, eventtimestamp, message, and principal for the response. </p>', ], ], 'CaseEditMessage' => [ 'base' => NULL, 'refs' => [ 'CaseEditItem$message' => '<p/>', ], ], 'CaseId' => [ 'base' => NULL, 'refs' => [ 'CloseCaseRequest$caseId' => '<p>Required element used in combination with CloseCase to identify the case ID to close.</p>', 'CreateCaseCommentRequest$caseId' => '<p>Required element used in combination with CreateCaseComment to specify a case ID.</p>', 'CreateCaseResponse$caseId' => '<p>A response element providing responses for requests to CreateCase. This element responds with the case ID. </p>', 'GetCaseAttachmentDownloadUrlRequest$caseId' => '<p>Required element for GetCaseAttachmentDownloadUrl to identify the case ID for downloading an attachment from. </p>', 'GetCaseAttachmentUploadUrlRequest$caseId' => '<p>Required element for GetCaseAttachmentUploadUrl to identify the case ID for uploading an attachment to. </p>', 'GetCaseRequest$caseId' => '<p>Required element for GetCase to identify the requested case ID.</p>', 'ListCaseEditsRequest$caseId' => '<p>Required element used with ListCaseEdits to identify the case to query.</p>', 'ListCasesItem$caseId' => '<p/>', 'ListCommentsRequest$caseId' => '<p>Required element for ListComments to designate the case to query.</p>', 'UpdateCaseCommentRequest$caseId' => '<p>Required element for UpdateCaseComment to identify the case ID containing the comment to be updated. </p>', 'UpdateCaseRequest$caseId' => '<p>Required element for UpdateCase to identify the case ID for updates.</p>', 'UpdateCaseStatusRequest$caseId' => '<p>Required element for UpdateCaseStatus to identify the case to update.</p>', 'UpdateResolverTypeRequest$caseId' => '<p>Required element for UpdateResolverType to identify the case to update.</p>', 'UpdateResolverTypeResponse$caseId' => '<p>Response element for UpdateResolver identifying the case ID being updated.</p>', ], ], 'CaseStatus' => [ 'base' => NULL, 'refs' => [ 'CloseCaseResponse$caseStatus' => '<p>A response element providing responses for requests to CloseCase. This element responds with the case status following the action. </p>', 'GetCaseResponse$caseStatus' => '<p>Response element for GetCase that provides the case status. Options for statuses include <code>Submitted | Detection and Analysis | Eradication, Containment and Recovery | Post-Incident Activities | Closed </code> </p>', 'ListCasesItem$caseStatus' => '<p/>', 'UpdateResolverTypeResponse$caseStatus' => '<p>Response element for UpdateResolver identifying the current status of the case.</p>', ], ], 'CaseTitle' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$title' => '<p>Required element used in combination with CreateCase to provide a title for the new case.</p>', 'GetCaseResponse$title' => '<p>Response element for GetCase that provides the case title.</p>', 'ListCasesItem$title' => '<p/>', 'UpdateCaseRequest$title' => '<p>Optional element for UpdateCase to provide content for the title field.</p>', ], ], 'CloseCaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'CloseCaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'ClosureCode' => [ 'base' => NULL, 'refs' => [ 'GetCaseResponse$closureCode' => '<p>Response element for GetCase that provides the summary code for why a case was closed.</p>', ], ], 'CommentBody' => [ 'base' => NULL, 'refs' => [ 'CreateCaseCommentRequest$body' => '<p>Required element used in combination with CreateCaseComment to add content for the new comment.</p>', 'ListCommentsItem$body' => '<p/>', 'UpdateCaseCommentRequest$body' => '<p>Required element for UpdateCaseComment to identify the content for the comment to be updated.</p>', 'UpdateCaseCommentResponse$body' => '<p>Response element for UpdateCaseComment providing the updated comment content.</p>', ], ], 'CommentId' => [ 'base' => NULL, 'refs' => [ 'CreateCaseCommentResponse$commentId' => '<p>Response element indicating the new comment ID.</p>', 'ListCommentsItem$commentId' => '<p/>', 'UpdateCaseCommentRequest$commentId' => '<p>Required element for UpdateCaseComment to identify the case ID to be updated.</p>', 'UpdateCaseCommentResponse$commentId' => '<p>Response element for UpdateCaseComment providing the updated comment ID.</p>', ], ], 'ConflictException' => [ 'base' => '<p/>', 'refs' => [], ], 'ContentLength' => [ 'base' => NULL, 'refs' => [ 'GetCaseAttachmentUploadUrlRequest$contentLength' => '<p>Required element for GetCaseAttachmentUploadUrl to identify the size od the file attachment.</p>', ], ], 'CreateCaseCommentRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateCaseCommentRequestClientTokenString' => [ 'base' => NULL, 'refs' => [ 'CreateCaseCommentRequest$clientToken' => '<p>An optional element used in combination with CreateCaseComment.</p>', ], ], 'CreateCaseCommentResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateCaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateCaseRequestClientTokenString' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$clientToken' => '<p>Required element used in combination with CreateCase.</p>', ], ], 'CreateCaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'CreateMembershipRequest' => [ 'base' => NULL, 'refs' => [], ], 'CreateMembershipRequestClientTokenString' => [ 'base' => NULL, 'refs' => [ 'CreateMembershipRequest$clientToken' => '<p>An optional element used in combination with CreateMembership.</p>', ], ], 'CreateMembershipResponse' => [ 'base' => NULL, 'refs' => [], ], 'CustomerType' => [ 'base' => NULL, 'refs' => [ 'GetMembershipResponse$customerType' => '<p>Response element for GetMembership that provides the configured membership type. Options include <code> Standalone | Organizations</code>. </p>', ], ], 'EmailAddress' => [ 'base' => NULL, 'refs' => [ 'IncidentResponder$email' => '<p/>', 'Watcher$email' => '<p/>', ], ], 'EngagementType' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$engagementType' => '<p>Required element used in combination with CreateCase to provide an engagement type for the new cases. Available engagement types include Security Incident | Investigation </p>', 'GetCaseResponse$engagementType' => '<p>Response element for GetCase that provides the engagement type. Options for engagement type include <code>Active Security Event | Investigations</code> </p>', 'ListCasesItem$engagementType' => '<p/>', 'UpdateCaseRequest$engagementType' => '<p>Optional element for UpdateCase to provide content for the engagement type field. <code>Available engagement types include Security Incident | Investigation</code>. </p>', ], ], 'FileName' => [ 'base' => NULL, 'refs' => [ 'CaseAttachmentAttributes$fileName' => '<p/>', 'GetCaseAttachmentUploadUrlRequest$fileName' => '<p>Required element for GetCaseAttachmentUploadUrl to identify the file name of the attachment to upload. </p>', ], ], 'GetCaseAttachmentDownloadUrlRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCaseAttachmentDownloadUrlResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetCaseAttachmentUploadUrlRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCaseAttachmentUploadUrlRequestClientTokenString' => [ 'base' => NULL, 'refs' => [ 'GetCaseAttachmentUploadUrlRequest$clientToken' => '<p>Optional element for customer provided token.</p>', ], ], 'GetCaseAttachmentUploadUrlResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetCaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetCaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'GetMembershipAccountDetailError' => [ 'base' => '<p/>', 'refs' => [ 'GetMembershipAccountDetailErrors$member' => NULL, ], ], 'GetMembershipAccountDetailErrors' => [ 'base' => NULL, 'refs' => [ 'BatchGetMemberAccountDetailsResponse$errors' => '<p>The response element providing errors messages for requests to GetMembershipAccountDetails.</p>', ], ], 'GetMembershipAccountDetailItem' => [ 'base' => '<p/>', 'refs' => [ 'GetMembershipAccountDetailItems$member' => NULL, ], ], 'GetMembershipAccountDetailItems' => [ 'base' => NULL, 'refs' => [ 'BatchGetMemberAccountDetailsResponse$items' => '<p>The response element providing responses for requests to GetMembershipAccountDetails.</p>', ], ], 'GetMembershipRequest' => [ 'base' => NULL, 'refs' => [], ], 'GetMembershipResponse' => [ 'base' => NULL, 'refs' => [], ], 'IPAddress' => [ 'base' => NULL, 'refs' => [ 'ThreatActorIp$ipAddress' => '<p/>', ], ], 'ImpactedAccounts' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$impactedAccounts' => '<p>Required element used in combination with CreateCase to provide a list of impacted accounts.</p>', 'GetCaseResponse$impactedAccounts' => '<p>Response element for GetCase that provides a list of impacted accounts.</p>', 'UpdateCaseRequest$impactedAccountsToAdd' => '<p>Optional element for UpdateCase to provide content to add accounts impacted.</p>', 'UpdateCaseRequest$impactedAccountsToDelete' => '<p>Optional element for UpdateCase to provide content to add accounts impacted.</p>', ], ], 'ImpactedAwsRegion' => [ 'base' => '<p/>', 'refs' => [ 'ImpactedAwsRegionList$member' => NULL, ], ], 'ImpactedAwsRegionList' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$impactedAwsRegions' => '<p>An optional element used in combination with CreateCase to provide a list of impacted regions.</p>', 'GetCaseResponse$impactedAwsRegions' => '<p>Response element for GetCase that provides the impacted regions.</p>', 'UpdateCaseRequest$impactedAwsRegionsToAdd' => '<p>Optional element for UpdateCase to provide content to add regions impacted.</p>', 'UpdateCaseRequest$impactedAwsRegionsToDelete' => '<p>Optional element for UpdateCase to provide content to remove regions impacted.</p>', ], ], 'ImpactedServicesList' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$impactedServices' => '<p>An optional element used in combination with CreateCase to provide a list of services impacted.</p>', 'GetCaseResponse$impactedServices' => '<p>Response element for GetCase that provides a list of impacted services.</p>', 'UpdateCaseRequest$impactedServicesToAdd' => '<p>Optional element for UpdateCase to provide content to add services impacted.</p>', 'UpdateCaseRequest$impactedServicesToDelete' => '<p>Optional element for UpdateCase to provide content to remove services impacted.</p>', ], ], 'IncidentResponder' => [ 'base' => '<p/>', 'refs' => [ 'IncidentResponseTeam$member' => NULL, ], ], 'IncidentResponderName' => [ 'base' => NULL, 'refs' => [ 'IncidentResponder$name' => '<p/>', ], ], 'IncidentResponseTeam' => [ 'base' => NULL, 'refs' => [ 'CreateMembershipRequest$incidentResponseTeam' => '<p>Required element use in combination with CreateMembership to add customer incident response team members and trusted partners to the membership. </p>', 'GetMembershipResponse$incidentResponseTeam' => '<p>Response element for GetMembership that provides the configured membership incident response team members. </p>', 'UpdateMembershipRequest$incidentResponseTeam' => '<p>Optional element for UpdateMembership to update the membership name.</p>', ], ], 'Integer' => [ 'base' => NULL, 'refs' => [ 'InternalServerException$retryAfterSeconds' => '<p>Element providing advice to clients on when the call can be safely retried.</p>', 'ListCaseEditsResponse$total' => '<p>Response element for ListCaseEdits that identifies the total number of edits.</p>', 'ListCommentsResponse$total' => '<p>Response element for ListComments identifying the number of responses.</p>', 'ThrottlingException$retryAfterSeconds' => '<p>Element providing advice to clients on when the call can be safely retried.</p>', ], ], 'InternalServerException' => [ 'base' => '<p/>', 'refs' => [], ], 'InvalidTokenException' => [ 'base' => '<p/>', 'refs' => [], ], 'JobTitle' => [ 'base' => NULL, 'refs' => [ 'IncidentResponder$jobTitle' => '<p/>', 'Watcher$jobTitle' => '<p/>', ], ], 'ListCaseEditsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListCaseEditsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListCaseEditsRequest$maxResults' => '<p>Optional element to identify how many results to obtain. There is a maximum value of 25.</p>', ], ], 'ListCaseEditsRequestNextTokenString' => [ 'base' => NULL, 'refs' => [ 'ListCaseEditsRequest$nextToken' => '<p>Optional element for a customer provided token.</p>', ], ], 'ListCaseEditsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListCasesItem' => [ 'base' => '<p/>', 'refs' => [ 'ListCasesItems$member' => NULL, ], ], 'ListCasesItems' => [ 'base' => NULL, 'refs' => [ 'ListCasesResponse$items' => '<p>Response element for ListCases that includes caseARN, caseID, caseStatus, closedDate, createdDate, engagementType, lastUpdatedDate, pendingAction, resolverType, and title for each response. </p>', ], ], 'ListCasesRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListCasesRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListCasesRequest$maxResults' => '<p>Optional element for ListCases to limit the number of responses.</p>', ], ], 'ListCasesRequestNextTokenString' => [ 'base' => NULL, 'refs' => [ 'ListCasesRequest$nextToken' => '<p>Optional element.</p>', ], ], 'ListCasesResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListCommentsItem' => [ 'base' => '<p/>', 'refs' => [ 'ListCommentsItems$member' => NULL, ], ], 'ListCommentsItems' => [ 'base' => NULL, 'refs' => [ 'ListCommentsResponse$items' => '<p>Response element for ListComments providing the body, commentID, createDate, creator, lastUpdatedBy and lastUpdatedDate for each response. </p>', ], ], 'ListCommentsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListCommentsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListCommentsRequest$maxResults' => '<p>Optional element for ListComments to limit the number of responses.</p>', ], ], 'ListCommentsRequestNextTokenString' => [ 'base' => NULL, 'refs' => [ 'ListCommentsRequest$nextToken' => '<p>Optional element.</p>', ], ], 'ListCommentsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListMembershipItem' => [ 'base' => '<p/>', 'refs' => [ 'ListMembershipItems$member' => NULL, ], ], 'ListMembershipItems' => [ 'base' => NULL, 'refs' => [ 'ListMembershipsResponse$items' => '<p>Request element for ListMemberships including the accountID, membershipARN, membershipID, membershipStatus, and region for each response. </p>', ], ], 'ListMembershipsRequest' => [ 'base' => NULL, 'refs' => [], ], 'ListMembershipsRequestMaxResultsInteger' => [ 'base' => NULL, 'refs' => [ 'ListMembershipsRequest$maxResults' => '<p>Request element for ListMemberships to limit the number of responses.</p>', ], ], 'ListMembershipsRequestNextTokenString' => [ 'base' => NULL, 'refs' => [ 'ListMembershipsRequest$nextToken' => '<p>Optional element.</p>', ], ], 'ListMembershipsResponse' => [ 'base' => NULL, 'refs' => [], ], 'ListTagsForResourceInput' => [ 'base' => NULL, 'refs' => [], ], 'ListTagsForResourceOutput' => [ 'base' => NULL, 'refs' => [], ], 'Long' => [ 'base' => NULL, 'refs' => [ 'GetMembershipResponse$numberOfAccountsCovered' => '<p>Response element for GetMembership that provides the number of accounts in the membership.</p>', 'ListCasesResponse$total' => '<p>Response element for ListCases providing the total number of responses.</p>', ], ], 'MembershipAccountRelationshipStatus' => [ 'base' => NULL, 'refs' => [ 'GetMembershipAccountDetailItem$relationshipStatus' => '<p/>', ], ], 'MembershipAccountRelationshipType' => [ 'base' => NULL, 'refs' => [ 'GetMembershipAccountDetailItem$relationshipType' => '<p/>', ], ], 'MembershipArn' => [ 'base' => NULL, 'refs' => [ 'GetMembershipResponse$membershipArn' => '<p>Response element for GetMembership that provides the membership ARN.</p>', 'ListMembershipItem$membershipArn' => '<p/>', ], ], 'MembershipId' => [ 'base' => NULL, 'refs' => [ 'BatchGetMemberAccountDetailsRequest$membershipId' => '<p>Required element used in combination with BatchGetMemberAccountDetails to identify the membership ID to query. </p>', 'CancelMembershipRequest$membershipId' => '<p>Required element used in combination with CancelMembershipRequest to identify the membership ID to cancel. </p>', 'CancelMembershipResponse$membershipId' => '<p>The response element providing responses for requests to CancelMembershipRequest.</p>', 'CreateMembershipResponse$membershipId' => '<p>Response element for CreateMembership providing the newly created membership ID.</p>', 'GetMembershipRequest$membershipId' => '<p>Required element for GetMembership to identify the membership ID to query.</p>', 'GetMembershipResponse$membershipId' => '<p>Response element for GetMembership that provides the queried membership ID.</p>', 'ListMembershipItem$membershipId' => '<p/>', 'UpdateMembershipRequest$membershipId' => '<p>Required element for UpdateMembership to identify the membership to update.</p>', ], ], 'MembershipName' => [ 'base' => NULL, 'refs' => [ 'CreateMembershipRequest$membershipName' => '<p>Required element use in combination with CreateMembership to create a name for the membership.</p>', 'GetMembershipResponse$membershipName' => '<p>Response element for GetMembership that provides the configured membership name.</p>', 'UpdateMembershipRequest$membershipName' => '<p>Optional element for UpdateMembership to update the membership name.</p>', ], ], 'MembershipStatus' => [ 'base' => NULL, 'refs' => [ 'GetMembershipResponse$membershipStatus' => '<p>Response element for GetMembership that provides the current membership status.</p>', 'ListMembershipItem$membershipStatus' => '<p/>', ], ], 'OptInFeature' => [ 'base' => '<p/>', 'refs' => [ 'OptInFeatures$member' => NULL, ], ], 'OptInFeatureName' => [ 'base' => NULL, 'refs' => [ 'OptInFeature$featureName' => '<p/>', ], ], 'OptInFeatures' => [ 'base' => NULL, 'refs' => [ 'CreateMembershipRequest$optInFeatures' => '<p>Optional element to enable the monitoring and investigation opt-in features for the service.</p>', 'GetMembershipResponse$optInFeatures' => '<p>Response element for GetMembership that provides the if opt-in features have been enabled.</p>', 'UpdateMembershipRequest$optInFeatures' => '<p>Optional element for UpdateMembership to enable or disable opt-in features for the service.</p>', ], ], 'PendingAction' => [ 'base' => NULL, 'refs' => [ 'GetCaseResponse$pendingAction' => '<p>Response element for GetCase that provides identifies the case is waiting on customer input.</p>', 'ListCasesItem$pendingAction' => '<p/>', ], ], 'PersonName' => [ 'base' => NULL, 'refs' => [ 'Watcher$name' => '<p/>', ], ], 'PrincipalId' => [ 'base' => NULL, 'refs' => [ 'CaseAttachmentAttributes$creator' => '<p/>', 'ListCommentsItem$creator' => '<p/>', 'ListCommentsItem$lastUpdatedBy' => '<p/>', ], ], 'ResolverType' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$resolverType' => '<p>Required element used in combination with CreateCase to identify the resolver type. Available resolvers include self-supported | aws-supported. </p>', 'GetCaseResponse$resolverType' => '<p>Response element for GetCase that provides the current resolver types. Options include <code> self-supported | AWS-supported</code>. </p>', 'ListCasesItem$resolverType' => '<p/>', 'UpdateResolverTypeRequest$resolverType' => '<p>Required element for UpdateResolverType to identify the new resolver.</p>', 'UpdateResolverTypeResponse$resolverType' => '<p>Response element for UpdateResolver identifying the current resolver of the case.</p>', ], ], 'ResourceNotFoundException' => [ 'base' => '<p/>', 'refs' => [], ], 'SecurityIncidentResponseNotActiveException' => [ 'base' => '<p/>', 'refs' => [], ], 'SelfManagedCaseStatus' => [ 'base' => NULL, 'refs' => [ 'UpdateCaseStatusRequest$caseStatus' => '<p>Required element for UpdateCaseStatus to identify the status for a case. Options include <code>Submitted | Detection and Analysis | Containment, Eradication and Recovery | Post-incident Activities</code>. </p>', 'UpdateCaseStatusResponse$caseStatus' => '<p>Response element for UpdateCaseStatus showing the newly configured status.</p>', ], ], 'ServiceQuotaExceededException' => [ 'base' => '<p/>', 'refs' => [], ], 'String' => [ 'base' => NULL, 'refs' => [ 'AccessDeniedException$message' => NULL, 'CaseEditItem$principal' => '<p/>', 'ConflictException$message' => NULL, 'ConflictException$resourceId' => '<p>Element providing the ID of the resource affected.</p>', 'ConflictException$resourceType' => '<p>Element providing the type of the resource affected.</p>', 'GetMembershipAccountDetailError$error' => '<p/>', 'GetMembershipAccountDetailError$message' => '<p/>', 'InternalServerException$message' => NULL, 'InvalidTokenException$message' => NULL, 'ListCaseEditsResponse$nextToken' => '<p>Optional element.</p>', 'ListCasesResponse$nextToken' => '<p>Optional element.</p>', 'ListCommentsResponse$nextToken' => '<p>Optional request elements.</p>', 'ListMembershipsResponse$nextToken' => '<p>Optional element.</p>', 'ResourceNotFoundException$message' => NULL, 'SecurityIncidentResponseNotActiveException$message' => NULL, 'ServiceQuotaExceededException$message' => NULL, 'ServiceQuotaExceededException$resourceId' => '<p>Element that provides the ID of the resource affected.</p>', 'ServiceQuotaExceededException$resourceType' => '<p>Element that provides the type of the resource affected.</p>', 'ServiceQuotaExceededException$serviceCode' => '<p>Element that provides the originating service who made the call.</p>', 'ServiceQuotaExceededException$quotaCode' => '<p>Element that provides the quota that was exceeded.</p>', 'ThrottlingException$message' => NULL, 'ThrottlingException$serviceCode' => '<p>Element providing the service code of the originating service.</p>', 'ThrottlingException$quotaCode' => '<p>Element providing the quota of the originating service.</p>', 'ValidationException$message' => NULL, 'ValidationExceptionField$name' => '<p/>', 'ValidationExceptionField$message' => '<p/>', ], ], 'TagKey' => [ 'base' => NULL, 'refs' => [ 'TagKeys$member' => NULL, 'TagMap$key' => NULL, ], ], 'TagKeys' => [ 'base' => NULL, 'refs' => [ 'UntagResourceInput$tagKeys' => '<p>Required element for UnTagResource to identify tag to remove.</p>', ], ], 'TagMap' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$tags' => '<p>An optional element used in combination with CreateCase to add customer specified tags to a case.</p>', 'CreateMembershipRequest$tags' => '<p>Optional element for customer configured tags.</p>', 'ListTagsForResourceOutput$tags' => '<p>Response element for ListTagsForResource providing content for each configured tag.</p>', 'TagResourceInput$tags' => '<p>Required element for ListTagsForResource to provide the content for a tag.</p>', ], ], 'TagResourceInput' => [ 'base' => NULL, 'refs' => [], ], 'TagResourceOutput' => [ 'base' => NULL, 'refs' => [], ], 'TagValue' => [ 'base' => NULL, 'refs' => [ 'TagMap$value' => NULL, ], ], 'ThreatActorIp' => [ 'base' => '<p/>', 'refs' => [ 'ThreatActorIpList$member' => NULL, ], ], 'ThreatActorIpList' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$threatActorIpAddresses' => '<p>An optional element used in combination with CreateCase to provide a list of suspicious internet protocol addresses associated with unauthorized activity. </p>', 'GetCaseResponse$threatActorIpAddresses' => '<p>Response element for GetCase that provides a list of suspicious IP addresses associated with unauthorized activity. </p>', 'UpdateCaseRequest$threatActorIpAddressesToAdd' => '<p>Optional element for UpdateCase to provide content to add additional suspicious IP addresses related to a case. </p>', 'UpdateCaseRequest$threatActorIpAddressesToDelete' => '<p>Optional element for UpdateCase to provide content to remove suspicious IP addresses from a case.</p>', ], ], 'ThrottlingException' => [ 'base' => '<p/>', 'refs' => [], ], 'Timestamp' => [ 'base' => NULL, 'refs' => [ 'CaseAttachmentAttributes$createdDate' => '<p/>', 'CaseEditItem$eventTimestamp' => '<p/>', 'CloseCaseResponse$closedDate' => '<p>A response element providing responses for requests to CloseCase. This element responds with the case closure date following the action. </p>', 'CreateCaseRequest$reportedIncidentStartDate' => '<p>Required element used in combination with CreateCase to provide an initial start date for the unauthorized activity. </p>', 'GetCaseResponse$reportedIncidentStartDate' => '<p>Response element for GetCase that provides the customer provided incident start date.</p>', 'GetCaseResponse$actualIncidentStartDate' => '<p>Response element for GetCase that provides the actual incident start date as identified by data analysis during the investigation. </p>', 'GetCaseResponse$createdDate' => '<p>Response element for GetCase that provides the date the case was created.</p>', 'GetCaseResponse$lastUpdatedDate' => '<p>Response element for GetCase that provides the date a case was last modified.</p>', 'GetCaseResponse$closedDate' => '<p>Response element for GetCase that provides the date a specified case was closed.</p>', 'GetMembershipResponse$membershipActivationTimestamp' => '<p>Response element for GetMembership that provides the configured membership activation timestamp.</p>', 'GetMembershipResponse$membershipDeactivationTimestamp' => '<p>Response element for GetMembership that provides the configured membership name deactivation timestamp. </p>', 'ListCasesItem$lastUpdatedDate' => '<p/>', 'ListCasesItem$createdDate' => '<p/>', 'ListCasesItem$closedDate' => '<p/>', 'ListCommentsItem$createdDate' => '<p/>', 'ListCommentsItem$lastUpdatedDate' => '<p/>', 'UpdateCaseRequest$reportedIncidentStartDate' => '<p>Optional element for UpdateCase to provide content for the customer reported incident start date field. </p>', 'UpdateCaseRequest$actualIncidentStartDate' => '<p>Optional element for UpdateCase to provide content for the incident start date field.</p>', ], ], 'UntagResourceInput' => [ 'base' => NULL, 'refs' => [], ], 'UntagResourceOutput' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCaseCommentRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCaseCommentResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCaseRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCaseResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCaseStatusRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateCaseStatusResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateMembershipRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateMembershipResponse' => [ 'base' => NULL, 'refs' => [], ], 'UpdateResolverTypeRequest' => [ 'base' => NULL, 'refs' => [], ], 'UpdateResolverTypeResponse' => [ 'base' => NULL, 'refs' => [], ], 'Url' => [ 'base' => NULL, 'refs' => [ 'GetCaseAttachmentDownloadUrlResponse$attachmentPresignedUrl' => '<p>Response element providing the Amazon S3 presigned URL to download an attachment.</p>', 'GetCaseAttachmentUploadUrlResponse$attachmentPresignedUrl' => '<p>Response element providing the Amazon S3 presigned UTL to upload the attachment.</p>', ], ], 'UserAgent' => [ 'base' => NULL, 'refs' => [ 'ThreatActorIp$userAgent' => '<p/>', ], ], 'ValidationException' => [ 'base' => '<p/>', 'refs' => [], ], 'ValidationExceptionField' => [ 'base' => '<p/>', 'refs' => [ 'ValidationExceptionFieldList$member' => NULL, ], ], 'ValidationExceptionFieldList' => [ 'base' => NULL, 'refs' => [ 'ValidationException$fieldList' => '<p>Element that provides the list of field(s) that caused the error, if applicable.</p>', ], ], 'ValidationExceptionReason' => [ 'base' => NULL, 'refs' => [ 'ValidationException$reason' => '<p>Element that provides the reason the request failed validation.</p>', ], ], 'Watcher' => [ 'base' => '<p/>', 'refs' => [ 'Watchers$member' => NULL, ], ], 'Watchers' => [ 'base' => NULL, 'refs' => [ 'CreateCaseRequest$watchers' => '<p>Required element used in combination with CreateCase to provide a list of entities to receive notifications for case updates. </p>', 'GetCaseResponse$watchers' => '<p>Response element for GetCase that provides a list of Watchers added to the case.</p>', 'UpdateCaseRequest$watchersToAdd' => '<p>Optional element for UpdateCase to provide content to add additional watchers to a case.</p>', 'UpdateCaseRequest$watchersToDelete' => '<p>Optional element for UpdateCase to provide content to remove existing watchers from a case.</p>', ], ], ],];
